
BLE_HeartRateFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffe0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  08010120  08010120  00020120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010cb0  08010cb0  00020cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010cb8  08010cb8  00020cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010cbc  08010cbc  00020cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000004  08010cc0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 000000b0  200001f8  08010eb0  000301f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000041  200002a8  08010f60  000302a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 TIMERSERVER_CONTEXT 00000099  200002ec  08010fa1  000302ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000388  0801103a  00030388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002804  200003a0  0801104b  000303a0  2**3
                  ALLOC
 12 ._user_heap_stack 00001404  20002ba4  0801104b  00032ba4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030399  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000499ae  00000000  00000000  000303c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007e4f  00000000  00000000  00079d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 000033b8  00000000  00000000  00081bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003070  00000000  00000000  00084f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00030ffc  00000000  00000000  00087ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002e926  00000000  00000000  000b8fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010bc2e  00000000  00000000  000e7912  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001f3540  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e5bc  00000000  00000000  001f35bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200003a0 	.word	0x200003a0
 800015c:	00000000 	.word	0x00000000
 8000160:	08010108 	.word	0x08010108

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200003a4 	.word	0x200003a4
 800017c:	08010108 	.word	0x08010108

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <LL_FLASH_GetUDN+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	1fff7580 	.word	0x1fff7580

08000e70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <LL_FLASH_GetDeviceID+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	1fff7584 	.word	0x1fff7584

08000e88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <LL_FLASH_GetSTCompanyID+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	1fff7584 	.word	0x1fff7584

08000ea0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

SemHciId = osSemaphoreNew(1, 0, NULL);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f009 f87c 	bl	8009fa8 <osSemaphoreNew>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <APP_BLE_Init+0xd0>)
 8000eb4:	601a      	str	r2, [r3, #0]

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <APP_BLE_Init+0xd4>)
 8000eb8:	463c      	mov	r4, r7
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ec8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eca:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000ecc:	f000 fa1c 	bl	8001308 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f00c fcf6 	bl	800d8c4 <UTIL_LPM_SetOffMode>
  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  //CONVERT BLE EDIT
  //UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
  AsynchBleId = osThreadNew(AsynchBle, NULL, &AsynchBle_attr);
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <APP_BLE_Init+0xd8>)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4827      	ldr	r0, [pc, #156]	; (8000f7c <APP_BLE_Init+0xdc>)
 8000ede:	f008 fd7f 	bl	80099e0 <osThreadNew>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <APP_BLE_Init+0xe0>)
 8000ee6:	601a      	str	r2, [r3, #0]
  AdvCancelId = osThreadNew(AdvCancel, NULL, &AdvCancel_attr);
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <APP_BLE_Init+0xe4>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4826      	ldr	r0, [pc, #152]	; (8000f88 <APP_BLE_Init+0xe8>)
 8000eee:	f008 fd77 	bl	80099e0 <osThreadNew>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <APP_BLE_Init+0xec>)
 8000ef6:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4618      	mov	r0, r3
 8000efc:	f007 fede 	bl	8008cbc <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000f00:	f000 fa20 	bl	8001344 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000f04:	f006 fe38 	bl	8007b78 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000f08:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <APP_BLE_Init+0xf0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <APP_BLE_Init+0xf0>)
 8000f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f16:	84da      	strh	r2, [r3, #38]	; 0x26
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 8000f18:	2006      	movs	r0, #6
 8000f1a:	f007 fd72 	bl	8008a02 <aci_hal_set_radio_activity_mask>
#endif
  
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0; 
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <APP_BLE_Init+0xf4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
  mutex = 1; 
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <APP_BLE_Init+0xf8>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8000f2a:	f000 fd53 	bl	80019d4 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <APP_BLE_Init+0xfc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	491b      	ldr	r1, [pc, #108]	; (8000fa0 <APP_BLE_Init+0x100>)
 8000f34:	2000      	movs	r0, #0
 8000f36:	f002 fa13 	bl	8003360 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <APP_BLE_Init+0x104>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	491a      	ldr	r1, [pc, #104]	; (8000fa8 <APP_BLE_Init+0x108>)
 8000f40:	2000      	movs	r0, #0
 8000f42:	f002 fa0d 	bl	8003360 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <APP_BLE_Init+0xf0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <APP_BLE_Init+0xf0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <APP_BLE_Init+0x10c>)
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <APP_BLE_Init+0x110>)
 8000f5e:	22a0      	movs	r2, #160	; 0xa0
 8000f60:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 fac8 	bl	80014f8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000f68:	bf00      	nop
}
 8000f6a:	3730      	adds	r7, #48	; 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f70:	200028e4 	.word	0x200028e4
 8000f74:	08010148 	.word	0x08010148
 8000f78:	08010798 	.word	0x08010798
 8000f7c:	0800182d 	.word	0x0800182d
 8000f80:	200028ec 	.word	0x200028ec
 8000f84:	080107bc 	.word	0x080107bc
 8000f88:	08001847 	.word	0x08001847
 8000f8c:	200028f8 	.word	0x200028f8
 8000f90:	200001f8 	.word	0x200001f8
 8000f94:	200028f1 	.word	0x200028f1
 8000f98:	200028f0 	.word	0x200028f0
 8000f9c:	08001729 	.word	0x08001729
 8000fa0:	20000289 	.word	0x20000289
 8000fa4:	08001741 	.word	0x08001741
 8000fa8:	2000028a 	.word	0x2000028a
 8000fac:	2000028c 	.word	0x2000028c
 8000fb0:	2000028e 	.word	0x2000028e

08000fb4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000fbc:	2342      	movs	r3, #66	; 0x42
 8000fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8000fce:	d028      	beq.n	8001022 <SVCCTL_App_Notification+0x6e>
 8000fd0:	2bff      	cmp	r3, #255	; 0xff
 8000fd2:	f000 80af 	beq.w	8001134 <SVCCTL_App_Notification+0x180>
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d000      	beq.n	8000fdc <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000fda:	e157      	b.n	800128c <SVCCTL_App_Notification+0x2d8>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	3302      	adds	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4bab      	ldr	r3, [pc, #684]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8000fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d109      	bne.n	8001006 <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000ff2:	4ba9      	ldr	r3, [pc, #676]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000ff8:	4ba7      	ldr	r3, [pc, #668]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8001000:	48a6      	ldr	r0, [pc, #664]	; (800129c <SVCCTL_App_Notification+0x2e8>)
 8001002:	f00d f9cf 	bl	800e3a4 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 fa76 	bl	80014f8 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800100c:	4ba4      	ldr	r3, [pc, #656]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001012:	4ba1      	ldr	r3, [pc, #644]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8001014:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001016:	4ba2      	ldr	r3, [pc, #648]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 8001018:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 800101a:	48a1      	ldr	r0, [pc, #644]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 800101c:	f000 fcc6 	bl	80019ac <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8001020:	e134      	b.n	800128c <SVCCTL_App_Notification+0x2d8>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	3302      	adds	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d004      	beq.n	800103a <SVCCTL_App_Notification+0x86>
 8001030:	2b0c      	cmp	r3, #12
 8001032:	d006      	beq.n	8001042 <SVCCTL_App_Notification+0x8e>
 8001034:	2b01      	cmp	r3, #1
 8001036:	d042      	beq.n	80010be <SVCCTL_App_Notification+0x10a>
          break;
 8001038:	e07b      	b.n	8001132 <SVCCTL_App_Notification+0x17e>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800103a:	489a      	ldr	r0, [pc, #616]	; (80012a4 <SVCCTL_App_Notification+0x2f0>)
 800103c:	f00d f9b2 	bl	800e3a4 <puts>
          break;
 8001040:	e077      	b.n	8001132 <SVCCTL_App_Notification+0x17e>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8001042:	4899      	ldr	r0, [pc, #612]	; (80012a8 <SVCCTL_App_Notification+0x2f4>)
 8001044:	f00d f9ae 	bl	800e3a4 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	3301      	adds	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8001056:	4895      	ldr	r0, [pc, #596]	; (80012ac <SVCCTL_App_Notification+0x2f8>)
 8001058:	f00d f9a4 	bl	800e3a4 <puts>
 800105c:	e002      	b.n	8001064 <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 800105e:	4894      	ldr	r0, [pc, #592]	; (80012b0 <SVCCTL_App_Notification+0x2fc>)
 8001060:	f00d f9a0 	bl	800e3a4 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8001064:	4b8c      	ldr	r3, [pc, #560]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8001066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001068:	f107 020e 	add.w	r2, r7, #14
 800106c:	f107 010f 	add.w	r1, r7, #15
 8001070:	4618      	mov	r0, r3
 8001072:	f007 fd34 	bl	8008ade <hci_le_read_phy>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 800107c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001080:	2b00      	cmp	r3, #0
 8001082:	d118      	bne.n	80010b6 <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 8001084:	488b      	ldr	r0, [pc, #556]	; (80012b4 <SVCCTL_App_Notification+0x300>)
 8001086:	f00d f98d 	bl	800e3a4 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d10a      	bne.n	80010a6 <SVCCTL_App_Notification+0xf2>
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d107      	bne.n	80010a6 <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4619      	mov	r1, r3
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	461a      	mov	r2, r3
 800109e:	4886      	ldr	r0, [pc, #536]	; (80012b8 <SVCCTL_App_Notification+0x304>)
 80010a0:	f00d f90c 	bl	800e2bc <iprintf>
          break;
 80010a4:	e045      	b.n	8001132 <SVCCTL_App_Notification+0x17e>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4619      	mov	r1, r3
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4882      	ldr	r0, [pc, #520]	; (80012b8 <SVCCTL_App_Notification+0x304>)
 80010b0:	f00d f904 	bl	800e2bc <iprintf>
          break;
 80010b4:	e03d      	b.n	8001132 <SVCCTL_App_Notification+0x17e>
            APP_DBG_MSG("Read conf not succeess \n");
 80010b6:	4881      	ldr	r0, [pc, #516]	; (80012bc <SVCCTL_App_Notification+0x308>)
 80010b8:	f00d f974 	bl	800e3a4 <puts>
          break;
 80010bc:	e039      	b.n	8001132 <SVCCTL_App_Notification+0x17e>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80010c4:	4b74      	ldr	r3, [pc, #464]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 80010c6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 f9be 	bl	800344c <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	4879      	ldr	r0, [pc, #484]	; (80012c0 <SVCCTL_App_Notification+0x30c>)
 80010dc:	f00d f8ee 	bl	800e2bc <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80010e0:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 80010e2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d104      	bne.n	80010f4 <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80010ea:	4b6b      	ldr	r3, [pc, #428]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 80010ec:	2206      	movs	r2, #6
 80010ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80010f2:	e003      	b.n	80010fc <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 80010f6:	2205      	movs	r2, #5
 80010f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b64      	ldr	r3, [pc, #400]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8001106:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001108:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800110e:	4b62      	ldr	r3, [pc, #392]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8001110:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 8001114:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8001116:	4862      	ldr	r0, [pc, #392]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 8001118:	f000 fc48 	bl	80019ac <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800111c:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 8001124:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001126:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 8001128:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800112a:	485d      	ldr	r0, [pc, #372]	; (80012a0 <SVCCTL_App_Notification+0x2ec>)
 800112c:	f000 fc3e 	bl	80019ac <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8001130:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8001132:	e0ab      	b.n	800128c <SVCCTL_App_Notification+0x2d8>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	3302      	adds	r3, #2
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	f240 4205 	movw	r2, #1029	; 0x405
 8001144:	4293      	cmp	r3, r2
 8001146:	d049      	beq.n	80011dc <SVCCTL_App_Notification+0x228>
 8001148:	f240 4205 	movw	r2, #1029	; 0x405
 800114c:	4293      	cmp	r3, r2
 800114e:	dc17      	bgt.n	8001180 <SVCCTL_App_Notification+0x1cc>
 8001150:	f240 4201 	movw	r2, #1025	; 0x401
 8001154:	4293      	cmp	r3, r2
 8001156:	d073      	beq.n	8001240 <SVCCTL_App_Notification+0x28c>
 8001158:	f240 4201 	movw	r2, #1025	; 0x401
 800115c:	4293      	cmp	r3, r2
 800115e:	dc06      	bgt.n	800116e <SVCCTL_App_Notification+0x1ba>
 8001160:	2b04      	cmp	r3, #4
 8001162:	f000 808a 	beq.w	800127a <SVCCTL_App_Notification+0x2c6>
 8001166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116a:	d024      	beq.n	80011b6 <SVCCTL_App_Notification+0x202>
      break; /* EVT_VENDOR */
 800116c:	e08d      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
      switch (blue_evt->ecode)
 800116e:	f240 4203 	movw	r2, #1027	; 0x403
 8001172:	4293      	cmp	r3, r2
 8001174:	d02a      	beq.n	80011cc <SVCCTL_App_Notification+0x218>
 8001176:	f240 4203 	movw	r2, #1027	; 0x403
 800117a:	4293      	cmp	r3, r2
 800117c:	dc2a      	bgt.n	80011d4 <SVCCTL_App_Notification+0x220>
 800117e:	e01e      	b.n	80011be <SVCCTL_App_Notification+0x20a>
 8001180:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001184:	d03a      	beq.n	80011fc <SVCCTL_App_Notification+0x248>
 8001186:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800118a:	dc08      	bgt.n	800119e <SVCCTL_App_Notification+0x1ea>
 800118c:	f240 4206 	movw	r2, #1030	; 0x406
 8001190:	4293      	cmp	r3, r2
 8001192:	d02f      	beq.n	80011f4 <SVCCTL_App_Notification+0x240>
 8001194:	f240 4207 	movw	r2, #1031	; 0x407
 8001198:	4293      	cmp	r3, r2
 800119a:	d06a      	beq.n	8001272 <SVCCTL_App_Notification+0x2be>
      break; /* EVT_VENDOR */
 800119c:	e075      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
      switch (blue_evt->ecode)
 800119e:	f240 420a 	movw	r2, #1034	; 0x40a
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d02e      	beq.n	8001204 <SVCCTL_App_Notification+0x250>
 80011a6:	f240 420a 	movw	r2, #1034	; 0x40a
 80011aa:	4293      	cmp	r3, r2
 80011ac:	db2e      	blt.n	800120c <SVCCTL_App_Notification+0x258>
 80011ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011b2:	d05a      	beq.n	800126a <SVCCTL_App_Notification+0x2b6>
      break; /* EVT_VENDOR */
 80011b4:	e069      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 80011b6:	4843      	ldr	r0, [pc, #268]	; (80012c4 <SVCCTL_App_Notification+0x310>)
 80011b8:	f00d f8f4 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 80011bc:	e065      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 80011be:	4842      	ldr	r0, [pc, #264]	; (80012c8 <SVCCTL_App_Notification+0x314>)
 80011c0:	f00d f8f0 	bl	800e3a4 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 80011c4:	4841      	ldr	r0, [pc, #260]	; (80012cc <SVCCTL_App_Notification+0x318>)
 80011c6:	f00d f8ed 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 80011ca:	e05e      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 80011cc:	4840      	ldr	r0, [pc, #256]	; (80012d0 <SVCCTL_App_Notification+0x31c>)
 80011ce:	f00d f8e9 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 80011d2:	e05a      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 80011d4:	483f      	ldr	r0, [pc, #252]	; (80012d4 <SVCCTL_App_Notification+0x320>)
 80011d6:	f00d f8e5 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 80011da:	e056      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 80011dc:	483e      	ldr	r0, [pc, #248]	; (80012d8 <SVCCTL_App_Notification+0x324>)
 80011de:	f00d f8e1 	bl	800e3a4 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 80011e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 f865 	bl	80082b6 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 80011ec:	483b      	ldr	r0, [pc, #236]	; (80012dc <SVCCTL_App_Notification+0x328>)
 80011ee:	f00d f8d9 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 80011f2:	e04a      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011f4:	483a      	ldr	r0, [pc, #232]	; (80012e0 <SVCCTL_App_Notification+0x32c>)
 80011f6:	f00d f8d5 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 80011fa:	e046      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 80011fc:	4838      	ldr	r0, [pc, #224]	; (80012e0 <SVCCTL_App_Notification+0x32c>)
 80011fe:	f00d f8d1 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8001202:	e042      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 8001204:	4837      	ldr	r0, [pc, #220]	; (80012e4 <SVCCTL_App_Notification+0x330>)
 8001206:	f00d f8cd 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 800120a:	e03e      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8001210:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001214:	4619      	mov	r1, r3
 8001216:	4834      	ldr	r0, [pc, #208]	; (80012e8 <SVCCTL_App_Notification+0x334>)
 8001218:	f00d f850 	bl	800e2bc <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8001220:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001224:	4619      	mov	r1, r3
 8001226:	4831      	ldr	r0, [pc, #196]	; (80012ec <SVCCTL_App_Notification+0x338>)
 8001228:	f00d f848 	bl	800e2bc <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 800122e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001230:	2101      	movs	r1, #1
 8001232:	4618      	mov	r0, r3
 8001234:	f007 f889 	bl	800834a <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8001238:	482d      	ldr	r0, [pc, #180]	; (80012f0 <SVCCTL_App_Notification+0x33c>)
 800123a:	f00d f8b3 	bl	800e3a4 <puts>
      break;
 800123e:	e024      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	3302      	adds	r3, #2
 8001244:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	789b      	ldrb	r3, [r3, #2]
 800124a:	4619      	mov	r1, r3
 800124c:	4829      	ldr	r0, [pc, #164]	; (80012f4 <SVCCTL_App_Notification+0x340>)
 800124e:	f00d f835 	bl	800e2bc <iprintf>
            if (pairing_complete->Status == 0)
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <SVCCTL_App_Notification+0x2ae>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 800125a:	4827      	ldr	r0, [pc, #156]	; (80012f8 <SVCCTL_App_Notification+0x344>)
 800125c:	f00d f8a2 	bl	800e3a4 <puts>
           break;    
 8001260:	e013      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <SVCCTL_App_Notification+0x348>)
 8001264:	f00d f89e 	bl	800e3a4 <puts>
           break;    
 8001268:	e00f      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
          mutex = 1;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SVCCTL_App_Notification+0x34c>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
      break;
 8001270:	e00b      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8001272:	4824      	ldr	r0, [pc, #144]	; (8001304 <SVCCTL_App_Notification+0x350>)
 8001274:	f00d f896 	bl	800e3a4 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8001278:	e007      	b.n	800128a <SVCCTL_App_Notification+0x2d6>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <SVCCTL_App_Notification+0x2e4>)
 800127c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001280:	210a      	movs	r1, #10
 8001282:	4618      	mov	r0, r3
 8001284:	f002 f96c 	bl	8003560 <HW_TS_Start>
          break; /* RADIO_ACTIVITY_EVENT */
 8001288:	bf00      	nop
      break; /* EVT_VENDOR */
 800128a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3730      	adds	r7, #48	; 0x30
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001f8 	.word	0x200001f8
 800129c:	08010178 	.word	0x08010178
 80012a0:	200028e8 	.word	0x200028e8
 80012a4:	080101a0 	.word	0x080101a0
 80012a8:	080101cc 	.word	0x080101cc
 80012ac:	080101e8 	.word	0x080101e8
 80012b0:	0801020c 	.word	0x0801020c
 80012b4:	08010234 	.word	0x08010234
 80012b8:	08010248 	.word	0x08010248
 80012bc:	08010264 	.word	0x08010264
 80012c0:	0801027c 	.word	0x0801027c
 80012c4:	080102b0 	.word	0x080102b0
 80012c8:	080102dc 	.word	0x080102dc
 80012cc:	08010304 	.word	0x08010304
 80012d0:	08010324 	.word	0x08010324
 80012d4:	08010350 	.word	0x08010350
 80012d8:	08010380 	.word	0x08010380
 80012dc:	080103a0 	.word	0x080103a0
 80012e0:	080103bc 	.word	0x080103bc
 80012e4:	080103e0 	.word	0x080103e0
 80012e8:	0801040c 	.word	0x0801040c
 80012ec:	08010424 	.word	0x08010424
 80012f0:	08010438 	.word	0x08010438
 80012f4:	08010474 	.word	0x08010474
 80012f8:	080104cc 	.word	0x080104cc
 80012fc:	080104e0 	.word	0x080104e0
 8001300:	200028f0 	.word	0x200028f0
 8001304:	080104f4 	.word	0x080104f4

08001308 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  MtxHciId = osMutexNew( NULL ); //in Ble_TI_Init()
 800130e:	2000      	movs	r0, #0
 8001310:	f008 fd02 	bl	8009d18 <osMutexNew>
 8001314:	4602      	mov	r2, r0
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <Ble_Tl_Init+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]

  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <Ble_Tl_Init+0x30>)
 800131c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <Ble_Tl_Init+0x34>)
 8001320:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <Ble_Tl_Init+0x38>)
 8001328:	f007 fcf6 	bl	8008d18 <hci_init>

  return;
 800132c:	bf00      	nop
}
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200028f4 	.word	0x200028f4
 8001338:	20030028 	.word	0x20030028
 800133c:	080017ed 	.word	0x080017ed
 8001340:	080017b5 	.word	0x080017b5

08001344 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	b091      	sub	sp, #68	; 0x44
 8001348:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800134a:	2300      	movs	r3, #0
 800134c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800134e:	f007 fba2 	bl	8008a96 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8001352:	f000 f979 	bl	8001648 <BleGetBdAddress>
 8001356:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001358:	6a3a      	ldr	r2, [r7, #32]
 800135a:	2106      	movs	r1, #6
 800135c:	2000      	movs	r0, #0
 800135e:	f007 fa90 	bl	8008882 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	795a      	ldrb	r2, [r3, #5]
 8001366:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8001368:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	791a      	ldrb	r2, [r3, #4]
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8001370:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	78da      	ldrb	r2, [r3, #3]
 8001376:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8001378:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	789a      	ldrb	r2, [r3, #2]
 800137e:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8001380:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	785a      	ldrb	r2, [r3, #1]
 8001386:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8001388:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8001390:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001392:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001396:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001398:	f7ff fd5e 	bl	8000e58 <LL_FLASH_GetUDN>
 800139c:	4603      	mov	r3, r0
 800139e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	461a      	mov	r2, r3
 80013a6:	2106      	movs	r1, #6
 80013a8:	202e      	movs	r0, #46	; 0x2e
 80013aa:	f007 fa6a 	bl	8008882 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80013ae:	4a4d      	ldr	r2, [pc, #308]	; (80014e4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80013b0:	2110      	movs	r1, #16
 80013b2:	2018      	movs	r0, #24
 80013b4:	f007 fa65 	bl	8008882 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80013b8:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80013ba:	2110      	movs	r1, #16
 80013bc:	2008      	movs	r0, #8
 80013be:	f007 fa60 	bl	8008882 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80013c2:	2118      	movs	r1, #24
 80013c4:	2001      	movs	r0, #1
 80013c6:	f007 fac5 	bl	8008954 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80013ca:	f007 f815 	bl	80083f8 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80013da:	7ffb      	ldrb	r3, [r7, #31]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01e      	beq.n	800141e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "DRAMSAY";
 80013e0:	4b42      	ldr	r3, [pc, #264]	; (80014ec <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 80013e2:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 80013e4:	f107 0216 	add.w	r2, r7, #22
 80013e8:	7ff8      	ldrb	r0, [r7, #31]
 80013ea:	f107 0312 	add.w	r3, r7, #18
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4613      	mov	r3, r2
 80013f8:	2207      	movs	r2, #7
 80013fa:	2100      	movs	r1, #0
 80013fc:	f006 fe50 	bl	80080a0 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8001400:	8afc      	ldrh	r4, [r7, #22]
 8001402:	8abd      	ldrh	r5, [r7, #20]
 8001404:	69b8      	ldr	r0, [r7, #24]
 8001406:	f7fe febb 	bl	8000180 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b2da      	uxtb	r2, r3
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4613      	mov	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	4629      	mov	r1, r5
 8001418:	4620      	mov	r0, r4
 800141a:	f007 f9ab 	bl	8008774 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800141e:	8af8      	ldrh	r0, [r7, #22]
 8001420:	8a79      	ldrh	r1, [r7, #18]
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2302      	movs	r3, #2
 8001428:	2200      	movs	r2, #0
 800142a:	f007 f9a3 	bl	8008774 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800142e:	2202      	movs	r2, #2
 8001430:	2102      	movs	r1, #2
 8001432:	2000      	movs	r0, #0
 8001434:	f007 fbbb 	bl	8008bae <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800143a:	2203      	movs	r2, #3
 800143c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f006 fd3a 	bl	8007ebc <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800144a:	2201      	movs	r2, #1
 800144c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8001450:	2200      	movs	r2, #0
 8001452:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8001456:	2208      	movs	r2, #8
 8001458:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800145c:	2210      	movs	r2, #16
 800145e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8001462:	2200      	movs	r2, #0
 8001464:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8001468:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800146a:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800146e:	2200      	movs	r2, #0
 8001470:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001478:	e00b      	b.n	8001492 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800147a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8001480:	4413      	add	r3, r2
 8001482:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001486:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8001488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800148c:	3301      	adds	r3, #1
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001496:	2b0f      	cmp	r3, #15
 8001498:	d9ef      	bls.n	800147a <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800149c:	789d      	ldrb	r5, [r3, #2]
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80014a0:	785e      	ldrb	r6, [r3, #1]
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80014a4:	7d5b      	ldrb	r3, [r3, #21]
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80014a8:	7d92      	ldrb	r2, [r2, #22]
 80014aa:	4911      	ldr	r1, [pc, #68]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80014ac:	7d09      	ldrb	r1, [r1, #20]
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80014b0:	6980      	ldr	r0, [r0, #24]
 80014b2:	2400      	movs	r4, #0
 80014b4:	9404      	str	r4, [sp, #16]
 80014b6:	9003      	str	r0, [sp, #12]
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2300      	movs	r3, #0
 80014c0:	2201      	movs	r2, #1
 80014c2:	4631      	mov	r1, r6
 80014c4:	4628      	mov	r0, r5
 80014c6:	f006 fd43 	bl	8007f50 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80014cc:	789b      	ldrb	r3, [r3, #2]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 80014d2:	f006 fecc 	bl	800826e <aci_gap_configure_whitelist>
   }
}
 80014d6:	bf00      	nop
 80014d8:	372c      	adds	r7, #44	; 0x2c
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000004 	.word	0x20000004
 80014e4:	08010770 	.word	0x08010770
 80014e8:	08010780 	.word	0x08010780
 80014ec:	0801051c 	.word	0x0801051c
 80014f0:	200001f8 	.word	0x200001f8
 80014f4:	0001b207 	.word	0x0001b207

080014f8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af08      	add	r7, sp, #32
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8001502:	2342      	movs	r3, #66	; 0x42
 8001504:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800150c:	4b40      	ldr	r3, [pc, #256]	; (8001610 <Adv_Request+0x118>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8001512:	4b40      	ldr	r3, [pc, #256]	; (8001614 <Adv_Request+0x11c>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	81bb      	strh	r3, [r7, #12]
 8001518:	e005      	b.n	8001526 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800151a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800151e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8001520:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001524:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <Adv_Request+0x120>)
 8001528:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800152c:	4618      	mov	r0, r3
 800152e:	f001 ff8d 	bl	800344c <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <Adv_Request+0x120>)
 8001534:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001538:	4619      	mov	r1, r3
 800153a:	4838      	ldr	r0, [pc, #224]	; (800161c <Adv_Request+0x124>)
 800153c:	f00c febe 	bl	800e2bc <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d119      	bne.n	800157a <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <Adv_Request+0x120>)
 8001548:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800154c:	2b01      	cmp	r3, #1
 800154e:	d004      	beq.n	800155a <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <Adv_Request+0x120>)
 8001552:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001556:	2b02      	cmp	r3, #2
 8001558:	d10f      	bne.n	800157a <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800155a:	f006 fbad 	bl	8007cb8 <aci_gap_set_non_discoverable>
 800155e:	4603      	mov	r3, r0
 8001560:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8001568:	482d      	ldr	r0, [pc, #180]	; (8001620 <Adv_Request+0x128>)
 800156a:	f00c ff1b 	bl	800e3a4 <puts>
 800156e:	e004      	b.n	800157a <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8001570:	7afb      	ldrb	r3, [r7, #11]
 8001572:	4619      	mov	r1, r3
 8001574:	482b      	ldr	r0, [pc, #172]	; (8001624 <Adv_Request+0x12c>)
 8001576:	f00c fea1 	bl	800e2bc <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <Adv_Request+0x120>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <Adv_Request+0x120>)
 8001584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001588:	89b8      	ldrh	r0, [r7, #12]
 800158a:	89f9      	ldrh	r1, [r7, #14]
 800158c:	2200      	movs	r2, #0
 800158e:	9206      	str	r2, [sp, #24]
 8001590:	2200      	movs	r2, #0
 8001592:	9205      	str	r2, [sp, #20]
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <Adv_Request+0x130>)
 8001596:	9204      	str	r2, [sp, #16]
 8001598:	9303      	str	r3, [sp, #12]
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <Adv_Request+0x134>)
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2308      	movs	r3, #8
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	2300      	movs	r3, #0
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	4602      	mov	r2, r0
 80015aa:	2000      	movs	r0, #0
 80015ac:	f006 fba8 	bl	8007d00 <aci_gap_set_discoverable>
 80015b0:	4603      	mov	r3, r0
 80015b2:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80015b4:	491e      	ldr	r1, [pc, #120]	; (8001630 <Adv_Request+0x138>)
 80015b6:	200e      	movs	r0, #14
 80015b8:	f006 fdfd 	bl	80081b6 <aci_gap_update_adv_data>
 80015bc:	4603      	mov	r3, r0
 80015be:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d111      	bne.n	80015ea <Adv_Request+0xf2>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10a      	bne.n	80015e2 <Adv_Request+0xea>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 80015cc:	4819      	ldr	r0, [pc, #100]	; (8001634 <Adv_Request+0x13c>)
 80015ce:	f00c fee9 	bl	800e3a4 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <Adv_Request+0x120>)
 80015d4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80015d8:	4917      	ldr	r1, [pc, #92]	; (8001638 <Adv_Request+0x140>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 ffc0 	bl	8003560 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80015e0:	e012      	b.n	8001608 <Adv_Request+0x110>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 80015e2:	4816      	ldr	r0, [pc, #88]	; (800163c <Adv_Request+0x144>)
 80015e4:	f00c fede 	bl	800e3a4 <puts>
  return;
 80015e8:	e00e      	b.n	8001608 <Adv_Request+0x110>
      if (New_Status == APP_BLE_FAST_ADV)
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <Adv_Request+0x104>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4812      	ldr	r0, [pc, #72]	; (8001640 <Adv_Request+0x148>)
 80015f6:	f00c fe61 	bl	800e2bc <iprintf>
  return;
 80015fa:	e005      	b.n	8001608 <Adv_Request+0x110>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	4619      	mov	r1, r3
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <Adv_Request+0x14c>)
 8001602:	f00c fe5b 	bl	800e2bc <iprintf>
  return;
 8001606:	bf00      	nop
}
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000028c 	.word	0x2000028c
 8001614:	2000028e 	.word	0x2000028e
 8001618:	200001f8 	.word	0x200001f8
 800161c:	08010524 	.word	0x08010524
 8001620:	08010540 	.word	0x08010540
 8001624:	08010564 	.word	0x08010564
 8001628:	20000221 	.word	0x20000221
 800162c:	08010790 	.word	0x08010790
 8001630:	20000004 	.word	0x20000004
 8001634:	0801058c 	.word	0x0801058c
 8001638:	0001e046 	.word	0x0001e046
 800163c:	080105b4 	.word	0x080105b4
 8001640:	080105e0 	.word	0x080105e0
 8001644:	08010610 	.word	0x08010610

08001648 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800164e:	f7ff fc03 	bl	8000e58 <LL_FLASH_GetUDN>
 8001652:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165a:	d023      	beq.n	80016a4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800165c:	f7ff fc14 	bl	8000e88 <LL_FLASH_GetSTCompanyID>
 8001660:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8001662:	f7ff fc05 	bl	8000e70 <LL_FLASH_GetDeviceID>
 8001666:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <BleGetBdAddress+0x80>)
 800166e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <BleGetBdAddress+0x80>)
 8001678:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <BleGetBdAddress+0x80>)
 8001682:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <BleGetBdAddress+0x80>)
 800168a:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <BleGetBdAddress+0x80>)
 8001692:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <BleGetBdAddress+0x80>)
 800169c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <BleGetBdAddress+0x80>)
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e00b      	b.n	80016bc <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f008 f84d 	bl	8009744 <OTP_Read>
 80016aa:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e001      	b.n	80016bc <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <BleGetBdAddress+0x84>)
 80016ba:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 80016bc:	697b      	ldr	r3, [r7, #20]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200003bc 	.word	0x200003bc
 80016cc:	08010768 	.word	0x08010768

080016d0 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
 //BSP_LED_Off(LED_GREEN);
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <Adv_Cancel+0x48>)
 80016d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d017      	beq.n	8001710 <Adv_Cancel+0x40>

  {

    tBleStatus result = 0x00;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80016e4:	f006 fae8 	bl	8007cb8 <aci_gap_set_non_discoverable>
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <Adv_Cancel+0x48>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    if (result == BLE_STATUS_SUCCESS)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <Adv_Cancel+0x4c>)
 80016fc:	f00c fdde 	bl	800e2bc <iprintf>
 8001700:	4807      	ldr	r0, [pc, #28]	; (8001720 <Adv_Cancel+0x50>)
 8001702:	f00c fddb 	bl	800e2bc <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8001706:	e003      	b.n	8001710 <Adv_Cancel+0x40>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <Adv_Cancel+0x54>)
 800170a:	f00c fdd7 	bl	800e2bc <iprintf>
  return;
 800170e:	bf00      	nop
 8001710:	bf00      	nop
}
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200001f8 	.word	0x200001f8
 800171c:	08010644 	.word	0x08010644
 8001720:	0801064c 	.word	0x0801064c
 8001724:	08010668 	.word	0x08010668

08001728 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */

//UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
osThreadFlagsSet(AdvCancelId, 1);
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <Adv_Cancel_Req+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f008 f9fa 	bl	8009b2c <osThreadFlagsSet>

/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8001738:	bf00      	nop
}
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200028f8 	.word	0x200028f8

08001740 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  //BSP_LED_Off(LED_GREEN);
/* USER CODE END Switch_OFF_GPIO */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <hci_notify_asynch_evt>:
 *
 *************************************************************/


void hci_notify_asynch_evt(void* pdata)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  //UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
  osThreadFlagsSet(AsynchBleId, 1);
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <hci_notify_asynch_evt+0x1c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	4618      	mov	r0, r3
 8001760:	f008 f9e4 	bl	8009b2c <osThreadFlagsSet>
  return;
 8001764:	bf00      	nop
}
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200028ec 	.word	0x200028ec

08001770 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  //UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  osSemaphoreRelease(SemHciId);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <hci_cmd_resp_release+0x1c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f008 fd17 	bl	800a1b0 <osSemaphoreRelease>
  return;
 8001782:	bf00      	nop
}
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200028e4 	.word	0x200028e4

08001790 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  //UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  osSemaphoreAcquire(SemHciId, osWaitForever);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <hci_cmd_resp_wait+0x20>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	4618      	mov	r0, r3
 80017a2:	f008 fc9f 	bl	800a0e4 <osSemaphoreAcquire>
  return;
 80017a6:	bf00      	nop
}
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200028e4 	.word	0x200028e4

080017b4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	3308      	adds	r3, #8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 fa24 	bl	8007c14 <SVCCTL_UserEvtRx>
 80017cc:	4603      	mov	r3, r0
 80017ce:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80017dc:	e002      	b.n	80017e4 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <BLE_StatusNot+0x16>
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d008      	beq.n	8001812 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 8001800:	e00d      	b.n	800181e <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <BLE_StatusNot+0x3c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f04f 31ff 	mov.w	r1, #4294967295
 800180a:	4618      	mov	r0, r3
 800180c:	f008 fb1e 	bl	8009e4c <osMutexAcquire>
      break;
 8001810:	e005      	b.n	800181e <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <BLE_StatusNot+0x3c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f008 fb76 	bl	8009f08 <osMutexRelease>
      break;
 800181c:	bf00      	nop
  }
  return;
 800181e:	bf00      	nop
}
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200028f4 	.word	0x200028f4

0800182c <AsynchBle>:
  hci_resume_flow();
  return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void AsynchBle(void *argument) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	UNUSED(argument);

	for(;;) {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	2100      	movs	r1, #0
 800183a:	2001      	movs	r0, #1
 800183c:	f008 f9d8 	bl	8009bf0 <osThreadFlagsWait>
		hci_user_evt_proc();
 8001840:	f007 fa86 	bl	8008d50 <hci_user_evt_proc>
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001844:	e7f6      	b.n	8001834 <AsynchBle+0x8>

08001846 <AdvCancel>:
	}

}

static void AdvCancel(void *argument) {
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	UNUSED(argument);

	for(;;) {
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800184e:	f04f 32ff 	mov.w	r2, #4294967295
 8001852:	2100      	movs	r1, #0
 8001854:	2001      	movs	r0, #1
 8001856:	f008 f9cb 	bl	8009bf0 <osThreadFlagsWait>
		Adv_Cancel();
 800185a:	f7ff ff39 	bl	80016d0 <Adv_Cancel>
		osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800185e:	e7f6      	b.n	800184e <AdvCancel+0x8>

08001860 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d008      	beq.n	8001882 <P2PS_STM_App_Notification+0x22>
 8001870:	2b03      	cmp	r3, #3
 8001872:	d00a      	beq.n	800188a <P2PS_STM_App_Notification+0x2a>
 8001874:	2b00      	cmp	r3, #0
 8001876:	d000      	beq.n	800187a <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8001878:	e08d      	b.n	8001996 <P2PS_STM_App_Notification+0x136>
      P2P_Server_App_Context.Notification_Status = 1;
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e089      	b.n	8001996 <P2PS_STM_App_Notification+0x136>
      P2P_Server_App_Context.Notification_Status = 0;
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e085      	b.n	8001996 <P2PS_STM_App_Notification+0x136>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d111      	bne.n	80018b8 <P2PS_STM_App_Notification+0x58>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d102      	bne.n	80018a6 <P2PS_STM_App_Notification+0x46>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	3301      	adds	r3, #1
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <P2PS_STM_App_Notification+0x58>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d168      	bne.n	8001994 <P2PS_STM_App_Notification+0x134>
    	memcpy(&P2P_Server_App_Context.OTATimestamp, &(pNotification->DataTransfered.pPayload[2]), 8);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	3302      	adds	r3, #2
 80018c8:	2208      	movs	r2, #8
 80018ca:	4619      	mov	r1, r3
 80018cc:	4835      	ldr	r0, [pc, #212]	; (80019a4 <P2PS_STM_App_Notification+0x144>)
 80018ce:	f00c f885 	bl	800d9dc <memcpy>
    	P2P_Server_App_Context.OTA12HrFormat = pNotification->DataTransfered.pPayload[10];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	7a9a      	ldrb	r2, [r3, #10]
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 80018da:	741a      	strb	r2, [r3, #16]
    	P2P_Server_App_Context.OTADaylightSavings = pNotification->DataTransfered.pPayload[11];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	7ada      	ldrb	r2, [r3, #11]
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 80018e4:	745a      	strb	r2, [r3, #17]
    	RTC_TimeTypeDef sTime = {0};
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
    	RTC_DateTypeDef sDate = {0};
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
    	memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 80018fa:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	3208      	adds	r2, #8
 8001902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001906:	e883 0003 	stmia.w	r3, {r0, r1}
    	sTime.Hours      = timestampvals[3];
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	753b      	strb	r3, [r7, #20]
    	sTime.Minutes    = timestampvals[2];
 800190e:	7abb      	ldrb	r3, [r7, #10]
 8001910:	757b      	strb	r3, [r7, #21]
    	sTime.Seconds    = timestampvals[1];
 8001912:	7a7b      	ldrb	r3, [r7, #9]
 8001914:	75bb      	strb	r3, [r7, #22]
    	sTime.SubSeconds = 0x0;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
    	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
    	if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 8001920:	7c5b      	ldrb	r3, [r3, #17]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <P2PS_STM_App_Notification+0xcc>
 8001926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800192a:	623b      	str	r3, [r7, #32]
    	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2201      	movs	r2, #1
 8001936:	4619      	mov	r1, r3
 8001938:	481b      	ldr	r0, [pc, #108]	; (80019a8 <P2PS_STM_App_Notification+0x148>)
 800193a:	f005 f9f8 	bl	8006d2e <HAL_RTC_SetTime>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <P2PS_STM_App_Notification+0xe8>
    	    Error_Handler();
 8001944:	f002 fa78 	bl	8003e38 <Error_Handler>
    	sDate.WeekDay = timestampvals[7];
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	743b      	strb	r3, [r7, #16]
    	sDate.Month   = timestampvals[6];
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	747b      	strb	r3, [r7, #17]
    	sDate.Date    = timestampvals[5];
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	74bb      	strb	r3, [r7, #18]
    	sDate.Year    = timestampvals[4];
 8001954:	7b3b      	ldrb	r3, [r7, #12]
 8001956:	74fb      	strb	r3, [r7, #19]
    	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2201      	movs	r2, #1
 800195e:	4619      	mov	r1, r3
 8001960:	4811      	ldr	r0, [pc, #68]	; (80019a8 <P2PS_STM_App_Notification+0x148>)
 8001962:	f005 faa8 	bl	8006eb6 <HAL_RTC_SetDate>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <P2PS_STM_App_Notification+0x110>
    	    Error_Handler();
 800196c:	f002 fa64 	bl	8003e38 <Error_Handler>
    	if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	3301      	adds	r3, #1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <P2PS_STM_App_Notification+0x122>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 800197e:	2201      	movs	r2, #1
 8001980:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	3301      	adds	r3, #1
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <P2PS_STM_App_Notification+0x134>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <P2PS_STM_App_Notification+0x140>)
 8001990:	2200      	movs	r2, #0
 8001992:	709a      	strb	r2, [r3, #2]
      break;
 8001994:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8001996:	bf00      	nop
}
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000290 	.word	0x20000290
 80019a4:	20000298 	.word	0x20000298
 80019a8:	20002a8c 	.word	0x20002a8c

080019ac <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <P2PS_APP_Notification+0x1c>
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d000      	beq.n	80019c2 <P2PS_APP_Notification+0x16>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80019c0:	e003      	b.n	80019ca <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 80019c2:	f000 f813 	bl	80019ec <P2PS_APP_LED_BUTTON_context_Init>
    break;
 80019c6:	e000      	b.n	80019ca <P2PS_APP_Notification+0x1e>
    break;
 80019c8:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80019ca:	bf00      	nop
}
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <P2PS_APP_Init+0x14>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80019de:	f000 f805 	bl	80019ec <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80019e2:	bf00      	nop
}
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000290 	.word	0x20000290

080019ec <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80019ec:	b490      	push	{r4, r7}
 80019ee:	af00      	add	r7, sp, #0
  
  //BSP_LED_Off(LED_BLUE);
  
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.OTATimestamp=0x0000000000000000;
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	f04f 0400 	mov.w	r4, #0
 8001a06:	e9c2 3402 	strd	r3, r4, [r2, #8]
  P2P_Server_App_Context.OTA12HrFormat=0x00;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	741a      	strb	r2, [r3, #16]
  P2P_Server_App_Context.OTADaylightSavings=0x00;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	745a      	strb	r2, [r3, #17]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <P2PS_APP_LED_BUTTON_context_Init+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	711a      	strb	r2, [r3, #4]

}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc90      	pop	{r4, r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000290 	.word	0x20000290

08001a30 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d000      	beq.n	8001a4e <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8001a4c:	e04a      	b.n	8001ae4 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	3302      	adds	r3, #2
 8001a52:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f640 4301 	movw	r3, #3073	; 0xc01
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d000      	beq.n	8001a66 <PeerToPeer_Event_Handler+0x36>
          break;
 8001a64:	e03d      	b.n	8001ae2 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3302      	adds	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	885b      	ldrh	r3, [r3, #2]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <PeerToPeer_Event_Handler+0xc0>)
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d118      	bne.n	8001ab0 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	7a1b      	ldrb	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fee1 	bl	8001860 <P2PS_STM_App_Notification>
        break;
 8001a9e:	e01f      	b.n	8001ae0 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fed9 	bl	8001860 <P2PS_STM_App_Notification>
        break;
 8001aae:	e017      	b.n	8001ae0 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	885b      	ldrh	r3, [r3, #2]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <PeerToPeer_Event_Handler+0xc0>)
 8001aba:	885b      	ldrh	r3, [r3, #2]
 8001abc:	3301      	adds	r3, #1
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d10e      	bne.n	8001ae0 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	88db      	ldrh	r3, [r3, #6]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fec0 	bl	8001860 <P2PS_STM_App_Notification>
        break;
 8001ae0:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8001ae2:	bf00      	nop
  }

  return(return_value);
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200002a8 	.word	0x200002a8

08001af4 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8001afa:	484a      	ldr	r0, [pc, #296]	; (8001c24 <P2PS_STM_Init+0x130>)
 8001afc:	f006 f870 	bl	8007be0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8001b00:	238f      	movs	r3, #143	; 0x8f
 8001b02:	703b      	strb	r3, [r7, #0]
 8001b04:	23e5      	movs	r3, #229	; 0xe5
 8001b06:	707b      	strb	r3, [r7, #1]
 8001b08:	23b3      	movs	r3, #179	; 0xb3
 8001b0a:	70bb      	strb	r3, [r7, #2]
 8001b0c:	23d5      	movs	r3, #213	; 0xd5
 8001b0e:	70fb      	strb	r3, [r7, #3]
 8001b10:	232e      	movs	r3, #46	; 0x2e
 8001b12:	713b      	strb	r3, [r7, #4]
 8001b14:	237f      	movs	r3, #127	; 0x7f
 8001b16:	717b      	strb	r3, [r7, #5]
 8001b18:	234a      	movs	r3, #74	; 0x4a
 8001b1a:	71bb      	strb	r3, [r7, #6]
 8001b1c:	2398      	movs	r3, #152	; 0x98
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	232a      	movs	r3, #42	; 0x2a
 8001b22:	723b      	strb	r3, [r7, #8]
 8001b24:	2348      	movs	r3, #72	; 0x48
 8001b26:	727b      	strb	r3, [r7, #9]
 8001b28:	237a      	movs	r3, #122	; 0x7a
 8001b2a:	72bb      	strb	r3, [r7, #10]
 8001b2c:	23cc      	movs	r3, #204	; 0xcc
 8001b2e:	72fb      	strb	r3, [r7, #11]
 8001b30:	2340      	movs	r3, #64	; 0x40
 8001b32:	733b      	strb	r3, [r7, #12]
 8001b34:	23fe      	movs	r3, #254	; 0xfe
 8001b36:	737b      	strb	r3, [r7, #13]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73bb      	strb	r3, [r7, #14]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8001b40:	4639      	mov	r1, r7
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <P2PS_STM_Init+0x134>)
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2308      	movs	r3, #8
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f006 fc79 	bl	8008442 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8001b50:	2319      	movs	r3, #25
 8001b52:	703b      	strb	r3, [r7, #0]
 8001b54:	23ed      	movs	r3, #237	; 0xed
 8001b56:	707b      	strb	r3, [r7, #1]
 8001b58:	2382      	movs	r3, #130	; 0x82
 8001b5a:	70bb      	strb	r3, [r7, #2]
 8001b5c:	23ae      	movs	r3, #174	; 0xae
 8001b5e:	70fb      	strb	r3, [r7, #3]
 8001b60:	23ed      	movs	r3, #237	; 0xed
 8001b62:	713b      	strb	r3, [r7, #4]
 8001b64:	2321      	movs	r3, #33	; 0x21
 8001b66:	717b      	strb	r3, [r7, #5]
 8001b68:	234c      	movs	r3, #76	; 0x4c
 8001b6a:	71bb      	strb	r3, [r7, #6]
 8001b6c:	239d      	movs	r3, #157	; 0x9d
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	2341      	movs	r3, #65	; 0x41
 8001b72:	723b      	strb	r3, [r7, #8]
 8001b74:	2345      	movs	r3, #69	; 0x45
 8001b76:	727b      	strb	r3, [r7, #9]
 8001b78:	2322      	movs	r3, #34	; 0x22
 8001b7a:	72bb      	strb	r3, [r7, #10]
 8001b7c:	238e      	movs	r3, #142	; 0x8e
 8001b7e:	72fb      	strb	r3, [r7, #11]
 8001b80:	2341      	movs	r3, #65	; 0x41
 8001b82:	733b      	strb	r3, [r7, #12]
 8001b84:	23fe      	movs	r3, #254	; 0xfe
 8001b86:	737b      	strb	r3, [r7, #13]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73bb      	strb	r3, [r7, #14]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <P2PS_STM_Init+0x134>)
 8001b92:	8818      	ldrh	r0, [r3, #0]
 8001b94:	463a      	mov	r2, r7
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <P2PS_STM_Init+0x138>)
 8001b98:	9305      	str	r3, [sp, #20]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9304      	str	r3, [sp, #16]
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2306      	movs	r3, #6
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2302      	movs	r3, #2
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	f006 fcf5 	bl	80085a0 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8001bb6:	2319      	movs	r3, #25
 8001bb8:	703b      	strb	r3, [r7, #0]
 8001bba:	23ed      	movs	r3, #237	; 0xed
 8001bbc:	707b      	strb	r3, [r7, #1]
 8001bbe:	2382      	movs	r3, #130	; 0x82
 8001bc0:	70bb      	strb	r3, [r7, #2]
 8001bc2:	23ae      	movs	r3, #174	; 0xae
 8001bc4:	70fb      	strb	r3, [r7, #3]
 8001bc6:	23ed      	movs	r3, #237	; 0xed
 8001bc8:	713b      	strb	r3, [r7, #4]
 8001bca:	2321      	movs	r3, #33	; 0x21
 8001bcc:	717b      	strb	r3, [r7, #5]
 8001bce:	234c      	movs	r3, #76	; 0x4c
 8001bd0:	71bb      	strb	r3, [r7, #6]
 8001bd2:	239d      	movs	r3, #157	; 0x9d
 8001bd4:	71fb      	strb	r3, [r7, #7]
 8001bd6:	2341      	movs	r3, #65	; 0x41
 8001bd8:	723b      	strb	r3, [r7, #8]
 8001bda:	2345      	movs	r3, #69	; 0x45
 8001bdc:	727b      	strb	r3, [r7, #9]
 8001bde:	2322      	movs	r3, #34	; 0x22
 8001be0:	72bb      	strb	r3, [r7, #10]
 8001be2:	238e      	movs	r3, #142	; 0x8e
 8001be4:	72fb      	strb	r3, [r7, #11]
 8001be6:	2342      	movs	r3, #66	; 0x42
 8001be8:	733b      	strb	r3, [r7, #12]
 8001bea:	23fe      	movs	r3, #254	; 0xfe
 8001bec:	737b      	strb	r3, [r7, #13]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73bb      	strb	r3, [r7, #14]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <P2PS_STM_Init+0x134>)
 8001bf8:	8818      	ldrh	r0, [r3, #0]
 8001bfa:	463a      	mov	r2, r7
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <P2PS_STM_Init+0x13c>)
 8001bfe:	9305      	str	r3, [sp, #20]
 8001c00:	2301      	movs	r3, #1
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	230a      	movs	r3, #10
 8001c06:	9303      	str	r3, [sp, #12]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2310      	movs	r3, #16
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2302      	movs	r3, #2
 8001c16:	2102      	movs	r1, #2
 8001c18:	f006 fcc2 	bl	80085a0 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8001c1c:	bf00      	nop
}
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	08001a31 	.word	0x08001a31
 8001c28:	200002a8 	.word	0x200002a8
 8001c2c:	200002aa 	.word	0x200002aa
 8001c30:	200002ac 	.word	0x200002ac

08001c34 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <LL_PWR_EnableBootC2+0x1c>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <LL_PWR_EnableBootC2+0x1c>)
 8001c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	58000400 	.word	0x58000400

08001c54 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001c5e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001c62:	4905      	ldr	r1, [pc, #20]	; (8001c78 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58000800 	.word	0x58000800

08001c7c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001c86:	6a1a      	ldr	r2, [r3, #32]
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	620b      	str	r3, [r1, #32]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	58000800 	.word	0x58000800

08001ca0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cde:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	605a      	str	r2, [r3, #4]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	401a      	ands	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	609a      	str	r2, [r3, #8]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4013      	ands	r3, r2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d101      	bne.n	8001e0e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d101      	bne.n	8001e38 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <HW_IPCC_Rx_Handler+0x6c>)
 8001e50:	f7ff ffe4 	bl	8001e1c <LL_C2_IPCC_IsActiveFlag_CHx>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HW_IPCC_Rx_Handler+0x26>
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HW_IPCC_Rx_Handler+0x6c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001e68:	f000 f8ea 	bl	8002040 <HW_IPCC_SYS_EvtHandler>
 8001e6c:	e01f      	b.n	8001eae <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4810      	ldr	r0, [pc, #64]	; (8001eb4 <HW_IPCC_Rx_Handler+0x6c>)
 8001e72:	f7ff ffd3 	bl	8001e1c <LL_C2_IPCC_IsActiveFlag_CHx>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HW_IPCC_Rx_Handler+0x46>
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HW_IPCC_Rx_Handler+0x6c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001e88:	f000 f89e 	bl	8001fc8 <HW_IPCC_BLE_EvtHandler>
 8001e8c:	e00f      	b.n	8001eae <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001e8e:	2108      	movs	r1, #8
 8001e90:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <HW_IPCC_Rx_Handler+0x6c>)
 8001e92:	f7ff ffc3 	bl	8001e1c <LL_C2_IPCC_IsActiveFlag_CHx>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <HW_IPCC_Rx_Handler+0x68>
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HW_IPCC_Rx_Handler+0x6c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001eaa:	f000 f915 	bl	80020d8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
}
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	58000c00 	.word	0x58000c00

08001eb8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	4822      	ldr	r0, [pc, #136]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001ec0:	f7ff ff97 	bl	8001df2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HW_IPCC_Tx_Handler+0x26>
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001ed8:	f000 f8a6 	bl	8002028 <HW_IPCC_SYS_CmdEvtHandler>
 8001edc:	e031      	b.n	8001f42 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001ede:	2102      	movs	r1, #2
 8001ee0:	4819      	ldr	r0, [pc, #100]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001ee2:	f7ff ff86 	bl	8001df2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HW_IPCC_Tx_Handler+0x48>
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001efa:	f000 f895 	bl	8002028 <HW_IPCC_SYS_CmdEvtHandler>
 8001efe:	e020      	b.n	8001f42 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001f00:	2108      	movs	r1, #8
 8001f02:	4811      	ldr	r0, [pc, #68]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001f04:	f7ff ff75 	bl	8001df2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HW_IPCC_Tx_Handler+0x6a>
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001f1c:	f000 f8be 	bl	800209c <HW_IPCC_MM_FreeBufHandler>
 8001f20:	e00f      	b.n	8001f42 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001f22:	2120      	movs	r1, #32
 8001f24:	4808      	ldr	r0, [pc, #32]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001f26:	f7ff ff64 	bl	8001df2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HW_IPCC_Tx_Handler+0x8c>
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HW_IPCC_Tx_Handler+0x90>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001f3e:	f000 f84f 	bl	8001fe0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
}
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	58000c00 	.word	0x58000c00

08001f4c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001f50:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f54:	f7ff febd 	bl	8001cd2 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001f58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f5c:	f7ff fe7a 	bl	8001c54 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001f60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f64:	f7ff fe8a 	bl	8001c7c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001f68:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001f6a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001f6c:	f7ff fe62 	bl	8001c34 <LL_PWR_EnableBootC2>

  return;
 8001f70:	bf00      	nop
}
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001f78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f7c:	f7ff fe90 	bl	8001ca0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <HW_IPCC_Init+0x28>)
 8001f82:	f7ff fed2 	bl	8001d2a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HW_IPCC_Init+0x28>)
 8001f88:	f7ff febf 	bl	8001d0a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f8c:	202c      	movs	r0, #44	; 0x2c
 8001f8e:	f002 fd0d 	bl	80049ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f92:	202d      	movs	r0, #45	; 0x2d
 8001f94:	f002 fd0a 	bl	80049ac <HAL_NVIC_EnableIRQ>

  return;
 8001f98:	bf00      	nop
}
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	58000c00 	.word	0x58000c00

08001fa0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <HW_IPCC_BLE_Init+0x10>)
 8001fa8:	f7ff fef4 	bl	8001d94 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001fac:	bf00      	nop
}
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	58000c00 	.word	0x58000c00

08001fb4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <HW_IPCC_BLE_SendCmd+0x10>)
 8001fbc:	f7ff ff0a 	bl	8001dd4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001fc0:	bf00      	nop
}
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	58000c00 	.word	0x58000c00

08001fc8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001fcc:	f007 f9fe 	bl	80093cc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4802      	ldr	r0, [pc, #8]	; (8001fdc <HW_IPCC_BLE_EvtHandler+0x14>)
 8001fd4:	f7ff fef0 	bl	8001db8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001fd8:	bf00      	nop
}
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58000c00 	.word	0x58000c00

08001fe0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001fe8:	f7ff fec2 	bl	8001d70 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001fec:	f007 fa1e 	bl	800942c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001ff0:	bf00      	nop
}
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	58000c00 	.word	0x58000c00

08001ff8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	4802      	ldr	r0, [pc, #8]	; (8002008 <HW_IPCC_SYS_Init+0x10>)
 8002000:	f7ff fec8 	bl	8001d94 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002004:	bf00      	nop
}
 8002006:	bd80      	pop	{r7, pc}
 8002008:	58000c00 	.word	0x58000c00

0800200c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002010:	2102      	movs	r1, #2
 8002012:	4804      	ldr	r0, [pc, #16]	; (8002024 <HW_IPCC_SYS_SendCmd+0x18>)
 8002014:	f7ff fede 	bl	8001dd4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002018:	2102      	movs	r1, #2
 800201a:	4802      	ldr	r0, [pc, #8]	; (8002024 <HW_IPCC_SYS_SendCmd+0x18>)
 800201c:	f7ff fe95 	bl	8001d4a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8002020:	bf00      	nop
}
 8002022:	bd80      	pop	{r7, pc}
 8002024:	58000c00 	.word	0x58000c00

08002028 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800202c:	2102      	movs	r1, #2
 800202e:	4803      	ldr	r0, [pc, #12]	; (800203c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8002030:	f7ff fe9e 	bl	8001d70 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8002034:	f007 fa4a 	bl	80094cc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8002038:	bf00      	nop
}
 800203a:	bd80      	pop	{r7, pc}
 800203c:	58000c00 	.word	0x58000c00

08002040 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8002044:	f007 fa58 	bl	80094f8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002048:	2102      	movs	r1, #2
 800204a:	4802      	ldr	r0, [pc, #8]	; (8002054 <HW_IPCC_SYS_EvtHandler+0x14>)
 800204c:	f7ff feb4 	bl	8001db8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002050:	bf00      	nop
}
 8002052:	bd80      	pop	{r7, pc}
 8002054:	58000c00 	.word	0x58000c00

08002058 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8002060:	2108      	movs	r1, #8
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002064:	f7ff fec5 	bl	8001df2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002074:	2108      	movs	r1, #8
 8002076:	4807      	ldr	r0, [pc, #28]	; (8002094 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002078:	f7ff fe67 	bl	8001d4a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800207c:	e006      	b.n	800208c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002082:	2108      	movs	r1, #8
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002086:	f7ff fea5 	bl	8001dd4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800208a:	bf00      	nop
}
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	58000c00 	.word	0x58000c00
 8002098:	200003c4 	.word	0x200003c4

0800209c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80020a0:	2108      	movs	r1, #8
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80020a4:	f7ff fe64 	bl	8001d70 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80020ae:	2108      	movs	r1, #8
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80020b2:	f7ff fe8f 	bl	8001dd4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80020b6:	bf00      	nop
}
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	58000c00 	.word	0x58000c00
 80020c0:	200003c4 	.word	0x200003c4

080020c4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80020c8:	2108      	movs	r1, #8
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <HW_IPCC_TRACES_Init+0x10>)
 80020cc:	f7ff fe62 	bl	8001d94 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80020d0:	bf00      	nop
}
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	58000c00 	.word	0x58000c00

080020d8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80020dc:	f007 fab4 	bl	8009648 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80020e0:	2108      	movs	r1, #8
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <HW_IPCC_TRACES_EvtHandler+0x14>)
 80020e4:	f7ff fe68 	bl	8001db8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80020e8:	bf00      	nop
}
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58000c00 	.word	0x58000c00

080020f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80020f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f4:	3304      	adds	r3, #4

080020f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80020fa:	d3f9      	bcc.n	80020f0 <CopyDataInit>
  bx lr
 80020fc:	4770      	bx	lr

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80020fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002100:	3004      	adds	r0, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002102:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>
  bx lr
 8002106:	4770      	bx	lr

08002108 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800210a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800210c:	f002 fa3a 	bl	8004584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <LoopForever+0x8>)
 8002112:	490c      	ldr	r1, [pc, #48]	; (8002144 <LoopForever+0xc>)
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <LoopForever+0x10>)
 8002116:	2300      	movs	r3, #0
 8002118:	f7ff ffed 	bl	80020f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800211c:	480b      	ldr	r0, [pc, #44]	; (800214c <LoopForever+0x14>)
 800211e:	490c      	ldr	r1, [pc, #48]	; (8002150 <LoopForever+0x18>)
 8002120:	2300      	movs	r3, #0
 8002122:	f7ff ffee 	bl	8002102 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002126:	480b      	ldr	r0, [pc, #44]	; (8002154 <LoopForever+0x1c>)
 8002128:	490b      	ldr	r1, [pc, #44]	; (8002158 <LoopForever+0x20>)
 800212a:	2300      	movs	r3, #0
 800212c:	f7ff ffe9 	bl	8002102 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002130:	f00b fc30 	bl	800d994 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002134:	f001 fcda 	bl	8003aec <main>

08002138 <LoopForever>:

LoopForever:
  b LoopForever
 8002138:	e7fe      	b.n	8002138 <LoopForever>
 800213a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800213c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002140:	20000004 	.word	0x20000004
 8002144:	200001f4 	.word	0x200001f4
 8002148:	08010cc0 	.word	0x08010cc0
  INIT_BSS _sbss, _ebss
 800214c:	200003a0 	.word	0x200003a0
 8002150:	20002ba4 	.word	0x20002ba4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002154:	200301e0 	.word	0x200301e0
 8002158:	20030a57 	.word	0x20030a57

0800215c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC1_IRQHandler>

0800215e <LL_AHB2_GRP1_EnableClock>:
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800216c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4313      	orrs	r3, r2
 8002174:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4013      	ands	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_AHB2_GRP1_DisableClock>:
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a6:	4013      	ands	r3, r2
 80021a8:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_C2_AHB2_GRP1_EnableClock>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80021c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80021d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8002208:	2303      	movs	r3, #3
 800220a:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 800220c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002210:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2001      	movs	r0, #1
 8002214:	f7ff ffa3 	bl	800215e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f002 fd0a 	bl	8004c38 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff ffb3 	bl	8002190 <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 800222a:	2318      	movs	r3, #24
 800222c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2002      	movs	r0, #2
 8002230:	f7ff ff95 	bl	800215e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4809      	ldr	r0, [pc, #36]	; (8002260 <APPD_Init+0x70>)
 800223a:	f002 fcfd 	bl	8004c38 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800223e:	2002      	movs	r0, #2
 8002240:	f7ff ffa6 	bl	8002190 <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8002244:	f002 fa70 	bl	8004728 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002248:	f002 fa74 	bl	8004734 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800224c:	f002 fa78 	bl	8004740 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8002250:	f000 f824 	bl	800229c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8002254:	f000 f8c2 	bl	80023dc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8002258:	bf00      	nop
}
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	48000400 	.word	0x48000400

08002264 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <APPD_EnableCPU2+0x34>)
 800226c:	1d3c      	adds	r4, r7, #4
 800226e:	461d      	mov	r5, r3
 8002270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002278:	c403      	stmia	r4!, {r0, r1}
 800227a:	8022      	strh	r2, [r4, #0]
 800227c:	3402      	adds	r4, #2
 800227e:	0c13      	lsrs	r3, r2, #16
 8002280:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8002282:	f007 f9cf 	bl	8009624 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	4618      	mov	r0, r3
 800228a:	f006 fd2e 	bl	8008cea <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800228e:	bf00      	nop
}
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bdb0      	pop	{r4, r5, r7, pc}
 8002296:	bf00      	nop
 8002298:	080106e4 	.word	0x080106e4

0800229c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
 80022c0:	e033      	b.n	800232a <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
 80022c4:	4a42      	ldr	r2, [pc, #264]	; (80023d0 <APPD_SetCPU2GpioConfig+0x134>)
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	799b      	ldrb	r3, [r3, #6]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d028      	beq.n	8002322 <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80022d0:	7ffb      	ldrb	r3, [r7, #31]
 80022d2:	4a3f      	ldr	r2, [pc, #252]	; (80023d0 <APPD_SetCPU2GpioConfig+0x134>)
 80022d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022d8:	4a3e      	ldr	r2, [pc, #248]	; (80023d4 <APPD_SetCPU2GpioConfig+0x138>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00f      	beq.n	80022fe <APPD_SetCPU2GpioConfig+0x62>
 80022de:	4a3e      	ldr	r2, [pc, #248]	; (80023d8 <APPD_SetCPU2GpioConfig+0x13c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d015      	beq.n	8002310 <APPD_SetCPU2GpioConfig+0x74>
 80022e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e8:	d000      	beq.n	80022ec <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80022ea:	e01b      	b.n	8002324 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80022ec:	7ffb      	ldrb	r3, [r7, #31]
 80022ee:	4a38      	ldr	r2, [pc, #224]	; (80023d0 <APPD_SetCPU2GpioConfig+0x134>)
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	889a      	ldrh	r2, [r3, #4]
 80022f6:	8bbb      	ldrh	r3, [r7, #28]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	83bb      	strh	r3, [r7, #28]
          break;
 80022fc:	e012      	b.n	8002324 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80022fe:	7ffb      	ldrb	r3, [r7, #31]
 8002300:	4a33      	ldr	r2, [pc, #204]	; (80023d0 <APPD_SetCPU2GpioConfig+0x134>)
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	889a      	ldrh	r2, [r3, #4]
 8002308:	8b7b      	ldrh	r3, [r7, #26]
 800230a:	4313      	orrs	r3, r2
 800230c:	837b      	strh	r3, [r7, #26]
          break;
 800230e:	e009      	b.n	8002324 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <APPD_SetCPU2GpioConfig+0x134>)
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	889a      	ldrh	r2, [r3, #4]
 800231a:	8b3b      	ldrh	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	833b      	strh	r3, [r7, #24]
          break;
 8002320:	e000      	b.n	8002324 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8002322:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002324:	7ffb      	ldrb	r3, [r7, #31]
 8002326:	3301      	adds	r3, #1
 8002328:	77fb      	strb	r3, [r7, #31]
 800232a:	7ffb      	ldrb	r3, [r7, #31]
 800232c:	2b21      	cmp	r3, #33	; 0x21
 800232e:	d9c8      	bls.n	80022c2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8002334:	2301      	movs	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800233c:	8bbb      	ldrh	r3, [r7, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d014      	beq.n	800236c <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8002342:	8bbb      	ldrh	r3, [r7, #28]
 8002344:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff ff09 	bl	800215e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff ff32 	bl	80021b6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235a:	f002 fc6d 	bl	8004c38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800235e:	8bbb      	ldrh	r3, [r7, #28]
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002368:	f002 fdd6 	bl	8004f18 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800236c:	8b7b      	ldrh	r3, [r7, #26]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8002372:	8b7b      	ldrh	r3, [r7, #26]
 8002374:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2002      	movs	r0, #2
 8002378:	f7ff fef1 	bl	800215e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff ff1a 	bl	80021b6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <APPD_SetCPU2GpioConfig+0x138>)
 8002388:	f002 fc56 	bl	8004c38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800238c:	8b7b      	ldrh	r3, [r7, #26]
 800238e:	2200      	movs	r2, #0
 8002390:	4619      	mov	r1, r3
 8002392:	4810      	ldr	r0, [pc, #64]	; (80023d4 <APPD_SetCPU2GpioConfig+0x138>)
 8002394:	f002 fdc0 	bl	8004f18 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8002398:	8b3b      	ldrh	r3, [r7, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d013      	beq.n	80023c6 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 800239e:	8b3b      	ldrh	r3, [r7, #24]
 80023a0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	2004      	movs	r0, #4
 80023a4:	f7ff fedb 	bl	800215e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80023a8:	2004      	movs	r0, #4
 80023aa:	f7ff ff04 	bl	80021b6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4809      	ldr	r0, [pc, #36]	; (80023d8 <APPD_SetCPU2GpioConfig+0x13c>)
 80023b4:	f002 fc40 	bl	8004c38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80023b8:	8b3b      	ldrh	r3, [r7, #24]
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <APPD_SetCPU2GpioConfig+0x13c>)
 80023c0:	f002 fdaa 	bl	8004f18 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
}
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	080107e0 	.word	0x080107e0
 80023d4:	48000400 	.word	0x48000400
 80023d8:	48000800 	.word	0x48000800

080023dc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80023e0:	bf00      	nop
}
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <LL_C2_PWR_SetPowerMode+0x28>)
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4905      	ldr	r1, [pc, #20]	; (8002414 <LL_C2_PWR_SetPowerMode+0x28>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	58000400 	.word	0x58000400

08002418 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800242a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8002444:	f000 f810 	bl	8002468 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002448:	4906      	ldr	r1, [pc, #24]	; (8002464 <APPE_Init+0x24>)
 800244a:	2000      	movs	r0, #0
 800244c:	f000 fea2 	bl	8003194 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8002450:	f7ff fece 	bl	80021f0 <APPD_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8002454:	2101      	movs	r1, #1
 8002456:	2001      	movs	r0, #1
 8002458:	f00b fa34 	bl	800d8c4 <UTIL_LPM_SetOffMode>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800245c:	f000 f812 	bl	8002484 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8002460:	bf00      	nop
}
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20002a8c 	.word	0x20002a8c

08002468 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800246c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002470:	f7ff ffd2 	bl	8002418 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002474:	f00b fa14 	bl	800d8a0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002478:	2004      	movs	r0, #4
 800247a:	f7ff ffb7 	bl	80023ec <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800247e:	bf00      	nop
}
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800248a:	f006 ff15 	bl	80092b8 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 800248e:	2000      	movs	r0, #0
 8002490:	f007 fc42 	bl	8009d18 <osMutexNew>
 8002494:	4602      	mov	r2, r0
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <appe_Tl_Init+0x70>)
 8002498:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2001      	movs	r0, #1
 80024a0:	f007 fd82 	bl	8009fa8 <osSemaphoreNew>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <appe_Tl_Init+0x74>)
 80024a8:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 80024aa:	4a14      	ldr	r2, [pc, #80]	; (80024fc <appe_Tl_Init+0x78>)
 80024ac:	2100      	movs	r1, #0
 80024ae:	4814      	ldr	r0, [pc, #80]	; (8002500 <appe_Tl_Init+0x7c>)
 80024b0:	f007 fa96 	bl	80099e0 <osThreadNew>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <appe_Tl_Init+0x80>)
 80024b8:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <appe_Tl_Init+0x84>)
 80024bc:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <appe_Tl_Init+0x88>)
 80024c0:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80024c2:	463b      	mov	r3, r7
 80024c4:	4619      	mov	r1, r3
 80024c6:	4812      	ldr	r0, [pc, #72]	; (8002510 <appe_Tl_Init+0x8c>)
 80024c8:	f006 fdbc 	bl	8009044 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <appe_Tl_Init+0x90>)
 80024ce:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <appe_Tl_Init+0x94>)
 80024d2:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <appe_Tl_Init+0x98>)
 80024d6:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80024d8:	f240 533c 	movw	r3, #1340	; 0x53c
 80024dc:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	4618      	mov	r0, r3
 80024e4:	f007 f82a 	bl	800953c <TL_MM_Init>

  TL_Enable();
 80024e8:	f006 fee0 	bl	80092ac <TL_Enable>

  return;
 80024ec:	bf00      	nop
}
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200028fc 	.word	0x200028fc
 80024f8:	20002904 	.word	0x20002904
 80024fc:	080108f0 	.word	0x080108f0
 8002500:	08002581 	.word	0x08002581
 8002504:	20002900 	.word	0x20002900
 8002508:	20030724 	.word	0x20030724
 800250c:	08002521 	.word	0x08002521
 8002510:	08002561 	.word	0x08002561
 8002514:	2003093c 	.word	0x2003093c
 8002518:	20030830 	.word	0x20030830
 800251c:	200301e8 	.word	0x200301e8

08002520 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <APPE_SysStatusNot+0x16>
 8002530:	2b01      	cmp	r3, #1
 8002532:	d008      	beq.n	8002546 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8002534:	e00d      	b.n	8002552 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <APPE_SysStatusNot+0x3c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f04f 31ff 	mov.w	r1, #4294967295
 800253e:	4618      	mov	r0, r3
 8002540:	f007 fc84 	bl	8009e4c <osMutexAcquire>
      break;
 8002544:	e005      	b.n	8002552 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <APPE_SysStatusNot+0x3c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f007 fcdc 	bl	8009f08 <osMutexRelease>
      break;
 8002550:	bf00      	nop
  }
  return;
 8002552:	bf00      	nop
}
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200028fc 	.word	0x200028fc

08002560 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8002568:	f7ff fe7c 	bl	8002264 <APPD_EnableCPU2>

  APP_BLE_Init( );
 800256c:	f7fe fc98 	bl	8000ea0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002570:	2100      	movs	r1, #0
 8002572:	2001      	movs	r0, #1
 8002574:	f00b f9a6 	bl	800d8c4 <UTIL_LPM_SetOffMode>
  return;
 8002578:	bf00      	nop
}
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	2100      	movs	r1, #0
 800258e:	2001      	movs	r0, #1
 8002590:	f007 fb2e 	bl	8009bf0 <osThreadFlagsWait>
     shci_user_evt_proc();
 8002594:	f006 fd72 	bl	800907c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002598:	e7f6      	b.n	8002588 <ShciUserEvtProcess+0x8>
	...

0800259c <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <shci_notify_asynch_evt+0x1c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f007 fabe 	bl	8009b2c <osThreadFlagsSet>
  return;
 80025b0:	bf00      	nop
}
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20002900 	.word	0x20002900

080025bc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <shci_cmd_resp_release+0x1c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f007 fdf1 	bl	800a1b0 <osSemaphoreRelease>
  return;
 80025ce:	bf00      	nop
}
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20002904 	.word	0x20002904

080025dc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <shci_cmd_resp_wait+0x20>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	4618      	mov	r0, r3
 80025ee:	f007 fd79 	bl	800a0e4 <osSemaphoreAcquire>
  return;
 80025f2:	bf00      	nop
}
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20002904 	.word	0x20002904

08002600 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <vPortSuppressTicksAndSleep+0x8c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1f      	ldr	r2, [pc, #124]	; (800268c <vPortSuppressTicksAndSleep+0x8c>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002616:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800261a:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800261e:	f00a f93f 	bl	800c8a0 <eTaskConfirmSleepModeStatus>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <vPortSuppressTicksAndSleep+0x8c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <vPortSuppressTicksAndSleep+0x8c>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002634:	b662      	cpsie	i

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002636:	e024      	b.n	8002682 <vPortSuppressTicksAndSleep+0x82>
    if (xExpectedIdleTime != (~0))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d005      	beq.n	800264c <vPortSuppressTicksAndSleep+0x4c>
      xExpectedIdleTime--;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	607b      	str	r3, [r7, #4]
      LpTimerStart( xExpectedIdleTime );
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f874 	bl	8002734 <LpTimerStart>
    LpEnter( );
 800264c:	f000 f8a0 	bl	8002790 <LpEnter>
    if (xExpectedIdleTime != (~0))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d005      	beq.n	8002664 <vPortSuppressTicksAndSleep+0x64>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002658:	f000 f8a2 	bl	80027a0 <LpGetElapsedTime>
 800265c:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f009 fe72 	bl	800c348 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <vPortSuppressTicksAndSleep+0x90>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <vPortSuppressTicksAndSleep+0x8c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <vPortSuppressTicksAndSleep+0x8c>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <vPortSuppressTicksAndSleep+0x94>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a07      	ldr	r2, [pc, #28]	; (8002698 <vPortSuppressTicksAndSleep+0x98>)
 800267c:	3b01      	subs	r3, #1
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	b662      	cpsie	i
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010
 8002690:	e000e018 	.word	0xe000e018
 8002694:	200003c8 	.word	0x200003c8
 8002698:	e000e014 	.word	0xe000e014

0800269c <vPortSetupTimerInterrupt>:
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
#if ( CFG_LPM_SUPPORTED != 0)
void vPortSetupTimerInterrupt( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  LpTimerInit( );
 80026a0:	f000 f828 	bl	80026f4 <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <vPortSetupTimerInterrupt+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <vPortSetupTimerInterrupt+0x44>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <vPortSetupTimerInterrupt+0x48>)
 80026b2:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <vPortSetupTimerInterrupt+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <vPortSetupTimerInterrupt+0x50>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <vPortSetupTimerInterrupt+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <vPortSetupTimerInterrupt+0x44>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <vPortSetupTimerInterrupt+0x54>)
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <vPortSetupTimerInterrupt+0x4c>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000014 	.word	0x20000014
 80026e0:	10624dd3 	.word	0x10624dd3
 80026e4:	200003c8 	.word	0x200003c8
 80026e8:	e000e010 	.word	0xe000e010
 80026ec:	e000e018 	.word	0xe000e018
 80026f0:	e000e014 	.word	0xe000e014

080026f4 <LpTimerInit>:
 * @param  None
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpTimerInit( void )
{
 80026f4:	b598      	push	{r3, r4, r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <LpTimerInit+0x24>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <LpTimerInit+0x28>)
 80026fe:	2000      	movs	r0, #0
 8002700:	f000 fe2e 	bl	8003360 <HW_TS_Create>
  LpTimerContext.LpTimeDiffVal = 0;
 8002704:	4a06      	ldr	r2, [pc, #24]	; (8002720 <LpTimerInit+0x2c>)
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	e9c2 3400 	strd	r3, r4, [r2]

  return;
 8002712:	bf00      	nop
}
 8002714:	bd98      	pop	{r3, r4, r7, pc}
 8002716:	bf00      	nop
 8002718:	08002725 	.word	0x08002725
 800271c:	200003dc 	.word	0x200003dc
 8002720:	200003d0 	.word	0x200003d0

08002724 <LpTimerCb>:
 * @param  None
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpTimerCb( void )
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 8002728:	bf00      	nop
}
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <LpTimerStart>:
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpTimerStart( uint32_t time_to_sleep )
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint64_t time;

  /* Converts the number of FreeRTOS ticks into hw timer tick */

  time = (time_to_sleep * 1000 * 1000 );
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a11      	ldr	r2, [pc, #68]	; (8002784 <LpTimerStart+0x50>)
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	f04f 0400 	mov.w	r4, #0
 8002748:	e9c7 3402 	strd	r3, r4, [r7, #8]
  time = time / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 800274c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002750:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <LpTimerStart+0x54>)
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f7fe f9ff 	bl	8000b58 <__aeabi_uldivmod>
 800275a:	4603      	mov	r3, r0
 800275c:	460c      	mov	r4, r1
 800275e:	e9c7 3402 	strd	r3, r4, [r7, #8]

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, (uint32_t)time);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <LpTimerStart+0x58>)
 8002764:	7b1b      	ldrb	r3, [r3, #12]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fef8 	bl	8003560 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 8002770:	f000 ff7c 	bl	800366c <HW_TS_RTC_ReadLeftTicksToCount>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <LpTimerStart+0x58>)
 800277a:	609a      	str	r2, [r3, #8]

  return;
 800277c:	bf00      	nop
}
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	000f4240 	.word	0x000f4240
 8002788:	00077240 	.word	0x00077240
 800278c:	200003d0 	.word	0x200003d0

08002790 <LpEnter>:
 * @param  None
 * @retval None
 */
#if ( CFG_LPM_SUPPORTED != 0)
static void LpEnter( void )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8002794:	f00b f8c4 	bl	800d920 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8002798:	bf00      	nop
}
 800279a:	bd80      	pop	{r7, pc}
 800279c:	0000      	movs	r0, r0
	...

080027a0 <LpGetElapsedTime>:
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
#if ( CFG_LPM_SUPPORTED != 0)
static uint32_t LpGetElapsedTime( void )
{
 80027a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
  uint64_t val_ticks, time_us, diff_ps;
  uint32_t LpTimeLeftOnExit;

  LpTimeLeftOnExit = HW_TS_RTC_ReadLeftTicksToCount();
 80027a6:	f000 ff61 	bl	800366c <HW_TS_RTC_ReadLeftTicksToCount>
 80027aa:	4603      	mov	r3, r0
 80027ac:	617b      	str	r3, [r7, #20]
  time_us = (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - LpTimeLeftOnExit);
 80027ae:	4b62      	ldr	r3, [pc, #392]	; (8002938 <LpGetElapsedTime+0x198>)
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	461d      	mov	r5, r3
 80027b8:	f04f 0600 	mov.w	r6, #0
 80027bc:	462b      	mov	r3, r5
 80027be:	4634      	mov	r4, r6
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	0122      	lsls	r2, r4, #4
 80027ca:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80027ce:	0119      	lsls	r1, r3, #4
 80027d0:	460b      	mov	r3, r1
 80027d2:	4614      	mov	r4, r2
 80027d4:	1b5b      	subs	r3, r3, r5
 80027d6:	eb64 0406 	sbc.w	r4, r4, r6
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	00a2      	lsls	r2, r4, #2
 80027e4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80027e8:	0099      	lsls	r1, r3, #2
 80027ea:	460b      	mov	r3, r1
 80027ec:	4614      	mov	r4, r2
 80027ee:	195b      	adds	r3, r3, r5
 80027f0:	eb44 0406 	adc.w	r4, r4, r6
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	00e2      	lsls	r2, r4, #3
 80027fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002802:	00d9      	lsls	r1, r3, #3
 8002804:	460b      	mov	r3, r1
 8002806:	4614      	mov	r4, r2
 8002808:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Corrects the time precision lost in CFG_TS_TICK_VAL computation */

  /* Compute the amount of pico seconds lost at each TS ticks */
  diff_ps = DIVR( ((uint64_t)CFG_RTCCLK_DIV * 1000000 * 1000000), (uint64_t)LSE_VALUE );
 800280c:	a446      	add	r4, pc, #280	; (adr r4, 8002928 <LpGetElapsedTime+0x188>)
 800280e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002812:	e9c7 3402 	strd	r3, r4, [r7, #8]
  diff_ps -= DIVF( (CFG_RTCCLK_DIV * 1000000), LSE_VALUE ) * 1000000;
 8002816:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800281a:	a245      	add	r2, pc, #276	; (adr r2, 8002930 <LpGetElapsedTime+0x190>)
 800281c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002820:	185d      	adds	r5, r3, r1
 8002822:	eb44 0602 	adc.w	r6, r4, r2
 8002826:	e9c7 5602 	strd	r5, r6, [r7, #8]
  /* Compute the total amount of time shift */
  diff_ps *= (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - LpTimeLeftOnExit);
 800282a:	4b43      	ldr	r3, [pc, #268]	; (8002938 <LpGetElapsedTime+0x198>)
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f04f 0400 	mov.w	r4, #0
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	fb03 f102 	mul.w	r1, r3, r2
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	fb04 f202 	mul.w	r2, r4, r2
 8002842:	440a      	add	r2, r1
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	fba1 3403 	umull	r3, r4, r1, r3
 800284a:	4422      	add	r2, r4
 800284c:	4614      	mov	r4, r2
 800284e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002852:	e9c7 3402 	strd	r3, r4, [r7, #8]

  /* Save the time shift for next time */
  LpTimerContext.LpTimeDiffVal += diff_ps;
 8002856:	4b38      	ldr	r3, [pc, #224]	; (8002938 <LpGetElapsedTime+0x198>)
 8002858:	e9d3 1200 	ldrd	r1, r2, [r3]
 800285c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002860:	185d      	adds	r5, r3, r1
 8002862:	eb44 0602 	adc.w	r6, r4, r2
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <LpGetElapsedTime+0x198>)
 8002868:	e9c2 5600 	strd	r5, r6, [r2]

  while(LpTimerContext.LpTimeDiffVal >= (uint64_t)(1000 * 1000))
 800286c:	e012      	b.n	8002894 <LpGetElapsedTime+0xf4>
  {
    /* Reports the time difference into returned time elapsed value */
    time_us++;
 800286e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	f144 0200 	adc.w	r2, r4, #0
 8002878:	e9c7 1206 	strd	r1, r2, [r7, #24]
    LpTimerContext.LpTimeDiffVal -= (uint64_t)(1000 * 1000);
 800287c:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <LpGetElapsedTime+0x198>)
 800287e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8002882:	492e      	ldr	r1, [pc, #184]	; (800293c <LpGetElapsedTime+0x19c>)
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	186b      	adds	r3, r5, r1
 800288a:	eb46 0402 	adc.w	r4, r6, r2
 800288e:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <LpGetElapsedTime+0x198>)
 8002890:	e9c2 3400 	strd	r3, r4, [r2]
  while(LpTimerContext.LpTimeDiffVal >= (uint64_t)(1000 * 1000))
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <LpGetElapsedTime+0x198>)
 8002896:	e9d3 3400 	ldrd	r3, r4, [r3]
 800289a:	4929      	ldr	r1, [pc, #164]	; (8002940 <LpGetElapsedTime+0x1a0>)
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	42a2      	cmp	r2, r4
 80028a2:	bf08      	it	eq
 80028a4:	4299      	cmpeq	r1, r3
 80028a6:	d3e2      	bcc.n	800286e <LpGetElapsedTime+0xce>
  }

  /* Convert uS time into OS ticks */
  val_ticks = time_us * configTICK_RATE_HZ;
 80028a8:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 80028ac:	462b      	mov	r3, r5
 80028ae:	4634      	mov	r4, r6
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	0162      	lsls	r2, r4, #5
 80028ba:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	1b5b      	subs	r3, r3, r5
 80028c6:	eb64 0406 	sbc.w	r4, r4, r6
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	00a2      	lsls	r2, r4, #2
 80028d4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80028d8:	0099      	lsls	r1, r3, #2
 80028da:	460b      	mov	r3, r1
 80028dc:	4614      	mov	r4, r2
 80028de:	195b      	adds	r3, r3, r5
 80028e0:	eb44 0406 	adc.w	r4, r4, r6
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	00e2      	lsls	r2, r4, #3
 80028ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028f2:	00d9      	lsls	r1, r3, #3
 80028f4:	460b      	mov	r3, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	e9c7 3400 	strd	r3, r4, [r7]
  val_ticks = val_ticks / (1000 * 1000);
 80028fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002900:	4a10      	ldr	r2, [pc, #64]	; (8002944 <LpGetElapsedTime+0x1a4>)
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	f7fe f927 	bl	8000b58 <__aeabi_uldivmod>
 800290a:	4603      	mov	r3, r0
 800290c:	460c      	mov	r4, r1
 800290e:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <LpGetElapsedTime+0x198>)
 8002914:	7b1b      	ldrb	r3, [r3, #12]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fd98 	bl	800344c <HW_TS_Stop>

  return (uint32_t)val_ticks;
 800291c:	683b      	ldr	r3, [r7, #0]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002926:	bf00      	nop
 8002928:	1d1a94a2 	.word	0x1d1a94a2
 800292c:	00000000 	.word	0x00000000
 8002930:	e2e9b600 	.word	0xe2e9b600
 8002934:	ffffffff 	.word	0xffffffff
 8002938:	200003d0 	.word	0x200003d0
 800293c:	fff0bdc0 	.word	0xfff0bdc0
 8002940:	000f423f 	.word	0x000f423f
 8002944:	000f4240 	.word	0x000f4240

08002948 <LL_EXTI_EnableIT_0_31>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <LL_EXTI_EnableIT_0_31+0x24>)
 8002952:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002956:	4905      	ldr	r1, [pc, #20]	; (800296c <LL_EXTI_EnableIT_0_31+0x24>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	58000800 	.word	0x58000800

08002970 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	58000800 	.word	0x58000800

08002994 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <ReadRtcSsrValue+0x3c>)
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	b29b      	uxth	r3, r3
 80029a0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <ReadRtcSsrValue+0x3c>)
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80029aa:	e005      	b.n	80029b8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <ReadRtcSsrValue+0x3c>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1f5      	bne.n	80029ac <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80029c0:	683b      	ldr	r3, [r7, #0]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40002800 	.word	0x40002800

080029d4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	460a      	mov	r2, r1
 80029de:	71fb      	strb	r3, [r7, #7]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80029e4:	79ba      	ldrb	r2, [r7, #6]
 80029e6:	491d      	ldr	r1, [pc, #116]	; (8002a5c <LinkTimerAfter+0x88>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	3315      	adds	r3, #21
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d009      	beq.n	8002a12 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	4916      	ldr	r1, [pc, #88]	; (8002a5c <LinkTimerAfter+0x88>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	79fa      	ldrb	r2, [r7, #7]
 8002a10:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002a12:	79fa      	ldrb	r2, [r7, #7]
 8002a14:	4911      	ldr	r1, [pc, #68]	; (8002a5c <LinkTimerAfter+0x88>)
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	3315      	adds	r3, #21
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002a26:	79fa      	ldrb	r2, [r7, #7]
 8002a28:	490c      	ldr	r1, [pc, #48]	; (8002a5c <LinkTimerAfter+0x88>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	3314      	adds	r3, #20
 8002a36:	79ba      	ldrb	r2, [r7, #6]
 8002a38:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002a3a:	79ba      	ldrb	r2, [r7, #6]
 8002a3c:	4907      	ldr	r1, [pc, #28]	; (8002a5c <LinkTimerAfter+0x88>)
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	3315      	adds	r3, #21
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	701a      	strb	r2, [r3, #0]

  return;
 8002a4e:	bf00      	nop
}
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	200002ec 	.word	0x200002ec

08002a60 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	460a      	mov	r2, r1
 8002a6a:	71fb      	strb	r3, [r7, #7]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <LinkTimerBefore+0xb8>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	79ba      	ldrb	r2, [r7, #6]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d032      	beq.n	8002ae2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002a7c:	79ba      	ldrb	r2, [r7, #6]
 8002a7e:	4927      	ldr	r1, [pc, #156]	; (8002b1c <LinkTimerBefore+0xbc>)
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3314      	adds	r3, #20
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	4922      	ldr	r1, [pc, #136]	; (8002b1c <LinkTimerBefore+0xbc>)
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3315      	adds	r3, #21
 8002aa0:	79fa      	ldrb	r2, [r7, #7]
 8002aa2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002aa4:	79fa      	ldrb	r2, [r7, #7]
 8002aa6:	491d      	ldr	r1, [pc, #116]	; (8002b1c <LinkTimerBefore+0xbc>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3315      	adds	r3, #21
 8002ab4:	79ba      	ldrb	r2, [r7, #6]
 8002ab6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002ab8:	79fa      	ldrb	r2, [r7, #7]
 8002aba:	4918      	ldr	r1, [pc, #96]	; (8002b1c <LinkTimerBefore+0xbc>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3314      	adds	r3, #20
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002acc:	79ba      	ldrb	r2, [r7, #6]
 8002ace:	4913      	ldr	r1, [pc, #76]	; (8002b1c <LinkTimerBefore+0xbc>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3314      	adds	r3, #20
 8002adc:	79fa      	ldrb	r2, [r7, #7]
 8002ade:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002ae0:	e014      	b.n	8002b0c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002ae2:	79fa      	ldrb	r2, [r7, #7]
 8002ae4:	490d      	ldr	r1, [pc, #52]	; (8002b1c <LinkTimerBefore+0xbc>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	3315      	adds	r3, #21
 8002af2:	79ba      	ldrb	r2, [r7, #6]
 8002af4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002af6:	79ba      	ldrb	r2, [r7, #6]
 8002af8:	4908      	ldr	r1, [pc, #32]	; (8002b1c <LinkTimerBefore+0xbc>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3314      	adds	r3, #20
 8002b06:	79fa      	ldrb	r2, [r7, #7]
 8002b08:	701a      	strb	r2, [r3, #0]
  return;
 8002b0a:	bf00      	nop
}
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000037c 	.word	0x2000037c
 8002b1c:	200002ec 	.word	0x200002ec

08002b20 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <linkTimer+0x144>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b06      	cmp	r3, #6
 8002b32:	d118      	bne.n	8002b66 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002b34:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <linkTimer+0x144>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <linkTimer+0x148>)
 8002b3c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002b3e:	4a49      	ldr	r2, [pc, #292]	; (8002c64 <linkTimer+0x144>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4949      	ldr	r1, [pc, #292]	; (8002c6c <linkTimer+0x14c>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	3315      	adds	r3, #21
 8002b54:	2206      	movs	r2, #6
 8002b56:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002b58:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <linkTimer+0x150>)
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	81fb      	strh	r3, [r7, #14]
 8002b64:	e078      	b.n	8002c58 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002b66:	f000 f909 	bl	8002d7c <ReturnTimeElapsed>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002b6e:	79fa      	ldrb	r2, [r7, #7]
 8002b70:	493e      	ldr	r1, [pc, #248]	; (8002c6c <linkTimer+0x14c>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	89fb      	ldrh	r3, [r7, #14]
 8002b82:	79fa      	ldrb	r2, [r7, #7]
 8002b84:	4419      	add	r1, r3
 8002b86:	4839      	ldr	r0, [pc, #228]	; (8002c6c <linkTimer+0x14c>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4403      	add	r3, r0
 8002b92:	3308      	adds	r3, #8
 8002b94:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002b96:	79fa      	ldrb	r2, [r7, #7]
 8002b98:	4934      	ldr	r1, [pc, #208]	; (8002c6c <linkTimer+0x14c>)
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <linkTimer+0x144>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4a2e      	ldr	r2, [pc, #184]	; (8002c6c <linkTimer+0x14c>)
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d337      	bcc.n	8002c38 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002bc8:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <linkTimer+0x144>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002bce:	7b7a      	ldrb	r2, [r7, #13]
 8002bd0:	4926      	ldr	r1, [pc, #152]	; (8002c6c <linkTimer+0x14c>)
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	3315      	adds	r3, #21
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002be2:	e013      	b.n	8002c0c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002be4:	7b7a      	ldrb	r2, [r7, #13]
 8002be6:	4921      	ldr	r1, [pc, #132]	; (8002c6c <linkTimer+0x14c>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3315      	adds	r3, #21
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002bf8:	7b7a      	ldrb	r2, [r7, #13]
 8002bfa:	491c      	ldr	r1, [pc, #112]	; (8002c6c <linkTimer+0x14c>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	3315      	adds	r3, #21
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002c0c:	7b3b      	ldrb	r3, [r7, #12]
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d00b      	beq.n	8002c2a <linkTimer+0x10a>
 8002c12:	7b3a      	ldrb	r2, [r7, #12]
 8002c14:	4915      	ldr	r1, [pc, #84]	; (8002c6c <linkTimer+0x14c>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	3308      	adds	r3, #8
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d2dc      	bcs.n	8002be4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002c2a:	7b7a      	ldrb	r2, [r7, #13]
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fecf 	bl	80029d4 <LinkTimerAfter>
 8002c36:	e00f      	b.n	8002c58 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <linkTimer+0x144>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff0c 	bl	8002a60 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <linkTimer+0x144>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <linkTimer+0x148>)
 8002c50:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <linkTimer+0x144>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002c58:	89fb      	ldrh	r3, [r7, #14]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000037c 	.word	0x2000037c
 8002c68:	2000037d 	.word	0x2000037d
 8002c6c:	200002ec 	.word	0x200002ec
 8002c70:	20000380 	.word	0x20000380

08002c74 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002c84:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <UnlinkTimer+0xf8>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	79fa      	ldrb	r2, [r7, #7]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d111      	bne.n	8002cb4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <UnlinkTimer+0xf8>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <UnlinkTimer+0xfc>)
 8002c98:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002c9a:	79fa      	ldrb	r2, [r7, #7]
 8002c9c:	4935      	ldr	r1, [pc, #212]	; (8002d74 <UnlinkTimer+0x100>)
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3315      	adds	r3, #21
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <UnlinkTimer+0xf8>)
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e03e      	b.n	8002d32 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	492f      	ldr	r1, [pc, #188]	; (8002d74 <UnlinkTimer+0x100>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002cc8:	79fa      	ldrb	r2, [r7, #7]
 8002cca:	492a      	ldr	r1, [pc, #168]	; (8002d74 <UnlinkTimer+0x100>)
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3315      	adds	r3, #21
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002cdc:	79f9      	ldrb	r1, [r7, #7]
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	4824      	ldr	r0, [pc, #144]	; (8002d74 <UnlinkTimer+0x100>)
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	440b      	add	r3, r1
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4403      	add	r3, r0
 8002cec:	3315      	adds	r3, #21
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b2d8      	uxtb	r0, r3
 8002cf2:	4920      	ldr	r1, [pc, #128]	; (8002d74 <UnlinkTimer+0x100>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3315      	adds	r3, #21
 8002d00:	4602      	mov	r2, r0
 8002d02:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d013      	beq.n	8002d32 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002d0a:	79f9      	ldrb	r1, [r7, #7]
 8002d0c:	7bba      	ldrb	r2, [r7, #14]
 8002d0e:	4819      	ldr	r0, [pc, #100]	; (8002d74 <UnlinkTimer+0x100>)
 8002d10:	460b      	mov	r3, r1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	440b      	add	r3, r1
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4403      	add	r3, r0
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2d8      	uxtb	r0, r3
 8002d20:	4914      	ldr	r1, [pc, #80]	; (8002d74 <UnlinkTimer+0x100>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3314      	adds	r3, #20
 8002d2e:	4602      	mov	r2, r0
 8002d30:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	490f      	ldr	r1, [pc, #60]	; (8002d74 <UnlinkTimer+0x100>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	330c      	adds	r3, #12
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <UnlinkTimer+0xf8>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d107      	bne.n	8002d60 <UnlinkTimer+0xec>
 8002d50:	79bb      	ldrb	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <UnlinkTimer+0x104>)
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  return;
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
}
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	2000037c 	.word	0x2000037c
 8002d70:	2000037d 	.word	0x2000037d
 8002d74:	200002ec 	.word	0x200002ec
 8002d78:	20000380 	.word	0x20000380

08002d7c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002d82:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <ReturnTimeElapsed+0x70>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d026      	beq.n	8002dda <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002d8c:	f7ff fe02 	bl	8002994 <ReadRtcSsrValue>
 8002d90:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <ReturnTimeElapsed+0x70>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d805      	bhi.n	8002da8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <ReturnTimeElapsed+0x70>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	e00a      	b.n	8002dbe <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <ReturnTimeElapsed+0x74>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <ReturnTimeElapsed+0x70>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <ReturnTimeElapsed+0x78>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <ReturnTimeElapsed+0x7c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	40d3      	lsrs	r3, r2
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	e001      	b.n	8002dde <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	b29b      	uxth	r3, r3
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000380 	.word	0x20000380
 8002df0:	200003e6 	.word	0x200003e6
 8002df4:	200003e5 	.word	0x200003e5
 8002df8:	200003e4 	.word	0x200003e4

08002dfc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d108      	bne.n	8002e1e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002e0c:	f7ff fdc2 	bl	8002994 <ReadRtcSsrValue>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <RestartWakeupCounter+0xa8>)
 8002e14:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002e16:	2003      	movs	r0, #3
 8002e18:	f001 fde4 	bl	80049e4 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002e1c:	e03e      	b.n	8002e9c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d803      	bhi.n	8002e2c <RestartWakeupCounter+0x30>
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <RestartWakeupCounter+0xac>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d002      	beq.n	8002e32 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002e32:	bf00      	nop
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <RestartWakeupCounter+0xb0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f7      	beq.n	8002e34 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <RestartWakeupCounter+0xb0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <RestartWakeupCounter+0xb0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e58:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <RestartWakeupCounter+0xb4>)
 8002e5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e60:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002e62:	2003      	movs	r0, #3
 8002e64:	f001 fdcc 	bl	8004a00 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <RestartWakeupCounter+0xb8>)
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	041b      	lsls	r3, r3, #16
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	4910      	ldr	r1, [pc, #64]	; (8002eb4 <RestartWakeupCounter+0xb8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002e78:	f7ff fd8c 	bl	8002994 <ReadRtcSsrValue>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <RestartWakeupCounter+0xa8>)
 8002e80:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <RestartWakeupCounter+0xb0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <RestartWakeupCounter+0xb0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e94:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002e96:	f3af 8000 	nop.w
  return ;
 8002e9a:	bf00      	nop
}
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000380 	.word	0x20000380
 8002ea8:	200003e4 	.word	0x200003e4
 8002eac:	200003e0 	.word	0x200003e0
 8002eb0:	58000800 	.word	0x58000800
 8002eb4:	40002800 	.word	0x40002800

08002eb8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <RescheduleTimerList+0x124>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d108      	bne.n	8002ede <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002ecc:	bf00      	nop
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <RescheduleTimerList+0x128>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f7      	bne.n	8002ece <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002ede:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <RescheduleTimerList+0x128>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <RescheduleTimerList+0x128>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002ef2:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <RescheduleTimerList+0x12c>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	493b      	ldr	r1, [pc, #236]	; (8002fe8 <RescheduleTimerList+0x130>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	3308      	adds	r3, #8
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002f0c:	f7ff ff36 	bl	8002d7c <ReturnTimeElapsed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d205      	bcs.n	8002f28 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002f20:	4b32      	ldr	r3, [pc, #200]	; (8002fec <RescheduleTimerList+0x134>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e04d      	b.n	8002fc4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	4a31      	ldr	r2, [pc, #196]	; (8002ff0 <RescheduleTimerList+0x138>)
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	4413      	add	r3, r2
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d906      	bls.n	8002f48 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <RescheduleTimerList+0x138>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <RescheduleTimerList+0x134>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e03d      	b.n	8002fc4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <RescheduleTimerList+0x134>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f58:	e034      	b.n	8002fc4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	4922      	ldr	r1, [pc, #136]	; (8002fe8 <RescheduleTimerList+0x130>)
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	3308      	adds	r3, #8
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d20a      	bcs.n	8002f88 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	491c      	ldr	r1, [pc, #112]	; (8002fe8 <RescheduleTimerList+0x130>)
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	3308      	adds	r3, #8
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e013      	b.n	8002fb0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	4917      	ldr	r1, [pc, #92]	; (8002fe8 <RescheduleTimerList+0x130>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	3308      	adds	r3, #8
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	1ac9      	subs	r1, r1, r3
 8002fa0:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <RescheduleTimerList+0x130>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4403      	add	r3, r0
 8002fac:	3308      	adds	r3, #8
 8002fae:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	490d      	ldr	r1, [pc, #52]	; (8002fe8 <RescheduleTimerList+0x130>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3315      	adds	r3, #21
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d1c7      	bne.n	8002f5a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002fca:	89bb      	ldrh	r3, [r7, #12]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff15 	bl	8002dfc <RestartWakeupCounter>

  return ;
 8002fd2:	bf00      	nop
}
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40002800 	.word	0x40002800
 8002fe0:	200003e0 	.word	0x200003e0
 8002fe4:	2000037c 	.word	0x2000037c
 8002fe8:	200002ec 	.word	0x200002ec
 8002fec:	20000384 	.word	0x20000384
 8002ff0:	200003e8 	.word	0x200003e8

08002ff4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffe:	617b      	str	r3, [r7, #20]
  return(result);
 8003000:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003004:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003006:	4b5e      	ldr	r3, [pc, #376]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	22ca      	movs	r2, #202	; 0xca
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2253      	movs	r2, #83	; 0x53
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b57      	ldr	r3, [pc, #348]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800302e:	4b55      	ldr	r3, [pc, #340]	; (8003184 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003036:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800303a:	4953      	ldr	r1, [pc, #332]	; (8003188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	330c      	adds	r3, #12
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d170      	bne.n	8003132 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8003050:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003054:	494c      	ldr	r1, [pc, #304]	; (8003188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003064:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003068:	4947      	ldr	r1, [pc, #284]	; (8003188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3310      	adds	r3, #16
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800307a:	4b44      	ldr	r3, [pc, #272]	; (800318c <HW_TS_RTC_Wakeup_Handler+0x198>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d04e      	beq.n	8003122 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003084:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003088:	493f      	ldr	r1, [pc, #252]	; (8003188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	330d      	adds	r3, #13
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d125      	bne.n	80030ea <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800309e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fde5 	bl	8002c74 <UnlinkTimer>
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80030b4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80030b8:	4933      	ldr	r1, [pc, #204]	; (8003188 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	3304      	adds	r3, #4
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fa46 	bl	8003560 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	22ca      	movs	r2, #202	; 0xca
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2253      	movs	r2, #83	; 0x53
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24
 80030e8:	e013      	b.n	8003112 <HW_TS_RTC_Wakeup_Handler+0x11e>
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80030f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f9a7 	bl	800344c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	22ca      	movs	r2, #202	; 0xca
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2253      	movs	r2, #83	; 0x53
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	4619      	mov	r1, r3
 800311a:	69b8      	ldr	r0, [r7, #24]
 800311c:	f000 fad8 	bl	80036d0 <HW_TS_RTC_Int_AppNot>
 8003120:	e024      	b.n	800316c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8003122:	f7ff fec9 	bl	8002eb8 <RescheduleTimerList>
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f383 8810 	msr	PRIMASK, r3
 8003130:	e01c      	b.n	800316c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8003132:	bf00      	nop
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f7      	beq.n	8003134 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003158:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800315c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	22ff      	movs	r2, #255	; 0xff
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8003176:	bf00      	nop
}
 8003178:	3728      	adds	r7, #40	; 0x28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200003e0 	.word	0x200003e0
 8003184:	2000037c 	.word	0x2000037c
 8003188:	200002ec 	.word	0x200002ec
 800318c:	20000384 	.word	0x20000384
 8003190:	58000800 	.word	0x58000800

08003194 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80031a0:	4a64      	ldr	r2, [pc, #400]	; (8003334 <HW_TS_Init+0x1a0>)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031a6:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HW_TS_Init+0x1a0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	22ca      	movs	r2, #202	; 0xca
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24
 80031b0:	4b60      	ldr	r3, [pc, #384]	; (8003334 <HW_TS_Init+0x1a0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2253      	movs	r2, #83	; 0x53
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031ba:	4b5f      	ldr	r3, [pc, #380]	; (8003338 <HW_TS_Init+0x1a4>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4a5e      	ldr	r2, [pc, #376]	; (8003338 <HW_TS_Init+0x1a4>)
 80031c0:	f043 0320 	orr.w	r3, r3, #32
 80031c4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80031c6:	4b5c      	ldr	r3, [pc, #368]	; (8003338 <HW_TS_Init+0x1a4>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f1c3 0304 	rsb	r3, r3, #4
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b58      	ldr	r3, [pc, #352]	; (800333c <HW_TS_Init+0x1a8>)
 80031da:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80031dc:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HW_TS_Init+0x1a4>)
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031e4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80031e8:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	fa92 f2a2 	rbit	r2, r2
 80031f0:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	2a00      	cmp	r2, #0
 80031fa:	d101      	bne.n	8003200 <HW_TS_Init+0x6c>
  {
    return 32U;
 80031fc:	2220      	movs	r2, #32
 80031fe:	e003      	b.n	8003208 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	fab2 f282 	clz	r2, r2
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	40d3      	lsrs	r3, r2
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <HW_TS_Init+0x1ac>)
 8003212:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003214:	4b48      	ldr	r3, [pc, #288]	; (8003338 <HW_TS_Init+0x1a4>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	b29b      	uxth	r3, r3
 800321a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800321e:	b29b      	uxth	r3, r3
 8003220:	3301      	adds	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HW_TS_Init+0x1b0>)
 8003226:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HW_TS_Init+0x1b0>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	3b01      	subs	r3, #1
 800322e:	4a44      	ldr	r2, [pc, #272]	; (8003340 <HW_TS_Init+0x1ac>)
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800323a:	4a40      	ldr	r2, [pc, #256]	; (800333c <HW_TS_Init+0x1a8>)
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	40d3      	lsrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003248:	4293      	cmp	r3, r2
 800324a:	d904      	bls.n	8003256 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800324c:	4b3e      	ldr	r3, [pc, #248]	; (8003348 <HW_TS_Init+0x1b4>)
 800324e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003252:	801a      	strh	r2, [r3, #0]
 8003254:	e003      	b.n	800325e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HW_TS_Init+0x1b4>)
 800325c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800325e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003262:	f7ff fb85 	bl	8002970 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003266:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800326a:	f7ff fb6d 	bl	8002948 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d143      	bne.n	80032fc <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <HW_TS_Init+0x1b8>)
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800327a:	4b35      	ldr	r3, [pc, #212]	; (8003350 <HW_TS_Init+0x1bc>)
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003282:	2300      	movs	r3, #0
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e00c      	b.n	80032a2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003288:	7ffa      	ldrb	r2, [r7, #31]
 800328a:	4932      	ldr	r1, [pc, #200]	; (8003354 <HW_TS_Init+0x1c0>)
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	330c      	adds	r3, #12
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800329c:	7ffb      	ldrb	r3, [r7, #31]
 800329e:	3301      	adds	r3, #1
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d9ef      	bls.n	8003288 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HW_TS_Init+0x1c4>)
 80032aa:	2206      	movs	r2, #6
 80032ac:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HW_TS_Init+0x1a0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HW_TS_Init+0x1a0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HW_TS_Init+0x1a0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HW_TS_Init+0x1a0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032d6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <HW_TS_Init+0x1c8>)
 80032da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80032de:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80032e0:	2003      	movs	r0, #3
 80032e2:	f001 fb8d 	bl	8004a00 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HW_TS_Init+0x1a0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HW_TS_Init+0x1a0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	e00a      	b.n	8003312 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <HW_TS_Init+0x1a0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800330c:	2003      	movs	r0, #3
 800330e:	f001 fb69 	bl	80049e4 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HW_TS_Init+0x1a0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800331c:	2200      	movs	r2, #0
 800331e:	2106      	movs	r1, #6
 8003320:	2003      	movs	r0, #3
 8003322:	f001 fb29 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003326:	2003      	movs	r0, #3
 8003328:	f001 fb40 	bl	80049ac <HAL_NVIC_EnableIRQ>

  return;
 800332c:	bf00      	nop
}
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200003e0 	.word	0x200003e0
 8003338:	40002800 	.word	0x40002800
 800333c:	200003e4 	.word	0x200003e4
 8003340:	200003e5 	.word	0x200003e5
 8003344:	200003e6 	.word	0x200003e6
 8003348:	200003e8 	.word	0x200003e8
 800334c:	20000384 	.word	0x20000384
 8003350:	20000380 	.word	0x20000380
 8003354:	200002ec 	.word	0x200002ec
 8003358:	2000037c 	.word	0x2000037c
 800335c:	58000800 	.word	0x58000800

08003360 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003360:	b480      	push	{r7}
 8003362:	b08b      	sub	sp, #44	; 0x2c
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003376:	f3ef 8310 	mrs	r3, PRIMASK
 800337a:	61fb      	str	r3, [r7, #28]
  return(result);
 800337c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800337e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003380:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003382:	e004      	b.n	800338e <HW_TS_Create+0x2e>
  {
    loop++;
 8003384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003388:	3301      	adds	r3, #1
 800338a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800338e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003392:	2b05      	cmp	r3, #5
 8003394:	d80c      	bhi.n	80033b0 <HW_TS_Create+0x50>
 8003396:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800339a:	492b      	ldr	r1, [pc, #172]	; (8003448 <HW_TS_Create+0xe8>)
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	330c      	adds	r3, #12
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e9      	bne.n	8003384 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033b4:	2b06      	cmp	r3, #6
 80033b6:	d037      	beq.n	8003428 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80033b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80033bc:	4922      	ldr	r1, [pc, #136]	; (8003448 <HW_TS_Create+0xe8>)
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	330c      	adds	r3, #12
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80033d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80033dc:	491a      	ldr	r1, [pc, #104]	; (8003448 <HW_TS_Create+0xe8>)
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3310      	adds	r3, #16
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80033ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80033f2:	4915      	ldr	r1, [pc, #84]	; (8003448 <HW_TS_Create+0xe8>)
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	330d      	adds	r3, #13
 8003400:	79fa      	ldrb	r2, [r7, #7]
 8003402:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003404:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003408:	490f      	ldr	r1, [pc, #60]	; (8003448 <HW_TS_Create+0xe8>)
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800341e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003426:	e007      	b.n	8003438 <HW_TS_Create+0xd8>
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800343c:	4618      	mov	r0, r3
 800343e:	372c      	adds	r7, #44	; 0x2c
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	200002ec 	.word	0x200002ec

0800344c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003456:	f3ef 8310 	mrs	r3, PRIMASK
 800345a:	60fb      	str	r3, [r7, #12]
  return(result);
 800345c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800345e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003460:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003462:	2003      	movs	r0, #3
 8003464:	f001 fab0 	bl	80049c8 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HW_TS_Stop+0xfc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	22ca      	movs	r2, #202	; 0xca
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
 8003472:	4b35      	ldr	r3, [pc, #212]	; (8003548 <HW_TS_Stop+0xfc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2253      	movs	r2, #83	; 0x53
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800347c:	79fa      	ldrb	r2, [r7, #7]
 800347e:	4933      	ldr	r1, [pc, #204]	; (800354c <HW_TS_Stop+0x100>)
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	330c      	adds	r3, #12
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d148      	bne.n	8003526 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fbeb 	bl	8002c74 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <HW_TS_Stop+0x104>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d135      	bne.n	8003516 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80034aa:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HW_TS_Stop+0x108>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d108      	bne.n	80034ca <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80034b8:	bf00      	nop
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HW_TS_Stop+0xfc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f7      	bne.n	80034ba <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HW_TS_Stop+0xfc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HW_TS_Stop+0xfc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034dc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80034de:	bf00      	nop
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HW_TS_Stop+0xfc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f7      	beq.n	80034e0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80034f0:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HW_TS_Stop+0xfc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HW_TS_Stop+0xfc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003504:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HW_TS_Stop+0x10c>)
 8003508:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800350c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800350e:	2003      	movs	r0, #3
 8003510:	f001 fa76 	bl	8004a00 <HAL_NVIC_ClearPendingIRQ>
 8003514:	e007      	b.n	8003526 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <HW_TS_Stop+0x110>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	7cfa      	ldrb	r2, [r7, #19]
 800351e:	429a      	cmp	r2, r3
 8003520:	d001      	beq.n	8003526 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003522:	f7ff fcc9 	bl	8002eb8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HW_TS_Stop+0xfc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003530:	2003      	movs	r0, #3
 8003532:	f001 fa3b 	bl	80049ac <HAL_NVIC_EnableIRQ>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003540:	bf00      	nop
}
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200003e0 	.word	0x200003e0
 800354c:	200002ec 	.word	0x200002ec
 8003550:	2000037c 	.word	0x2000037c
 8003554:	40002800 	.word	0x40002800
 8003558:	58000800 	.word	0x58000800
 800355c:	2000037d 	.word	0x2000037d

08003560 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800356c:	79fa      	ldrb	r2, [r7, #7]
 800356e:	493b      	ldr	r1, [pc, #236]	; (800365c <HW_TS_Start+0xfc>)
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	330c      	adds	r3, #12
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d103      	bne.n	800358c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff60 	bl	800344c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800358c:	f3ef 8310 	mrs	r3, PRIMASK
 8003590:	60fb      	str	r3, [r7, #12]
  return(result);
 8003592:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003596:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003598:	2003      	movs	r0, #3
 800359a:	f001 fa15 	bl	80049c8 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800359e:	4b30      	ldr	r3, [pc, #192]	; (8003660 <HW_TS_Start+0x100>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	22ca      	movs	r2, #202	; 0xca
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HW_TS_Start+0x100>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2253      	movs	r2, #83	; 0x53
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80035b2:	79fa      	ldrb	r2, [r7, #7]
 80035b4:	4929      	ldr	r1, [pc, #164]	; (800365c <HW_TS_Start+0xfc>)
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	440b      	add	r3, r1
 80035c0:	330c      	adds	r3, #12
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80035c6:	79fa      	ldrb	r2, [r7, #7]
 80035c8:	4924      	ldr	r1, [pc, #144]	; (800365c <HW_TS_Start+0xfc>)
 80035ca:	4613      	mov	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4413      	add	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	440b      	add	r3, r1
 80035d4:	3308      	adds	r3, #8
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80035da:	79fa      	ldrb	r2, [r7, #7]
 80035dc:	491f      	ldr	r1, [pc, #124]	; (800365c <HW_TS_Start+0xfc>)
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	440b      	add	r3, r1
 80035e8:	3304      	adds	r3, #4
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fa95 	bl	8002b20 <linkTimer>
 80035f6:	4603      	mov	r3, r0
 80035f8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HW_TS_Start+0x104>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HW_TS_Start+0x108>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	7c7a      	ldrb	r2, [r7, #17]
 8003608:	429a      	cmp	r2, r3
 800360a:	d002      	beq.n	8003612 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800360c:	f7ff fc54 	bl	8002eb8 <RescheduleTimerList>
 8003610:	e013      	b.n	800363a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003612:	79fa      	ldrb	r2, [r7, #7]
 8003614:	4911      	ldr	r1, [pc, #68]	; (800365c <HW_TS_Start+0xfc>)
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	3308      	adds	r3, #8
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	8a7b      	ldrh	r3, [r7, #18]
 8003626:	79fa      	ldrb	r2, [r7, #7]
 8003628:	1ac9      	subs	r1, r1, r3
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <HW_TS_Start+0xfc>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4403      	add	r3, r0
 8003636:	3308      	adds	r3, #8
 8003638:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <HW_TS_Start+0x100>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003644:	2003      	movs	r0, #3
 8003646:	f001 f9b1 	bl	80049ac <HAL_NVIC_EnableIRQ>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003654:	bf00      	nop
}
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	200002ec 	.word	0x200002ec
 8003660:	200003e0 	.word	0x200003e0
 8003664:	2000037c 	.word	0x2000037c
 8003668:	2000037d 	.word	0x2000037d

0800366c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003672:	f3ef 8310 	mrs	r3, PRIMASK
 8003676:	60bb      	str	r3, [r7, #8]
  return(result);
 8003678:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800367a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800367c:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368a:	d112      	bne.n	80036b2 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 8003692:	f7ff fb73 	bl	8002d7c <ReturnTimeElapsed>
 8003696:	4603      	mov	r3, r0
 8003698:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 800369a:	89fa      	ldrh	r2, [r7, #14]
 800369c:	89bb      	ldrh	r3, [r7, #12]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d904      	bls.n	80036ac <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80036a2:	89fa      	ldrh	r2, [r7, #14]
 80036a4:	89bb      	ldrh	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	82fb      	strh	r3, [r7, #22]
 80036aa:	e005      	b.n	80036b8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	82fb      	strh	r3, [r7, #22]
 80036b0:	e002      	b.n	80036b8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80036b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b6:	82fb      	strh	r3, [r7, #22]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80036c2:	8afb      	ldrh	r3, [r7, #22]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40002800 	.word	0x40002800

080036d0 <HW_TS_RTC_Int_AppNot>:

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	460b      	mov	r3, r1
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4798      	blx	r3

  return;
 80036e2:	bf00      	nop
}
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_UART_TxCpltCallback+0x30>)
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d000      	beq.n	8003702 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 8003700:	e007      	b.n	8003712 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_UART_TxCpltCallback+0x34>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_UART_TxCpltCallback+0x34>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4798      	blx	r3
            break;
 8003710:	bf00      	nop
    }

    return;
 8003712:	bf00      	nop
}
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40013800 	.word	0x40013800
 8003720:	2000290c 	.word	0x2000290c

08003724 <LL_PWR_SMPS_Enable>:
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <LL_PWR_SMPS_Enable+0x1c>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <LL_PWR_SMPS_Enable+0x1c>)
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	61d3      	str	r3, [r2, #28]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	58000400 	.word	0x58000400

08003744 <LL_PWR_SMPS_SetStartupCurrent>:
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003754:	4904      	ldr	r1, [pc, #16]	; (8003768 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4313      	orrs	r3, r2
 800375a:	61cb      	str	r3, [r1, #28]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	58000400 	.word	0x58000400

0800376c <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f023 020f 	bic.w	r2, r3, #15
 800378e:	4913      	ldr	r1, [pc, #76]	; (80037dc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4313      	orrs	r3, r2
 8003794:	61cb      	str	r3, [r1, #28]
}
 8003796:	e019      	b.n	80037cc <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3b06      	subs	r3, #6
 800379c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4413      	add	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da02      	bge.n	80037b2 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e004      	b.n	80037bc <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	dd01      	ble.n	80037bc <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80037b8:	230f      	movs	r3, #15
 80037ba:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f023 020f 	bic.w	r2, r3, #15
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4905      	ldr	r1, [pc, #20]	; (80037dc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61cb      	str	r3, [r1, #28]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	1fff7558 	.word	0x1fff7558
 80037dc:	58000400 	.word	0x58000400

080037e0 <LL_EXTI_DisableIT_0_31>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <LL_EXTI_DisableIT_0_31+0x28>)
 80037ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4905      	ldr	r1, [pc, #20]	; (8003808 <LL_EXTI_DisableIT_0_31+0x28>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	58000800 	.word	0x58000800

0800380c <LL_EXTI_DisableIT_32_63>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <LL_EXTI_DisableIT_32_63+0x28>)
 8003816:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	43db      	mvns	r3, r3
 800381e:	4905      	ldr	r1, [pc, #20]	; (8003834 <LL_EXTI_DisableIT_32_63+0x28>)
 8003820:	4013      	ands	r3, r2
 8003822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	58000800 	.word	0x58000800

08003838 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8003846:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003852:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	cafecafe 	.word	0xcafecafe

08003874 <LL_RCC_LSE_SetDriveCapability>:
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f023 0218 	bic.w	r2, r3, #24
 8003888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f8:	d101      	bne.n	80038fe <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391e:	d101      	bne.n	8003924 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_AHB1_GRP1_EnableClock>:
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800393e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4313      	orrs	r3, r2
 8003946:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_AHB2_GRP1_EnableClock>:
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4313      	orrs	r3, r2
 8003978:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800397a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_AHB3_GRP1_EnableClock>:
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4013      	ands	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	605a      	str	r2, [r3, #4]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_C1_IPCC_DisableReceiveChannel>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_C2_IPCC_DisableTransmitChannel>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	615a      	str	r2, [r3, #20]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_C2_IPCC_DisableReceiveChannel>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_C2_IPCC_ClearFlag_CHx>:
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	22ff      	movs	r2, #255	; 0xff
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	22ca      	movs	r2, #202	; 0xca
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2253      	movs	r2, #83	; 0x53
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 0207 	bic.w	r2, r3, #7
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <main+0x54>)
 8003af2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003af6:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003af8:	f000 fdca 	bl	8004690 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003afc:	f000 f931 	bl	8003d62 <Reset_Device>
  Config_HSE();
 8003b00:	f000 f91b 	bl	8003d3a <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b04:	f000 f824 	bl	8003b50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8003b08:	f000 f910 	bl	8003d2c <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8003b0c:	f000 f96b 	bl	8003de6 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b10:	f000 f8ff 	bl	8003d12 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b14:	f000 f8e0 	bl	8003cd8 <MX_DMA_Init>
  MX_RF_Init();
 8003b18:	f000 f8a2 	bl	8003c60 <MX_RF_Init>
  MX_RTC_Init();
 8003b1c:	f000 f8a8 	bl	8003c70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003b20:	f005 fef4 	bl	800990c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <main+0x58>)
 8003b26:	2100      	movs	r1, #0
 8003b28:	4807      	ldr	r0, [pc, #28]	; (8003b48 <main+0x5c>)
 8003b2a:	f005 ff59 	bl	80099e0 <osThreadNew>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <main+0x60>)
 8003b32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8003b34:	f7fe fc84 	bl	8002440 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 8003b38:	f005 ff1c 	bl	8009974 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <main+0x50>
 8003b3e:	bf00      	nop
 8003b40:	58004000 	.word	0x58004000
 8003b44:	08010914 	.word	0x08010914
 8003b48:	08003dff 	.word	0x08003dff
 8003b4c:	20002910 	.word	0x20002910

08003b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0ae      	sub	sp, #184	; 0xb8
 8003b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b5a:	2248      	movs	r2, #72	; 0x48
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f009 ff47 	bl	800d9f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
 8003b74:	615a      	str	r2, [r3, #20]
 8003b76:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b78:	1d3b      	adds	r3, r7, #4
 8003b7a:	2250      	movs	r2, #80	; 0x50
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f009 ff37 	bl	800d9f2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b84:	f001 fa28 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f7ff fe73 	bl	8003874 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b8e:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <SystemClock_Config+0x10c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <SystemClock_Config+0x10c>)
 8003b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <SystemClock_Config+0x10c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003baa:	2307      	movs	r3, #7
 8003bac:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fda2 	bl	8005718 <HAL_RCC_OscConfig>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003bda:	f000 f92d 	bl	8003e38 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003bde:	236f      	movs	r3, #111	; 0x6f
 8003be0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003be2:	2302      	movs	r3, #2
 8003be4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003be6:	2300      	movs	r3, #0
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bea:	2300      	movs	r3, #0
 8003bec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f002 f915 	bl	8005e30 <HAL_RCC_ClockConfig>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003c0c:	f000 f914 	bl	8003e38 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8003c10:	f643 0303 	movw	r3, #14339	; 0x3803
 8003c14:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c28:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003c2e:	2310      	movs	r3, #16
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fd56 	bl	80066e6 <HAL_RCCEx_PeriphCLKConfig>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003c40:	f000 f8fa 	bl	8003e38 <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7ff fd7d 	bl	8003744 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8003c4a:	2004      	movs	r0, #4
 8003c4c:	f7ff fd8e 	bl	800376c <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8003c50:	f7ff fd68 	bl	8003724 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 8003c54:	bf00      	nop
 8003c56:	37b8      	adds	r7, #184	; 0xb8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	58000400 	.word	0x58000400

08003c60 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c74:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <MX_RTC_Init+0x64>)
 8003c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003c82:	220f      	movs	r2, #15
 8003c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003c88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003c8c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ca6:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <MX_RTC_Init+0x60>)
 8003ca8:	f002 ffa3 	bl	8006bf2 <HAL_RTC_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003cb2:	f000 f8c1 	bl	8003e38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8003cb6:	4807      	ldr	r0, [pc, #28]	; (8003cd4 <MX_RTC_Init+0x64>)
 8003cb8:	f7ff fef4 	bl	8003aa4 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4805      	ldr	r0, [pc, #20]	; (8003cd4 <MX_RTC_Init+0x64>)
 8003cc0:	f7ff ff00 	bl	8003ac4 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8003cc4:	4803      	ldr	r0, [pc, #12]	; (8003cd4 <MX_RTC_Init+0x64>)
 8003cc6:	f7ff fee0 	bl	8003a8a <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20002a8c 	.word	0x20002a8c
 8003cd4:	40002800 	.word	0x40002800

08003cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003cdc:	2004      	movs	r0, #4
 8003cde:	f7ff fe27 	bl	8003930 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7ff fe24 	bl	8003930 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ce8:	2002      	movs	r0, #2
 8003cea:	f7ff fe21 	bl	8003930 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	210f      	movs	r1, #15
 8003cf2:	200e      	movs	r0, #14
 8003cf4:	f000 fe40 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003cf8:	200e      	movs	r0, #14
 8003cfa:	f000 fe57 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	210f      	movs	r1, #15
 8003d02:	203a      	movs	r0, #58	; 0x3a
 8003d04:	f000 fe38 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8003d08:	203a      	movs	r0, #58	; 0x3a
 8003d0a:	f000 fe4f 	bl	80049ac <HAL_NVIC_EnableIRQ>

}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d16:	2004      	movs	r0, #4
 8003d18:	f7ff fe23 	bl	8003962 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f7ff fe20 	bl	8003962 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d22:	2002      	movs	r0, #2
 8003d24:	f7ff fe1d 	bl	8003962 <LL_AHB2_GRP1_EnableClock>

}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8003d30:	bf00      	nop
}
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8003d40:	2000      	movs	r0, #0
 8003d42:	f005 fcff 	bl	8009744 <OTP_Read>
 8003d46:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	799b      	ldrb	r3, [r3, #6]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fd70 	bl	8003838 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
}  
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <Reset_Device>:


static void Reset_Device( void )
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8003d66:	f000 f827 	bl	8003db8 <Reset_BackupDomain>

	Reset_IPCC();
 8003d6a:	f000 f803 	bl	8003d74 <Reset_IPCC>
#endif

	return;
 8003d6e:	bf00      	nop
}
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8003d78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003d7c:	f7ff fe0a 	bl	8003994 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8003d80:	213f      	movs	r1, #63	; 0x3f
 8003d82:	480c      	ldr	r0, [pc, #48]	; (8003db4 <Reset_IPCC+0x40>)
 8003d84:	f7ff fe65 	bl	8003a52 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8003d88:	213f      	movs	r1, #63	; 0x3f
 8003d8a:	480a      	ldr	r0, [pc, #40]	; (8003db4 <Reset_IPCC+0x40>)
 8003d8c:	f7ff fe6f 	bl	8003a6e <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8003d90:	213f      	movs	r1, #63	; 0x3f
 8003d92:	4808      	ldr	r0, [pc, #32]	; (8003db4 <Reset_IPCC+0x40>)
 8003d94:	f7ff fe17 	bl	80039c6 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8003d98:	213f      	movs	r1, #63	; 0x3f
 8003d9a:	4806      	ldr	r0, [pc, #24]	; (8003db4 <Reset_IPCC+0x40>)
 8003d9c:	f7ff fe36 	bl	8003a0c <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8003da0:	213f      	movs	r1, #63	; 0x3f
 8003da2:	4804      	ldr	r0, [pc, #16]	; (8003db4 <Reset_IPCC+0x40>)
 8003da4:	f7ff fe21 	bl	80039ea <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8003da8:	213f      	movs	r1, #63	; 0x3f
 8003daa:	4802      	ldr	r0, [pc, #8]	; (8003db4 <Reset_IPCC+0x40>)
 8003dac:	f7ff fe40 	bl	8003a30 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8003db0:	bf00      	nop
}
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	58000c00 	.word	0x58000c00

08003db8 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8003dbc:	f7ff fd92 	bl	80038e4 <LL_RCC_IsActiveFlag_PINRST>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <Reset_BackupDomain+0x2a>
 8003dc6:	f7ff fda0 	bl	800390a <LL_RCC_IsActiveFlag_SFTRST>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d108      	bne.n	8003de2 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003dd0:	f001 f902 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8003dd4:	f001 f900 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8003dd8:	f7ff fd62 	bl	80038a0 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8003ddc:	f7ff fd71 	bl	80038c2 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
}
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <Init_Exti>:

static void Init_Exti( void )
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8003dea:	f04f 30ff 	mov.w	r0, #4294967295
 8003dee:	f7ff fcf7 	bl	80037e0 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8003df2:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8003df6:	f7ff fd09 	bl	800380c <LL_EXTI_DisableIT_32_63>

  return;
 8003dfa:	bf00      	nop
}
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8003e06:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f005 feef 	bl	8009bf0 <osThreadFlagsWait>
 8003e12:	e7f8      	b.n	8003e06 <StartDefaultTask+0x8>

08003e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e26:	f000 fc53 	bl	80046d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40014800 	.word	0x40014800

08003e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <LL_PWR_SetPowerMode>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <LL_PWR_SetPowerMode+0x24>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 0207 	bic.w	r2, r3, #7
 8003e58:	4904      	ldr	r1, [pc, #16]	; (8003e6c <LL_PWR_SetPowerMode+0x24>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	58000400 	.word	0x58000400

08003e70 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <LL_PWR_ClearFlag_WU+0x14>)
 8003e76:	221f      	movs	r2, #31
 8003e78:	619a      	str	r2, [r3, #24]
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	58000400 	.word	0x58000400

08003e88 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9a:	d101      	bne.n	8003ea0 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	58000400 	.word	0x58000400

08003eb0 <LL_RCC_HSE_Enable>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_RCC_HSE_IsReady>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee0:	d101      	bne.n	8003ee6 <LL_RCC_HSE_IsReady+0x18>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_RCC_HSE_IsReady+0x1a>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_RCC_HSI_Enable>:
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_HSI_IsReady>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f22:	d101      	bne.n	8003f28 <LL_RCC_HSI_IsReady+0x18>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_RCC_HSI_IsReady+0x1a>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_RCC_SetSysClkSource>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f023 0203 	bic.w	r2, r3, #3
 8003f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	608b      	str	r3, [r1, #8]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_GetSysClkSource>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_SetSMPSClockSource>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <LL_LPM_EnableSleep+0x1c>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <LL_LPM_EnableSleep+0x1c>)
 8003fa6:	f023 0304 	bic.w	r3, r3, #4
 8003faa:	6113      	str	r3, [r2, #16]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <LL_LPM_EnableDeepSleep+0x1c>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <LL_LPM_EnableDeepSleep+0x1c>)
 8003fc6:	f043 0304 	orr.w	r3, r3, #4
 8003fca:	6113      	str	r3, [r2, #16]
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	3220      	adds	r2, #32
 8003fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff0:	4a05      	ldr	r2, [pc, #20]	; (8004008 <LL_HSEM_1StepLock+0x2c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d001      	beq.n	8003ffa <LL_HSEM_1StepLock+0x1e>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <LL_HSEM_1StepLock+0x20>
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	80000400 	.word	0x80000400

0800400c <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8004032:	b580      	push	{r7, lr}
 8004034:	af00      	add	r7, sp, #0
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 8004036:	f7ff ff1b 	bl	8003e70 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 800403a:	2003      	movs	r0, #3
 800403c:	f7ff ff04 	bl	8003e48 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8004040:	f7ff ffbc 	bl	8003fbc <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI( );
 8004044:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}

0800404a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */
  /**
   * This function is called from CRITICAL SECTION
   */
  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 800405c:	bf00      	nop
 800405e:	2103      	movs	r1, #3
 8004060:	4814      	ldr	r0, [pc, #80]	; (80040b4 <PWR_EnterStopMode+0x5c>)
 8004062:	f7ff ffbb 	bl	8003fdc <LL_HSEM_1StepLock>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f8      	bne.n	800405e <PWR_EnterStopMode+0x6>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 800406c:	2104      	movs	r1, #4
 800406e:	4811      	ldr	r0, [pc, #68]	; (80040b4 <PWR_EnterStopMode+0x5c>)
 8004070:	f7ff ffb4 	bl	8003fdc <LL_HSEM_1StepLock>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10c      	bne.n	8004094 <PWR_EnterStopMode+0x3c>
  {
    if( LL_PWR_IsActiveFlag_C2DS( ) )
 800407a:	f7ff ff05 	bl	8003e88 <LL_PWR_IsActiveFlag_C2DS>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <PWR_EnterStopMode+0x40>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8004084:	2200      	movs	r2, #0
 8004086:	2104      	movs	r1, #4
 8004088:	480a      	ldr	r0, [pc, #40]	; (80040b4 <PWR_EnterStopMode+0x5c>)
 800408a:	f7ff ffbf 	bl	800400c <LL_HSEM_ReleaseLock>

      /**
       * The switch on HSI before entering Stop Mode is required 
       */
      Switch_On_HSI( );
 800408e:	f000 f84f 	bl	8004130 <Switch_On_HSI>
 8004092:	e001      	b.n	8004098 <PWR_EnterStopMode+0x40>
  else
  {
    /**
     * The switch on HSI before entering Stop Mode is required 
     */
    Switch_On_HSI( );
 8004094:	f000 f84c 	bl	8004130 <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8004098:	2200      	movs	r2, #0
 800409a:	2103      	movs	r1, #3
 800409c:	4805      	ldr	r0, [pc, #20]	; (80040b4 <PWR_EnterStopMode+0x5c>)
 800409e:	f7ff ffb5 	bl	800400c <LL_HSEM_ReleaseLock>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 80040a2:	2002      	movs	r0, #2
 80040a4:	f7ff fed0 	bl	8003e48 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80040a8:	f7ff ff88 	bl	8003fbc <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 80040ac:	bf30      	wfi
/* USER CODE END PWR_EnterStopMode */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	58001400 	.word	0x58001400

080040b8 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 80040bc:	2200      	movs	r2, #0
 80040be:	2104      	movs	r1, #4
 80040c0:	4813      	ldr	r0, [pc, #76]	; (8004110 <PWR_ExitStopMode+0x58>)
 80040c2:	f7ff ffa3 	bl	800400c <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 80040c6:	bf00      	nop
 80040c8:	2103      	movs	r1, #3
 80040ca:	4811      	ldr	r0, [pc, #68]	; (8004110 <PWR_ExitStopMode+0x58>)
 80040cc:	f7ff ff86 	bl	8003fdc <LL_HSEM_1StepLock>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f8      	bne.n	80040c8 <PWR_ExitStopMode+0x10>

  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80040d6:	f7ff ff41 	bl	8003f5c <LL_RCC_GetSysClkSource>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d110      	bne.n	8004102 <PWR_ExitStopMode+0x4a>
  {
    LL_RCC_HSE_Enable( );
 80040e0:	f7ff fee6 	bl	8003eb0 <LL_RCC_HSE_Enable>
    while(!LL_RCC_HSE_IsReady( ));
 80040e4:	bf00      	nop
 80040e6:	f7ff fef2 	bl	8003ece <LL_RCC_HSE_IsReady>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0fa      	beq.n	80040e6 <PWR_ExitStopMode+0x2e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80040f0:	2002      	movs	r0, #2
 80040f2:	f7ff ff1f 	bl	8003f34 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 80040f6:	bf00      	nop
 80040f8:	f7ff ff30 	bl	8003f5c <LL_RCC_GetSysClkSource>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d1fa      	bne.n	80040f8 <PWR_ExitStopMode+0x40>
     * there is nothing to do here
     */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8004102:	2200      	movs	r2, #0
 8004104:	2103      	movs	r1, #3
 8004106:	4802      	ldr	r0, [pc, #8]	; (8004110 <PWR_ExitStopMode+0x58>)
 8004108:	f7ff ff80 	bl	800400c <LL_HSEM_ReleaseLock>
/* USER CODE END PWR_ExitStopMode */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}
 8004110:	58001400 	.word	0x58001400

08004114 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
   */

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8004118:	f7ff ff40 	bl	8003f9c <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 800411c:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}

08004122 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  /**
   * When tickless FreeRTOS is used, the systick is fully managed in the file freertos_port.c
   * It shall not be either started or stop in this API
   */
/* USER CODE END PWR_ExitSleepMode */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8004134:	f7ff fedd 	bl	8003ef2 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8004138:	bf00      	nop
 800413a:	f7ff fee9 	bl	8003f10 <LL_RCC_HSI_IsReady>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0fa      	beq.n	800413a <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8004144:	2001      	movs	r0, #1
 8004146:	f7ff fef5 	bl	8003f34 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800414a:	2000      	movs	r0, #0
 800414c:	f7ff ff12 	bl	8003f74 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8004150:	bf00      	nop
 8004152:	f7ff ff03 	bl	8003f5c <LL_RCC_GetSysClkSource>
 8004156:	4603      	mov	r3, r0
 8004158:	2b04      	cmp	r3, #4
 800415a:	d1fa      	bne.n	8004152 <Switch_On_HSI+0x22>
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}

08004160 <LL_RCC_SetRTCClockSource>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <LL_RCC_EnableRTC>:
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800419c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_AHB3_GRP1_EnableClock>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4013      	ands	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_APB1_GRP1_EnableClock>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8004216:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800421a:	f7ff ffc8 	bl	80041ae <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	210f      	movs	r1, #15
 8004222:	f06f 0001 	mvn.w	r0, #1
 8004226:	f000 fba7 	bl	8004978 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	2105      	movs	r1, #5
 800422e:	202e      	movs	r0, #46	; 0x2e
 8004230:	f000 fba2 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004234:	202e      	movs	r0, #46	; 0x2e
 8004236:	f000 fbb9 	bl	80049ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	2106      	movs	r1, #6
 800423e:	202c      	movs	r0, #44	; 0x2c
 8004240:	f000 fb9a 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8004244:	2200      	movs	r2, #0
 8004246:	2106      	movs	r1, #6
 8004248:	202d      	movs	r0, #45	; 0x2d
 800424a:	f000 fb95 	bl	8004978 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <HAL_RTC_MspInit+0x3c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d110      	bne.n	8004288 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8004266:	f000 feb7 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800426a:	f000 feb5 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800426e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004272:	f7ff ff75 	bl	8004160 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004276:	f7ff ff89 	bl	800418c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800427a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800427e:	f7ff ffaf 	bl	80041e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f002 ff35 	bl	80070f2 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40002800 	.word	0x40002800

08004294 <LL_APB2_GRP1_EnableClock>:
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80042ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4013      	ands	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042b8:	68fb      	ldr	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80042d8:	2200      	movs	r2, #0
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	201a      	movs	r0, #26
 80042de:	f000 fb4b 	bl	8004978 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80042e2:	201a      	movs	r0, #26
 80042e4:	f000 fb62 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80042e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80042ec:	f7ff ffd2 	bl	8004294 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042f0:	f107 0208 	add.w	r2, r7, #8
 80042f4:	f107 030c 	add.w	r3, r7, #12
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 ff6c 	bl	80061d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004300:	f001 ff54 	bl	80061ac <HAL_RCC_GetPCLK2Freq>
 8004304:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	4a12      	ldr	r2, [pc, #72]	; (8004354 <HAL_InitTick+0x8c>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	0c9b      	lsrs	r3, r3, #18
 8004310:	3b01      	subs	r3, #1
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_InitTick+0x90>)
 8004316:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_InitTick+0x94>)
 8004318:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_InitTick+0x90>)
 800431c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004320:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004322:	4a0d      	ldr	r2, [pc, #52]	; (8004358 <HAL_InitTick+0x90>)
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_InitTick+0x90>)
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_InitTick+0x90>)
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8004334:	4808      	ldr	r0, [pc, #32]	; (8004358 <HAL_InitTick+0x90>)
 8004336:	f002 ff12 	bl	800715e <HAL_TIM_Base_Init>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8004340:	4805      	ldr	r0, [pc, #20]	; (8004358 <HAL_InitTick+0x90>)
 8004342:	f002 ff6d 	bl	8007220 <HAL_TIM_Base_Start_IT>
 8004346:	4603      	mov	r3, r0
 8004348:	e000      	b.n	800434c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
}
 800434c:	4618      	mov	r0, r3
 800434e:	3730      	adds	r7, #48	; 0x30
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	431bde83 	.word	0x431bde83
 8004358:	20002b10 	.word	0x20002b10
 800435c:	40014800 	.word	0x40014800

08004360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004372:	e7fe      	b.n	8004372 <HardFault_Handler+0x4>

08004374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004378:	e7fe      	b.n	8004378 <MemManage_Handler+0x4>

0800437a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800437e:	e7fe      	b.n	800437e <BusFault_Handler+0x4>

08004380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004384:	e7fe      	b.n	8004384 <UsageFault_Handler+0x4>

08004386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004386:	b480      	push	{r7}
 8004388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <DMA1_Channel4_IRQHandler+0x10>)
 800439a:	f000 fb9e 	bl	8004ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20002ab0 	.word	0x20002ab0

080043a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80043ae:	f002 ff85 	bl	80072bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20002b10 	.word	0x20002b10

080043bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043c0:	4802      	ldr	r0, [pc, #8]	; (80043cc <USART1_IRQHandler+0x10>)
 80043c2:	f003 f945 	bl	8007650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20002a00 	.word	0x20002a00

080043d0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80043d4:	4802      	ldr	r0, [pc, #8]	; (80043e0 <LPUART1_IRQHandler+0x10>)
 80043d6:	f003 f93b 	bl	8007650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20002914 	.word	0x20002914

080043e4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80043e8:	f000 fdd2 	bl	8004f90 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80043f4:	4802      	ldr	r0, [pc, #8]	; (8004400 <DMA2_Channel4_IRQHandler+0x10>)
 80043f6:	f000 fb70 	bl	8004ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200029a0 	.word	0x200029a0

08004404 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8004408:	2010      	movs	r0, #16
 800440a:	f000 fd9d 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}

08004412 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8004416:	2001      	movs	r0, #1
 8004418:	f000 fd96 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}

08004420 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8004424:	2002      	movs	r0, #2
 8004426:	f000 fd8f 	bl	8004f48 <HAL_GPIO_EXTI_IRQHandler>
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}

0800442e <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8004432:	f7fe fddf 	bl	8002ff4 <HW_TS_RTC_Wakeup_Handler>
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}

0800443a <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 800443e:	f7fd fd3b 	bl	8001eb8 <HW_IPCC_Tx_Handler>

  return;
 8004442:	bf00      	nop
}
 8004444:	bd80      	pop	{r7, pc}

08004446 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800444a:	f7fd fcfd 	bl	8001e48 <HW_IPCC_Rx_Handler>
  return;
 800444e:	bf00      	nop
}
 8004450:	bd80      	pop	{r7, pc}

08004452 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e00a      	b.n	800447a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004464:	f3af 8000 	nop.w
 8004468:	4601      	mov	r1, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	60ba      	str	r2, [r7, #8]
 8004470:	b2ca      	uxtb	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3301      	adds	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	dbf0      	blt.n	8004464 <_read+0x12>
	}

return len;
 8004482:	687b      	ldr	r3, [r7, #4]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e009      	b.n	80044b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	60ba      	str	r2, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3301      	adds	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	dbf1      	blt.n	800449e <_write+0x12>
	}
	return len;
 80044ba:	687b      	ldr	r3, [r7, #4]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <_close>:

int _close(int file)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	return -1;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044ec:	605a      	str	r2, [r3, #4]
	return 0;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_isatty>:

int _isatty(int file)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	return 1;
 8004504:	2301      	movs	r3, #1
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
	return 0;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <_sbrk+0x50>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <_sbrk+0x16>
		heap_end = &end;
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <_sbrk+0x50>)
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <_sbrk+0x54>)
 8004540:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004542:	4b0e      	ldr	r3, [pc, #56]	; (800457c <_sbrk+0x50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <_sbrk+0x50>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	466a      	mov	r2, sp
 8004552:	4293      	cmp	r3, r2
 8004554:	d907      	bls.n	8004566 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004556:	f009 fa17 	bl	800d988 <__errno>
 800455a:	4602      	mov	r2, r0
 800455c:	230c      	movs	r3, #12
 800455e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004560:	f04f 33ff 	mov.w	r3, #4294967295
 8004564:	e006      	b.n	8004574 <_sbrk+0x48>
	}

	heap_end += incr;
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <_sbrk+0x50>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	4a03      	ldr	r2, [pc, #12]	; (800457c <_sbrk+0x50>)
 8004570:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	200003ec 	.word	0x200003ec
 8004580:	20002ba8 	.word	0x20002ba8

08004584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004588:	4b26      	ldr	r3, [pc, #152]	; (8004624 <SystemInit+0xa0>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800458e:	4b25      	ldr	r3, [pc, #148]	; (8004624 <SystemInit+0xa0>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	4a23      	ldr	r2, [pc, #140]	; (8004624 <SystemInit+0xa0>)
 8004596:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800459a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800459e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80045b6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80045b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045c2:	4b19      	ldr	r3, [pc, #100]	; (8004628 <SystemInit+0xa4>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d4:	f023 0305 	bic.w	r3, r3, #5
 80045d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80045dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	4a0d      	ldr	r2, [pc, #52]	; (800462c <SystemInit+0xa8>)
 80045f6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80045f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <SystemInit+0xa8>)
 80045fe:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004614:	2200      	movs	r2, #0
 8004616:	619a      	str	r2, [r3, #24]
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000ed00 	.word	0xe000ed00
 8004628:	faf6fefb 	.word	0xfaf6fefb
 800462c:	22041000 	.word	0x22041000

08004630 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a04      	ldr	r2, [pc, #16]	; (800464c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6053      	str	r3, [r2, #4]
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e0042000 	.word	0xe0042000

08004650 <LL_DBGMCU_DisableDBGStopMode>:
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800465a:	f023 0302 	bic.w	r3, r3, #2
 800465e:	6053      	str	r3, [r2, #4]
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e0042000 	.word	0xe0042000

08004670 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800467a:	f023 0304 	bic.w	r3, r3, #4
 800467e:	6053      	str	r3, [r2, #4]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e0042000 	.word	0xe0042000

08004690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_Init+0x3c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_Init+0x3c>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046a6:	2003      	movs	r0, #3
 80046a8:	f000 f95b 	bl	8004962 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7ff fe0b 	bl	80042c8 <HAL_InitTick>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	71fb      	strb	r3, [r7, #7]
 80046bc:	e001      	b.n	80046c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046be:	f7ff fda8 	bl	8004212 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046c2:	79fb      	ldrb	r3, [r7, #7]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	58004000 	.word	0x58004000

080046d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_IncTick+0x20>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_IncTick+0x24>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HAL_IncTick+0x24>)
 80046e2:	6013      	str	r3, [r2, #0]
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	2000001c 	.word	0x2000001c
 80046f4:	20002b5c 	.word	0x20002b5c

080046f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return uwTick;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_GetTick+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20002b5c 	.word	0x20002b5c

08004710 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <HAL_GetTickPrio+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000018 	.word	0x20000018

08004728 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800472c:	f7ff ff80 	bl	8004630 <LL_DBGMCU_DisableDBGSleepMode>
}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8004738:	f7ff ff8a 	bl	8004650 <LL_DBGMCU_DisableDBGStopMode>
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8004744:	f7ff ff94 	bl	8004670 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}

0800474c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477e:	4a04      	ldr	r2, [pc, #16]	; (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	60d3      	str	r3, [r2, #12]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <__NVIC_GetPriorityGrouping+0x18>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0307 	and.w	r3, r3, #7
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	db0b      	blt.n	80047da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4907      	ldr	r1, [pc, #28]	; (80047e8 <__NVIC_EnableIRQ+0x38>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2001      	movs	r0, #1
 80047d2:	fa00 f202 	lsl.w	r2, r0, r2
 80047d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	db10      	blt.n	8004820 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	f003 021f 	and.w	r2, r3, #31
 8004804:	4909      	ldr	r1, [pc, #36]	; (800482c <__NVIC_DisableIRQ+0x40>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2001      	movs	r0, #1
 800480e:	fa00 f202 	lsl.w	r2, r0, r2
 8004812:	3320      	adds	r3, #32
 8004814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800481c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000e100 	.word	0xe000e100

08004830 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	db0c      	blt.n	800485c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	4907      	ldr	r1, [pc, #28]	; (8004868 <__NVIC_SetPendingIRQ+0x38>)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2001      	movs	r0, #1
 8004852:	fa00 f202 	lsl.w	r2, r0, r2
 8004856:	3340      	adds	r3, #64	; 0x40
 8004858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000e100 	.word	0xe000e100

0800486c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db0c      	blt.n	8004898 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <__NVIC_ClearPendingIRQ+0x38>)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2001      	movs	r0, #1
 800488e:	fa00 f202 	lsl.w	r2, r0, r2
 8004892:	3360      	adds	r3, #96	; 0x60
 8004894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000e100 	.word	0xe000e100

080048a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	6039      	str	r1, [r7, #0]
 80048b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	db0a      	blt.n	80048d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	490c      	ldr	r1, [pc, #48]	; (80048f4 <__NVIC_SetPriority+0x4c>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	0112      	lsls	r2, r2, #4
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	440b      	add	r3, r1
 80048cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d0:	e00a      	b.n	80048e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4908      	ldr	r1, [pc, #32]	; (80048f8 <__NVIC_SetPriority+0x50>)
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	3b04      	subs	r3, #4
 80048e0:	0112      	lsls	r2, r2, #4
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	440b      	add	r3, r1
 80048e6:	761a      	strb	r2, [r3, #24]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000e100 	.word	0xe000e100
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f1c3 0307 	rsb	r3, r3, #7
 8004916:	2b04      	cmp	r3, #4
 8004918:	bf28      	it	cs
 800491a:	2304      	movcs	r3, #4
 800491c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3304      	adds	r3, #4
 8004922:	2b06      	cmp	r3, #6
 8004924:	d902      	bls.n	800492c <NVIC_EncodePriority+0x30>
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3b03      	subs	r3, #3
 800492a:	e000      	b.n	800492e <NVIC_EncodePriority+0x32>
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	f04f 32ff 	mov.w	r2, #4294967295
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	401a      	ands	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004944:	f04f 31ff 	mov.w	r1, #4294967295
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	43d9      	mvns	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004954:	4313      	orrs	r3, r2
         );
}
 8004956:	4618      	mov	r0, r3
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff feee 	bl	800474c <__NVIC_SetPriorityGrouping>
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004986:	f7ff ff05 	bl	8004794 <__NVIC_GetPriorityGrouping>
 800498a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	6978      	ldr	r0, [r7, #20]
 8004992:	f7ff ffb3 	bl	80048fc <NVIC_EncodePriority>
 8004996:	4602      	mov	r2, r0
 8004998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff ff82 	bl	80048a8 <__NVIC_SetPriority>
}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fef8 	bl	80047b0 <__NVIC_EnableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff ff08 	bl	80047ec <__NVIC_DisableIRQ>
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ff1c 	bl	8004830 <__NVIC_SetPendingIRQ>
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ff2c 	bl	800486c <__NVIC_ClearPendingIRQ>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d005      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2204      	movs	r2, #4
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e047      	b.n	8004ad0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 020e 	bic.w	r2, r2, #14
 8004a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	f003 021c 	and.w	r2, r3, #28
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004aae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
    }
  }
  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f003 031c 	and.w	r3, r3, #28
 8004afa:	2204      	movs	r2, #4
 8004afc:	409a      	lsls	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d026      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x7a>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d021      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0204 	bic.w	r2, r2, #4
 8004b2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f003 021c 	and.w	r2, r3, #28
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2104      	movs	r1, #4
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d071      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b52:	e06c      	b.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	f003 031c 	and.w	r3, r3, #28
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02e      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xec>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d029      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 020a 	bic.w	r2, r2, #10
 8004b8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	f003 021c 	and.w	r2, r3, #28
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8004baa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d038      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004bc4:	e033      	b.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	f003 031c 	and.w	r3, r3, #28
 8004bce:	2208      	movs	r2, #8
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02a      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x156>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d025      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 020e 	bic.w	r2, r2, #14
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	f003 021c 	and.w	r2, r3, #28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
}
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c46:	e14c      	b.n	8004ee2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	fa01 f303 	lsl.w	r3, r1, r3
 8004c54:	4013      	ands	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 813e 	beq.w	8004edc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d00b      	beq.n	8004c80 <HAL_GPIO_Init+0x48>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d007      	beq.n	8004c80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c74:	2b11      	cmp	r3, #17
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b12      	cmp	r3, #18
 8004c7e:	d130      	bne.n	8004ce2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 0201 	and.w	r2, r3, #1
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	2203      	movs	r2, #3
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0xea>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b12      	cmp	r3, #18
 8004d20:	d123      	bne.n	8004d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	08da      	lsrs	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3208      	adds	r2, #8
 8004d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	220f      	movs	r2, #15
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4013      	ands	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	08da      	lsrs	r2, r3, #3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3208      	adds	r2, #8
 8004d64:	6939      	ldr	r1, [r7, #16]
 8004d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	2203      	movs	r2, #3
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0203 	and.w	r2, r3, #3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8098 	beq.w	8004edc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004dac:	4a54      	ldr	r2, [pc, #336]	; (8004f00 <HAL_GPIO_Init+0x2c8>)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	3302      	adds	r3, #2
 8004db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dd6:	d019      	beq.n	8004e0c <HAL_GPIO_Init+0x1d4>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <HAL_GPIO_Init+0x2cc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <HAL_GPIO_Init+0x1d0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a49      	ldr	r2, [pc, #292]	; (8004f08 <HAL_GPIO_Init+0x2d0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00d      	beq.n	8004e04 <HAL_GPIO_Init+0x1cc>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a48      	ldr	r2, [pc, #288]	; (8004f0c <HAL_GPIO_Init+0x2d4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <HAL_GPIO_Init+0x1c8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a47      	ldr	r2, [pc, #284]	; (8004f10 <HAL_GPIO_Init+0x2d8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d101      	bne.n	8004dfc <HAL_GPIO_Init+0x1c4>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	e008      	b.n	8004e0e <HAL_GPIO_Init+0x1d6>
 8004dfc:	2307      	movs	r3, #7
 8004dfe:	e006      	b.n	8004e0e <HAL_GPIO_Init+0x1d6>
 8004e00:	2303      	movs	r3, #3
 8004e02:	e004      	b.n	8004e0e <HAL_GPIO_Init+0x1d6>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e002      	b.n	8004e0e <HAL_GPIO_Init+0x1d6>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_GPIO_Init+0x1d6>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	f002 0203 	and.w	r2, r2, #3
 8004e14:	0092      	lsls	r2, r2, #2
 8004e16:	4093      	lsls	r3, r2
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e1e:	4938      	ldr	r1, [pc, #224]	; (8004f00 <HAL_GPIO_Init+0x2c8>)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	3302      	adds	r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e2c:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e52:	4a30      	ldr	r2, [pc, #192]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e80:	4a24      	ldr	r2, [pc, #144]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e88:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ed6:	4a0f      	ldr	r2, [pc, #60]	; (8004f14 <HAL_GPIO_Init+0x2dc>)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f47f aeab 	bne.w	8004c48 <HAL_GPIO_Init+0x10>
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	48000400 	.word	0x48000400
 8004f08:	48000800 	.word	0x48000800
 8004f0c:	48000c00 	.word	0x48000c00
 8004f10:	48001000 	.word	0x48001000
 8004f14:	58000800 	.word	0x58000800

08004f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
 8004f24:	4613      	mov	r3, r2
 8004f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f28:	787b      	ldrb	r3, [r7, #1]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f2e:	887a      	ldrh	r2, [r7, #2]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f34:	e002      	b.n	8004f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f36:	887a      	ldrh	r2, [r7, #2]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f806 	bl	8004f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	58000800 	.word	0x58000800

08004f78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <HAL_HSEM_IRQHandler+0x30>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004f9c:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_HSEM_IRQHandler+0x30>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <HAL_HSEM_IRQHandler+0x30>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004faa:	4a05      	ldr	r2, [pc, #20]	; (8004fc0 <HAL_HSEM_IRQHandler+0x30>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f807 	bl	8004fc4 <HAL_HSEM_FreeCallback>
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	58001500 	.word	0x58001500

08004fc4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	58000400 	.word	0x58000400

08004ff8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	58000400 	.word	0x58000400

08005014 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005026:	d101      	bne.n	800502c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_RCC_HSE_Enable>:
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <LL_RCC_HSE_Disable>:
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005068:	6013      	str	r3, [r2, #0]
}
 800506a:	bf00      	nop
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_HSE_IsReady>:
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005086:	d101      	bne.n	800508c <LL_RCC_HSE_IsReady+0x18>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <LL_RCC_HSE_IsReady+0x1a>
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <LL_RCC_HSI_Enable>:
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050aa:	6013      	str	r3, [r2, #0]
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <LL_RCC_HSI_Disable>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80050ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <LL_RCC_HSI_IsReady>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d101      	bne.n	80050ec <LL_RCC_HSI_IsReady+0x18>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <LL_RCC_HSI_IsReady+0x1a>
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_RCC_HSI48_Enable>:
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800512e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800513a:	bf00      	nop
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_RCC_HSI48_Disable>:
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <LL_RCC_HSI48_IsReady>:
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d101      	bne.n	800517e <LL_RCC_HSI48_IsReady+0x18>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <LL_RCC_HSI48_IsReady+0x1a>
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <LL_RCC_LSE_Enable>:
{
 800518a:	b480      	push	{r7}
 800518c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800518e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_RCC_LSE_Disable>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_RCC_LSE_EnableBypass>:
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051de:	f043 0304 	orr.w	r3, r3, #4
 80051e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051e6:	bf00      	nop
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <LL_RCC_LSE_DisableBypass>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005200:	f023 0304 	bic.w	r3, r3, #4
 8005204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <LL_RCC_LSE_IsReady>:
{
 8005212:	b480      	push	{r7}
 8005214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d101      	bne.n	800522a <LL_RCC_LSE_IsReady+0x18>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <LL_RCC_LSE_IsReady+0x1a>
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <LL_RCC_LSI1_Enable>:
{
 8005236:	b480      	push	{r7}
 8005238:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800523a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800524e:	bf00      	nop
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_RCC_LSI1_Disable>:
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005270:	bf00      	nop
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <LL_RCC_LSI1_IsReady>:
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d101      	bne.n	8005292 <LL_RCC_LSI1_IsReady+0x18>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <LL_RCC_LSI1_IsReady+0x1a>
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <LL_RCC_LSI2_Enable>:
{
 800529e:	b480      	push	{r7}
 80052a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052b6:	bf00      	nop
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_RCC_LSI2_Disable>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80052c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_RCC_LSI2_IsReady>:
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d101      	bne.n	80052fa <LL_RCC_LSI2_IsReady+0x18>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <LL_RCC_LSI2_IsReady+0x1a>
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <LL_RCC_LSI2_SetTrimming>:
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005316:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <LL_RCC_MSI_Enable>:
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6013      	str	r3, [r2, #0]
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <LL_RCC_MSI_Disable>:
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	6013      	str	r3, [r2, #0]
}
 8005366:	bf00      	nop
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <LL_RCC_MSI_IsReady>:
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d101      	bne.n	8005386 <LL_RCC_MSI_IsReady+0x16>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <LL_RCC_MSI_IsReady+0x18>
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <LL_RCC_MSI_SetRange>:
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800539a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <LL_RCC_MSI_GetRange>:
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2bb0      	cmp	r3, #176	; 0xb0
 80053d0:	d901      	bls.n	80053d6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80053d2:	23b0      	movs	r3, #176	; 0xb0
 80053d4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80053d6:	687b      	ldr	r3, [r7, #4]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053fe:	4313      	orrs	r3, r2
 8005400:	604b      	str	r3, [r1, #4]
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <LL_RCC_SetSysClkSource>:
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f023 0203 	bic.w	r2, r3, #3
 8005420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_RCC_GetSysClkSource>:
{
 8005436:	b480      	push	{r7}
 8005438:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800543a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 030c 	and.w	r3, r3, #12
}
 8005444:	4618      	mov	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_RCC_SetAHBPrescaler>:
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800547e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005482:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_SetAHB4Prescaler>:
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054b2:	f023 020f 	bic.w	r2, r3, #15
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <LL_RCC_SetAPB1Prescaler>:
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80054d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <LL_RCC_SetAPB2Prescaler>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800550a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4313      	orrs	r3, r2
 8005512:	608b      	str	r3, [r1, #8]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_RCC_GetAHBPrescaler>:
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800552e:	4618      	mov	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <LL_C2_RCC_GetAHBPrescaler>:
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005540:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_RCC_GetAHB4Prescaler>:
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <LL_RCC_GetAPB1Prescaler>:
{
 800556e:	b480      	push	{r7}
 8005570:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_RCC_GetAPB2Prescaler>:
{
 8005586:	b480      	push	{r7}
 8005588:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800558a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <LL_RCC_PLL_Enable>:
{
 800559e:	b480      	push	{r7}
 80055a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b0:	6013      	str	r3, [r2, #0]
}
 80055b2:	bf00      	nop
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <LL_RCC_PLL_Disable>:
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80055c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ce:	6013      	str	r3, [r2, #0]
}
 80055d0:	bf00      	nop
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_RCC_PLL_IsReady>:
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80055de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ec:	d101      	bne.n	80055f2 <LL_RCC_PLL_IsReady+0x18>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <LL_RCC_PLL_IsReady+0x1a>
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <LL_RCC_PLL_GetN>:
{
 80055fe:	b480      	push	{r7}
 8005600:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	0a1b      	lsrs	r3, r3, #8
 800560a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800560e:	4618      	mov	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_RCC_PLL_GetR>:
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800561c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005626:	4618      	mov	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <LL_RCC_PLL_GetDivider>:
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <LL_RCC_PLL_GetMainSource>:
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0303 	and.w	r3, r3, #3
}
 8005656:	4618      	mov	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005672:	d101      	bne.n	8005678 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005698:	d101      	bne.n	800569e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80056aa:	b480      	push	{r7}
 80056ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80056ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80056b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056be:	d101      	bne.n	80056c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056e2:	d101      	bne.n	80056e8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80056f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005706:	d101      	bne.n	800570c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b08d      	sub	sp, #52	; 0x34
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e37e      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8092 	beq.w	800585c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005738:	f7ff fe7d 	bl	8005436 <LL_RCC_GetSysClkSource>
 800573c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800573e:	f7ff ff83 	bl	8005648 <LL_RCC_PLL_GetMainSource>
 8005742:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_RCC_OscConfig+0x3e>
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2b0c      	cmp	r3, #12
 800574e:	d14c      	bne.n	80057ea <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	2b01      	cmp	r3, #1
 8005754:	d149      	bne.n	80057ea <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005756:	f7ff fe0b 	bl	8005370 <LL_RCC_MSI_IsReady>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_OscConfig+0x54>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e35d      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005770:	f7ff fe23 	bl	80053ba <LL_RCC_MSI_GetRange>
 8005774:	4603      	mov	r3, r0
 8005776:	429c      	cmp	r4, r3
 8005778:	d914      	bls.n	80057a4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fd5c 	bl	800623c <RCC_SetFlashLatencyFromMSIRange>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e34c      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fdfd 	bl	8005392 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fe21 	bl	80053e4 <LL_RCC_MSI_SetCalibTrimming>
 80057a2:	e013      	b.n	80057cc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fdf2 	bl	8005392 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fe16 	bl	80053e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fd3d 	bl	800623c <RCC_SetFlashLatencyFromMSIRange>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e32d      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80057cc:	f000 fcda 	bl	8006184 <HAL_RCC_GetHCLKFreq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4bb3      	ldr	r3, [pc, #716]	; (8005aa0 <HAL_RCC_OscConfig+0x388>)
 80057d4:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057d6:	4bb3      	ldr	r3, [pc, #716]	; (8005aa4 <HAL_RCC_OscConfig+0x38c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fd74 	bl	80042c8 <HAL_InitTick>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d039      	beq.n	800585a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e31e      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01e      	beq.n	8005830 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057f2:	f7ff fd9f 	bl	8005334 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057f6:	f7fe ff7f 	bl	80046f8 <HAL_GetTick>
 80057fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057fe:	f7fe ff7b 	bl	80046f8 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e30b      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005810:	f7ff fdae 	bl	8005370 <LL_RCC_MSI_IsReady>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f1      	beq.n	80057fe <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fdb7 	bl	8005392 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff fddb 	bl	80053e4 <LL_RCC_MSI_SetCalibTrimming>
 800582e:	e015      	b.n	800585c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005830:	f7ff fd8f 	bl	8005352 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005834:	f7fe ff60 	bl	80046f8 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800583c:	f7fe ff5c 	bl	80046f8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e2ec      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800584e:	f7ff fd8f 	bl	8005370 <LL_RCC_MSI_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f1      	bne.n	800583c <HAL_RCC_OscConfig+0x124>
 8005858:	e000      	b.n	800585c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800585a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d04e      	beq.n	8005906 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005868:	f7ff fde5 	bl	8005436 <LL_RCC_GetSysClkSource>
 800586c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800586e:	f7ff feeb 	bl	8005648 <LL_RCC_PLL_GetMainSource>
 8005872:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	2b08      	cmp	r3, #8
 8005878:	d005      	beq.n	8005886 <HAL_RCC_OscConfig+0x16e>
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d10d      	bne.n	800589c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d10a      	bne.n	800589c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005886:	f7ff fbf5 	bl	8005074 <LL_RCC_HSE_IsReady>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d039      	beq.n	8005904 <HAL_RCC_OscConfig+0x1ec>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d135      	bne.n	8005904 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e2c5      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a4:	d102      	bne.n	80058ac <HAL_RCC_OscConfig+0x194>
 80058a6:	f7ff fbc7 	bl	8005038 <LL_RCC_HSE_Enable>
 80058aa:	e001      	b.n	80058b0 <HAL_RCC_OscConfig+0x198>
 80058ac:	f7ff fbd3 	bl	8005056 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d012      	beq.n	80058de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fe ff1e 	bl	80046f8 <HAL_GetTick>
 80058bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fe ff1a 	bl	80046f8 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e2aa      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80058d2:	f7ff fbcf 	bl	8005074 <LL_RCC_HSE_IsReady>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f1      	beq.n	80058c0 <HAL_RCC_OscConfig+0x1a8>
 80058dc:	e013      	b.n	8005906 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fe ff0b 	bl	80046f8 <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e6:	f7fe ff07 	bl	80046f8 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b64      	cmp	r3, #100	; 0x64
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e297      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80058f8:	f7ff fbbc 	bl	8005074 <LL_RCC_HSE_IsReady>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f1      	bne.n	80058e6 <HAL_RCC_OscConfig+0x1ce>
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d051      	beq.n	80059b6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	f7ff fd90 	bl	8005436 <LL_RCC_GetSysClkSource>
 8005916:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005918:	f7ff fe96 	bl	8005648 <LL_RCC_PLL_GetMainSource>
 800591c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b04      	cmp	r3, #4
 8005922:	d005      	beq.n	8005930 <HAL_RCC_OscConfig+0x218>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b0c      	cmp	r3, #12
 8005928:	d113      	bne.n	8005952 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d110      	bne.n	8005952 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005930:	f7ff fbd0 	bl	80050d4 <LL_RCC_HSI_IsReady>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_RCC_OscConfig+0x22e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e270      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fbd4 	bl	80050f8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005950:	e031      	b.n	80059b6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d019      	beq.n	800598e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800595a:	f7ff fb9d 	bl	8005098 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595e:	f7fe fecb 	bl	80046f8 <HAL_GetTick>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005966:	f7fe fec7 	bl	80046f8 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e257      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005978:	f7ff fbac 	bl	80050d4 <LL_RCC_HSI_IsReady>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f1      	beq.n	8005966 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fbb6 	bl	80050f8 <LL_RCC_HSI_SetCalibTrimming>
 800598c:	e013      	b.n	80059b6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800598e:	f7ff fb92 	bl	80050b6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005992:	f7fe feb1 	bl	80046f8 <HAL_GetTick>
 8005996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800599a:	f7fe fead 	bl	80046f8 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e23d      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80059ac:	f7ff fb92 	bl	80050d4 <LL_RCC_HSI_IsReady>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f1      	bne.n	800599a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80a3 	beq.w	8005b16 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d076      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d046      	beq.n	8005a72 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80059e4:	f7ff fc49 	bl	800527a <LL_RCC_LSI1_IsReady>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d113      	bne.n	8005a16 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80059ee:	f7ff fc22 	bl	8005236 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059f2:	f7fe fe81 	bl	80046f8 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059fa:	f7fe fe7d 	bl	80046f8 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e20d      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005a0c:	f7ff fc35 	bl	800527a <LL_RCC_LSI1_IsReady>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f1      	beq.n	80059fa <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005a16:	f7ff fc42 	bl	800529e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1a:	f7fe fe6d 	bl	80046f8 <HAL_GetTick>
 8005a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a22:	f7fe fe69 	bl	80046f8 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e1f9      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005a34:	f7ff fc55 	bl	80052e2 <LL_RCC_LSI2_IsReady>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f1      	beq.n	8005a22 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fc5f 	bl	8005306 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005a48:	f7ff fc06 	bl	8005258 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fe fe54 	bl	80046f8 <HAL_GetTick>
 8005a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a54:	f7fe fe50 	bl	80046f8 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e1e0      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a66:	f7ff fc08 	bl	800527a <LL_RCC_LSI1_IsReady>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f1      	bne.n	8005a54 <HAL_RCC_OscConfig+0x33c>
 8005a70:	e051      	b.n	8005b16 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005a72:	f7ff fbe0 	bl	8005236 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fe fe3f 	bl	80046f8 <HAL_GetTick>
 8005a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a7e:	f7fe fe3b 	bl	80046f8 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e1cb      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a90:	f7ff fbf3 	bl	800527a <LL_RCC_LSI1_IsReady>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f1      	beq.n	8005a7e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005a9a:	f7ff fc11 	bl	80052c0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a9e:	e00c      	b.n	8005aba <HAL_RCC_OscConfig+0x3a2>
 8005aa0:	20000014 	.word	0x20000014
 8005aa4:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005aa8:	f7fe fe26 	bl	80046f8 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e1b6      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005aba:	f7ff fc12 	bl	80052e2 <LL_RCC_LSI2_IsReady>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f1      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x390>
 8005ac4:	e027      	b.n	8005b16 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005ac6:	f7ff fbfb 	bl	80052c0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aca:	f7fe fe15 	bl	80046f8 <HAL_GetTick>
 8005ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ad2:	f7fe fe11 	bl	80046f8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e1a1      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ae4:	f7ff fbfd 	bl	80052e2 <LL_RCC_LSI2_IsReady>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f1      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005aee:	f7ff fbb3 	bl	8005258 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af2:	f7fe fe01 	bl	80046f8 <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005afa:	f7fe fdfd 	bl	80046f8 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e18d      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005b0c:	f7ff fbb5 	bl	800527a <LL_RCC_LSI1_IsReady>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f1      	bne.n	8005afa <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d05b      	beq.n	8005bda <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b22:	4bb5      	ldr	r3, [pc, #724]	; (8005df8 <HAL_RCC_OscConfig+0x6e0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d114      	bne.n	8005b58 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b2e:	f7ff fa53 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b32:	f7fe fde1 	bl	80046f8 <HAL_GetTick>
 8005b36:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b3a:	f7fe fddd 	bl	80046f8 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e16d      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b4c:	4baa      	ldr	r3, [pc, #680]	; (8005df8 <HAL_RCC_OscConfig+0x6e0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_RCC_OscConfig+0x44e>
 8005b60:	f7ff fb13 	bl	800518a <LL_RCC_LSE_Enable>
 8005b64:	e00c      	b.n	8005b80 <HAL_RCC_OscConfig+0x468>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d104      	bne.n	8005b78 <HAL_RCC_OscConfig+0x460>
 8005b6e:	f7ff fb2e 	bl	80051ce <LL_RCC_LSE_EnableBypass>
 8005b72:	f7ff fb0a 	bl	800518a <LL_RCC_LSE_Enable>
 8005b76:	e003      	b.n	8005b80 <HAL_RCC_OscConfig+0x468>
 8005b78:	f7ff fb18 	bl	80051ac <LL_RCC_LSE_Disable>
 8005b7c:	f7ff fb38 	bl	80051f0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d014      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fe fdb6 	bl	80046f8 <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b90:	f7fe fdb2 	bl	80046f8 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e140      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ba6:	f7ff fb34 	bl	8005212 <LL_RCC_LSE_IsReady>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ef      	beq.n	8005b90 <HAL_RCC_OscConfig+0x478>
 8005bb0:	e013      	b.n	8005bda <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb2:	f7fe fda1 	bl	80046f8 <HAL_GetTick>
 8005bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bba:	f7fe fd9d 	bl	80046f8 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e12b      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bd0:	f7ff fb1f 	bl	8005212 <LL_RCC_LSE_IsReady>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1ef      	bne.n	8005bba <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d02c      	beq.n	8005c40 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d014      	beq.n	8005c18 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bee:	f7ff fa98 	bl	8005122 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf2:	f7fe fd81 	bl	80046f8 <HAL_GetTick>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bfa:	f7fe fd7d 	bl	80046f8 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e10d      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005c0c:	f7ff faab 	bl	8005166 <LL_RCC_HSI48_IsReady>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f1      	beq.n	8005bfa <HAL_RCC_OscConfig+0x4e2>
 8005c16:	e013      	b.n	8005c40 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c18:	f7ff fa94 	bl	8005144 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1c:	f7fe fd6c 	bl	80046f8 <HAL_GetTick>
 8005c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c24:	f7fe fd68 	bl	80046f8 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e0f8      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005c36:	f7ff fa96 	bl	8005166 <LL_RCC_HSI48_IsReady>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f1      	bne.n	8005c24 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80ee 	beq.w	8005e26 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c4a:	f7ff fbf4 	bl	8005436 <LL_RCC_GetSysClkSource>
 8005c4e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	f040 80af 	bne.w	8005dc0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 0203 	and.w	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d123      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d11c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d114      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d05d      	beq.n	8005d74 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b0c      	cmp	r3, #12
 8005cbc:	d058      	beq.n	8005d70 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0ab      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005cd0:	f7ff fc74 	bl	80055bc <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cd4:	f7fe fd10 	bl	80046f8 <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cdc:	f7fe fd0c 	bl	80046f8 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e09c      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ef      	bne.n	8005cdc <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	4b3e      	ldr	r3, [pc, #248]	; (8005dfc <HAL_RCC_OscConfig+0x6e4>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d14:	0212      	lsls	r2, r2, #8
 8005d16:	4311      	orrs	r1, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d1c:	4311      	orrs	r1, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d22:	4311      	orrs	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d32:	f7ff fc34 	bl	800559e <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d44:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d46:	f7fe fcd7 	bl	80046f8 <HAL_GetTick>
 8005d4a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4e:	f7fe fcd3 	bl	80046f8 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e063      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0ef      	beq.n	8005d4e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d6e:	e05a      	b.n	8005e26 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e059      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d151      	bne.n	8005e26 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d82:	f7ff fc0c 	bl	800559e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d94:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d96:	f7fe fcaf 	bl	80046f8 <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9e:	f7fe fcab 	bl	80046f8 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e03b      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ef      	beq.n	8005d9e <HAL_RCC_OscConfig+0x686>
 8005dbe:	e032      	b.n	8005e26 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d02d      	beq.n	8005e22 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc6:	f7ff fbf9 	bl	80055bc <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd4:	f023 0303 	bic.w	r3, r3, #3
 8005dd8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005de4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fe fc83 	bl	80046f8 <HAL_GetTick>
 8005df2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005df4:	e00d      	b.n	8005e12 <HAL_RCC_OscConfig+0x6fa>
 8005df6:	bf00      	nop
 8005df8:	58000400 	.word	0x58000400
 8005dfc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fe fc7a 	bl	80046f8 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1ef      	bne.n	8005e00 <HAL_RCC_OscConfig+0x6e8>
 8005e20:	e001      	b.n	8005e26 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3734      	adds	r7, #52	; 0x34
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd90      	pop	{r4, r7, pc}

08005e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e12d      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e44:	4b98      	ldr	r3, [pc, #608]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d91b      	bls.n	8005e8a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e52:	4b95      	ldr	r3, [pc, #596]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 0207 	bic.w	r2, r3, #7
 8005e5a:	4993      	ldr	r1, [pc, #588]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e62:	f7fe fc49 	bl	80046f8 <HAL_GetTick>
 8005e66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e6a:	f7fe fc45 	bl	80046f8 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e111      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7c:	4b8a      	ldr	r3, [pc, #552]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d1ef      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fad7 	bl	800544e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ea0:	f7fe fc2a 	bl	80046f8 <HAL_GetTick>
 8005ea4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ea8:	f7fe fc26 	bl	80046f8 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e0f2      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005eba:	f7ff fbd1 	bl	8005660 <LL_RCC_IsActiveFlag_HPRE>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f1      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d016      	beq.n	8005efe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff face 	bl	8005476 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eda:	f7fe fc0d 	bl	80046f8 <HAL_GetTick>
 8005ede:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ee2:	f7fe fc09 	bl	80046f8 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0d5      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ef4:	f7ff fbc6 	bl	8005684 <LL_RCC_IsActiveFlag_C2HPRE>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f1      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fac7 	bl	80054a2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f14:	f7fe fbf0 	bl	80046f8 <HAL_GetTick>
 8005f18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f1c:	f7fe fbec 	bl	80046f8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e0b8      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f2e:	f7ff fbbc 	bl	80056aa <LL_RCC_IsActiveFlag_SHDHPRE>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f1      	beq.n	8005f1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d016      	beq.n	8005f72 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fac1 	bl	80054d0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f4e:	f7fe fbd3 	bl	80046f8 <HAL_GetTick>
 8005f52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f56:	f7fe fbcf 	bl	80046f8 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e09b      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f68:	f7ff fbb2 	bl	80056d0 <LL_RCC_IsActiveFlag_PPRE1>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f1      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d017      	beq.n	8005fae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fab7 	bl	80054f8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f8a:	f7fe fbb5 	bl	80046f8 <HAL_GetTick>
 8005f8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f92:	f7fe fbb1 	bl	80046f8 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e07d      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005fa4:	f7ff fba6 	bl	80056f4 <LL_RCC_IsActiveFlag_PPRE2>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f1      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d043      	beq.n	8006042 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005fc2:	f7ff f857 	bl	8005074 <LL_RCC_HSE_IsReady>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11e      	bne.n	800600a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e067      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d106      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005fd8:	f7ff faff 	bl	80055da <LL_RCC_PLL_IsReady>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d113      	bne.n	800600a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e05c      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005fee:	f7ff f9bf 	bl	8005370 <LL_RCC_MSI_IsReady>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d108      	bne.n	800600a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e051      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ffc:	f7ff f86a 	bl	80050d4 <LL_RCC_HSI_IsReady>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e04a      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff f9fd 	bl	800540e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006014:	f7fe fb70 	bl	80046f8 <HAL_GetTick>
 8006018:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601a:	e00a      	b.n	8006032 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800601c:	f7fe fb6c 	bl	80046f8 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	f241 3288 	movw	r2, #5000	; 0x1388
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e036      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006032:	f7ff fa00 	bl	8005436 <LL_RCC_GetSysClkSource>
 8006036:	4602      	mov	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	429a      	cmp	r2, r3
 8006040:	d1ec      	bne.n	800601c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006042:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d21b      	bcs.n	8006088 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006050:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f023 0207 	bic.w	r2, r3, #7
 8006058:	4913      	ldr	r1, [pc, #76]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006060:	f7fe fb4a 	bl	80046f8 <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006066:	e008      	b.n	800607a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006068:	f7fe fb46 	bl	80046f8 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e012      	b.n	80060a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_ClockConfig+0x278>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d1ef      	bne.n	8006068 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006088:	f000 f87c 	bl	8006184 <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_RCC_ClockConfig+0x27c>)
 8006090:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006092:	f7fe fb3d 	bl	8004710 <HAL_GetTickPrio>
 8006096:	4603      	mov	r3, r0
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe f915 	bl	80042c8 <HAL_InitTick>
 800609e:	4603      	mov	r3, r0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	58004000 	.word	0x58004000
 80060ac:	20000014 	.word	0x20000014

080060b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b6:	f7ff f9be 	bl	8005436 <LL_RCC_GetSysClkSource>
 80060ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80060c2:	f7ff f97a 	bl	80053ba <LL_RCC_MSI_GetRange>
 80060c6:	4603      	mov	r3, r0
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	4a2a      	ldr	r2, [pc, #168]	; (8006178 <HAL_RCC_GetSysClockFreq+0xc8>)
 80060d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e04a      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d102      	bne.n	80060e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060de:	4b27      	ldr	r3, [pc, #156]	; (800617c <HAL_RCC_GetSysClockFreq+0xcc>)
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e044      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d10a      	bne.n	8006100 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80060ea:	f7fe ff93 	bl	8005014 <LL_RCC_HSE_IsEnabledDiv2>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d102      	bne.n	80060fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80060f4:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_RCC_GetSysClockFreq+0xcc>)
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e039      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80060fa:	4b21      	ldr	r3, [pc, #132]	; (8006180 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e036      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006100:	f7ff faa2 	bl	8005648 <LL_RCC_PLL_GetMainSource>
 8006104:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d002      	beq.n	8006112 <HAL_RCC_GetSysClockFreq+0x62>
 800610c:	2b03      	cmp	r3, #3
 800610e:	d003      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x68>
 8006110:	e00d      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006112:	4b1a      	ldr	r3, [pc, #104]	; (800617c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006114:	60bb      	str	r3, [r7, #8]
        break;
 8006116:	e015      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006118:	f7fe ff7c 	bl	8005014 <LL_RCC_HSE_IsEnabledDiv2>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d102      	bne.n	8006128 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006122:	4b16      	ldr	r3, [pc, #88]	; (800617c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006124:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006126:	e00d      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006128:	4b15      	ldr	r3, [pc, #84]	; (8006180 <HAL_RCC_GetSysClockFreq+0xd0>)
 800612a:	60bb      	str	r3, [r7, #8]
        break;
 800612c:	e00a      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800612e:	f7ff f944 	bl	80053ba <LL_RCC_MSI_GetRange>
 8006132:	4603      	mov	r3, r0
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	4a0f      	ldr	r2, [pc, #60]	; (8006178 <HAL_RCC_GetSysClockFreq+0xc8>)
 800613c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006140:	60bb      	str	r3, [r7, #8]
        break;
 8006142:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006144:	f7ff fa5b 	bl	80055fe <LL_RCC_PLL_GetN>
 8006148:	4602      	mov	r2, r0
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	fb03 f402 	mul.w	r4, r3, r2
 8006150:	f7ff fa6e 	bl	8005630 <LL_RCC_PLL_GetDivider>
 8006154:	4603      	mov	r3, r0
 8006156:	091b      	lsrs	r3, r3, #4
 8006158:	3301      	adds	r3, #1
 800615a:	fbb4 f4f3 	udiv	r4, r4, r3
 800615e:	f7ff fa5b 	bl	8005618 <LL_RCC_PLL_GetR>
 8006162:	4603      	mov	r3, r0
 8006164:	0f5b      	lsrs	r3, r3, #29
 8006166:	3301      	adds	r3, #1
 8006168:	fbb4 f3f3 	udiv	r3, r4, r3
 800616c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800616e:	68fb      	ldr	r3, [r7, #12]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}
 8006178:	080109b0 	.word	0x080109b0
 800617c:	00f42400 	.word	0x00f42400
 8006180:	01e84800 	.word	0x01e84800

08006184 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006184:	b598      	push	{r3, r4, r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006188:	f7ff ff92 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 800618c:	4604      	mov	r4, r0
 800618e:	f7ff f9c7 	bl	8005520 <LL_RCC_GetAHBPrescaler>
 8006192:	4603      	mov	r3, r0
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	4a03      	ldr	r2, [pc, #12]	; (80061a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800619c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd98      	pop	{r3, r4, r7, pc}
 80061a8:	08010950 	.word	0x08010950

080061ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061ac:	b598      	push	{r3, r4, r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80061b0:	f7ff ffe8 	bl	8006184 <HAL_RCC_GetHCLKFreq>
 80061b4:	4604      	mov	r4, r0
 80061b6:	f7ff f9e6 	bl	8005586 <LL_RCC_GetAPB2Prescaler>
 80061ba:	4603      	mov	r3, r0
 80061bc:	0adb      	lsrs	r3, r3, #11
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd98      	pop	{r3, r4, r7, pc}
 80061d4:	08010990 	.word	0x08010990

080061d8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	226f      	movs	r2, #111	; 0x6f
 80061e6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80061e8:	f7ff f925 	bl	8005436 <LL_RCC_GetSysClkSource>
 80061ec:	4602      	mov	r2, r0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80061f2:	f7ff f995 	bl	8005520 <LL_RCC_GetAHBPrescaler>
 80061f6:	4602      	mov	r2, r0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80061fc:	f7ff f9b7 	bl	800556e <LL_RCC_GetAPB1Prescaler>
 8006200:	4602      	mov	r2, r0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006206:	f7ff f9be 	bl	8005586 <LL_RCC_GetAPB2Prescaler>
 800620a:	4602      	mov	r2, r0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006210:	f7ff f992 	bl	8005538 <LL_C2_RCC_GetAHBPrescaler>
 8006214:	4602      	mov	r2, r0
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800621a:	f7ff f99a 	bl	8005552 <LL_RCC_GetAHB4Prescaler>
 800621e:	4602      	mov	r2, r0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <HAL_RCC_GetClockConfig+0x60>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0207 	and.w	r2, r3, #7
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	601a      	str	r2, [r3, #0]
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	58004000 	.word	0x58004000

0800623c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2bb0      	cmp	r3, #176	; 0xb0
 8006248:	d903      	bls.n	8006252 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800624a:	4b15      	ldr	r3, [pc, #84]	; (80062a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e007      	b.n	8006262 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800625c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006260:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006262:	f7ff f976 	bl	8005552 <LL_RCC_GetAHB4Prescaler>
 8006266:	4603      	mov	r3, r0
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	4a0d      	ldr	r2, [pc, #52]	; (80062a4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	fbb2 f3f3 	udiv	r3, r2, r3
 800627a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	0c9c      	lsrs	r4, r3, #18
 8006286:	f7fe feb7 	bl	8004ff8 <HAL_PWREx_GetVoltageRange>
 800628a:	4603      	mov	r3, r0
 800628c:	4619      	mov	r1, r3
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f80c 	bl	80062ac <RCC_SetFlashLatency>
 8006294:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop
 80062a0:	080109b0 	.word	0x080109b0
 80062a4:	08010950 	.word	0x08010950
 80062a8:	431bde83 	.word	0x431bde83

080062ac <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b093      	sub	sp, #76	; 0x4c
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80062b6:	4b39      	ldr	r3, [pc, #228]	; (800639c <RCC_SetFlashLatency+0xf0>)
 80062b8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80062bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80062c2:	4a37      	ldr	r2, [pc, #220]	; (80063a0 <RCC_SetFlashLatency+0xf4>)
 80062c4:	f107 031c 	add.w	r3, r7, #28
 80062c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80062ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80062ce:	4b35      	ldr	r3, [pc, #212]	; (80063a4 <RCC_SetFlashLatency+0xf8>)
 80062d0:	f107 040c 	add.w	r4, r7, #12
 80062d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80062da:	2300      	movs	r3, #0
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e4:	d11c      	bne.n	8006320 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80062e6:	2300      	movs	r3, #0
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
 80062ea:	e015      	b.n	8006318 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062f4:	4413      	add	r3, r2
 80062f6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d808      	bhi.n	8006312 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006308:	4413      	add	r3, r2
 800630a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006310:	e022      	b.n	8006358 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006314:	3301      	adds	r3, #1
 8006316:	643b      	str	r3, [r7, #64]	; 0x40
 8006318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631a:	2b03      	cmp	r3, #3
 800631c:	d9e6      	bls.n	80062ec <RCC_SetFlashLatency+0x40>
 800631e:	e01b      	b.n	8006358 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006320:	2300      	movs	r3, #0
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006324:	e015      	b.n	8006352 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800632e:	4413      	add	r3, r2
 8006330:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	429a      	cmp	r2, r3
 8006338:	d808      	bhi.n	800634c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800633a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006342:	4413      	add	r3, r2
 8006344:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006348:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800634a:	e005      	b.n	8006358 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	3301      	adds	r3, #1
 8006350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006354:	2b02      	cmp	r3, #2
 8006356:	d9e6      	bls.n	8006326 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006358:	4b13      	ldr	r3, [pc, #76]	; (80063a8 <RCC_SetFlashLatency+0xfc>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f023 0207 	bic.w	r2, r3, #7
 8006360:	4911      	ldr	r1, [pc, #68]	; (80063a8 <RCC_SetFlashLatency+0xfc>)
 8006362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006364:	4313      	orrs	r3, r2
 8006366:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006368:	f7fe f9c6 	bl	80046f8 <HAL_GetTick>
 800636c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800636e:	e008      	b.n	8006382 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006370:	f7fe f9c2 	bl	80046f8 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e007      	b.n	8006392 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <RCC_SetFlashLatency+0xfc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800638c:	429a      	cmp	r2, r3
 800638e:	d1ef      	bne.n	8006370 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	374c      	adds	r7, #76	; 0x4c
 8006396:	46bd      	mov	sp, r7
 8006398:	bd90      	pop	{r4, r7, pc}
 800639a:	bf00      	nop
 800639c:	08010724 	.word	0x08010724
 80063a0:	08010734 	.word	0x08010734
 80063a4:	08010740 	.word	0x08010740
 80063a8:	58004000 	.word	0x58004000

080063ac <LL_RCC_LSE_IsEnabled>:
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <LL_RCC_LSE_IsEnabled+0x18>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <LL_RCC_LSE_IsEnabled+0x1a>
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <LL_RCC_LSE_IsReady>:
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80063d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d101      	bne.n	80063e8 <LL_RCC_LSE_IsReady+0x18>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <LL_RCC_LSE_IsReady+0x1a>
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_SetRFWKPClockSource>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80063fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006404:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <LL_RCC_SetSMPSClockSource>:
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f023 0203 	bic.w	r2, r3, #3
 8006432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4313      	orrs	r3, r2
 800643a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_RCC_SetSMPSPrescaler>:
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800645a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4313      	orrs	r3, r2
 8006462:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <LL_RCC_SetUSARTClockSource>:
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f023 0203 	bic.w	r2, r3, #3
 8006484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_RCC_SetLPUARTClockSource>:
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80064a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <LL_RCC_SetI2CClockSource>:
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80064d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	091b      	lsrs	r3, r3, #4
 80064dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064e0:	43db      	mvns	r3, r3
 80064e2:	401a      	ands	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <LL_RCC_SetLPTIMClockSource>:
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800650a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	43db      	mvns	r3, r3
 800651a:	401a      	ands	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <LL_RCC_SetSAIClockSource>:
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800654a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <LL_RCC_SetRNGClockSource>:
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800656a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006572:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <LL_RCC_SetCLK48ClockSource>:
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <LL_RCC_SetUSBClockSource>:
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ffe3 	bl	800658e <LL_RCC_SetCLK48ClockSource>
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <LL_RCC_SetADCClockSource>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80065d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <LL_RCC_SetRTCClockSource>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <LL_RCC_GetRTCClockSource>:
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006634:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_RCC_ForceBackupDomainReset>:
{
 8006642:	b480      	push	{r7}
 8006644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <LL_RCC_PLLSAI1_Enable>:
{
 8006686:	b480      	push	{r7}
 8006688:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800668a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <LL_RCC_PLLSAI1_Disable>:
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80066a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066b6:	6013      	str	r3, [r2, #0]
}
 80066b8:	bf00      	nop
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <LL_RCC_PLLSAI1_IsReady>:
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d4:	d101      	bne.n	80066da <LL_RCC_PLLSAI1_IsReady+0x18>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b088      	sub	sp, #32
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80066ee:	2300      	movs	r3, #0
 80066f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80066f2:	2300      	movs	r3, #0
 80066f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d033      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800670a:	d00c      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800670c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006710:	d802      	bhi.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d010      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006716:	e017      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800671c:	d017      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800671e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006722:	d016      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8006724:	e010      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006734:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006736:	e00d      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3304      	adds	r3, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f947 	bl	80069d0 <RCCEx_PLLSAI1_ConfigNP>
 8006742:	4603      	mov	r3, r0
 8006744:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006746:	e005      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	77fb      	strb	r3, [r7, #31]
        break;
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8006752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fee9 	bl	8006536 <LL_RCC_SetSAIClockSource>
 8006764:	e001      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006766:	7ffb      	ldrb	r3, [r7, #31]
 8006768:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006772:	2b00      	cmp	r3, #0
 8006774:	d046      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006776:	f7ff ff57 	bl	8006628 <LL_RCC_GetRTCClockSource>
 800677a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	429a      	cmp	r2, r3
 8006784:	d03c      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006786:	f7fe fc27 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff ff31 	bl	80065fc <LL_RCC_SetRTCClockSource>
 800679a:	e02e      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800679c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80067a6:	f7ff ff4c 	bl	8006642 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80067aa:	f7ff ff5b 	bl	8006664 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80067bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80067c6:	f7ff fdf1 	bl	80063ac <LL_RCC_LSE_IsEnabled>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d114      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067d0:	f7fd ff92 	bl	80046f8 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80067d6:	e00b      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d8:	f7fd ff8e 	bl	80046f8 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d902      	bls.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	77fb      	strb	r3, [r7, #31]
              break;
 80067ee:	e004      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80067f0:	f7ff fdee 	bl	80063d0 <LL_RCC_LSE_IsReady>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d1ee      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80067fa:	7ffb      	ldrb	r3, [r7, #31]
 80067fc:	77bb      	strb	r3, [r7, #30]
 80067fe:	e001      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	7ffb      	ldrb	r3, [r7, #31]
 8006802:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff fe2b 	bl	8006470 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fe36 	bl	800649c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fe5e 	bl	8006502 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fe53 	bl	8006502 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fe2b 	bl	80064c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fe20 	bl	80064c8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d022      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fe8e 	bl	80065ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a6:	d107      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068c0:	d10b      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 f8dd 	bl	8006a86 <RCCEx_PLLSAI1_ConfigNQ>
 80068cc:	4603      	mov	r3, r0
 80068ce:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80068d6:	7ffb      	ldrb	r3, [r7, #31]
 80068d8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d02b      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ee:	d008      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f8:	d003      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fe2b 	bl	8006562 <LL_RCC_SetRNGClockSource>
 800690c:	e00a      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	2000      	movs	r0, #0
 800691a:	f7ff fe22 	bl	8006562 <LL_RCC_SetRNGClockSource>
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fe35 	bl	800658e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800692c:	d107      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800692e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006938:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800693c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006946:	2b00      	cmp	r3, #0
 8006948:	d022      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fe3e 	bl	80065d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800695c:	d107      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006976:	d10b      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4618      	mov	r0, r3
 800697e:	f000 f8dd 	bl	8006b3c <RCCEx_PLLSAI1_ConfigNR>
 8006982:	4603      	mov	r3, r0
 8006984:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006986:	7ffb      	ldrb	r3, [r7, #31]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800698c:	7ffb      	ldrb	r3, [r7, #31]
 800698e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fd27 	bl	80063f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fd46 	bl	8006448 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fd2d 	bl	8006420 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80069c6:	7fbb      	ldrb	r3, [r7, #30]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80069dc:	f7ff fe62 	bl	80066a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069e0:	f7fd fe8a 	bl	80046f8 <HAL_GetTick>
 80069e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069e6:	e009      	b.n	80069fc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069e8:	f7fd fe86 	bl	80046f8 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d902      	bls.n	80069fc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	73fb      	strb	r3, [r7, #15]
      break;
 80069fa:	e004      	b.n	8006a06 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069fc:	f7ff fe61 	bl	80066c2 <LL_RCC_PLLSAI1_IsReady>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f0      	bne.n	80069e8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d137      	bne.n	8006a7c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a20:	4313      	orrs	r3, r2
 8006a22:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a36:	4313      	orrs	r3, r2
 8006a38:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a3a:	f7ff fe24 	bl	8006686 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a3e:	f7fd fe5b 	bl	80046f8 <HAL_GetTick>
 8006a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a44:	e009      	b.n	8006a5a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a46:	f7fd fe57 	bl	80046f8 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d902      	bls.n	8006a5a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	73fb      	strb	r3, [r7, #15]
        break;
 8006a58:	e004      	b.n	8006a64 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a5a:	f7ff fe32 	bl	80066c2 <LL_RCC_PLLSAI1_IsReady>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d1f0      	bne.n	8006a46 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d108      	bne.n	8006a7c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a92:	f7ff fe07 	bl	80066a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a96:	f7fd fe2f 	bl	80046f8 <HAL_GetTick>
 8006a9a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a9c:	e009      	b.n	8006ab2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a9e:	f7fd fe2b 	bl	80046f8 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d902      	bls.n	8006ab2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab0:	e004      	b.n	8006abc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ab2:	f7ff fe06 	bl	80066c2 <LL_RCC_PLLSAI1_IsReady>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f0      	bne.n	8006a9e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d137      	bne.n	8006b32 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aec:	4313      	orrs	r3, r2
 8006aee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006af0:	f7ff fdc9 	bl	8006686 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af4:	f7fd fe00 	bl	80046f8 <HAL_GetTick>
 8006af8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006afa:	e009      	b.n	8006b10 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006afc:	f7fd fdfc 	bl	80046f8 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d902      	bls.n	8006b10 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b0e:	e004      	b.n	8006b1a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b10:	f7ff fdd7 	bl	80066c2 <LL_RCC_PLLSAI1_IsReady>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d1f0      	bne.n	8006afc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d108      	bne.n	8006b32 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b48:	f7ff fdac 	bl	80066a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b4c:	f7fd fdd4 	bl	80046f8 <HAL_GetTick>
 8006b50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b52:	e009      	b.n	8006b68 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b54:	f7fd fdd0 	bl	80046f8 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d902      	bls.n	8006b68 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	73fb      	strb	r3, [r7, #15]
      break;
 8006b66:	e004      	b.n	8006b72 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b68:	f7ff fdab 	bl	80066c2 <LL_RCC_PLLSAI1_IsReady>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d137      	bne.n	8006be8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006ba6:	f7ff fd6e 	bl	8006686 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006baa:	f7fd fda5 	bl	80046f8 <HAL_GetTick>
 8006bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006bb0:	e009      	b.n	8006bc6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bb2:	f7fd fda1 	bl	80046f8 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d902      	bls.n	8006bc6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	73fb      	strb	r3, [r7, #15]
        break;
 8006bc4:	e004      	b.n	8006bd0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006bc6:	f7ff fd7c 	bl	80066c2 <LL_RCC_PLLSAI1_IsReady>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d1f0      	bne.n	8006bb2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006be4:	4313      	orrs	r3, r2
 8006be6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e090      	b.n	8006d26 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fd fb1b 	bl	8004254 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	22ca      	movs	r2, #202	; 0xca
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2253      	movs	r2, #83	; 0x53
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa11 	bl	800705e <RTC_EnterInitMode>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d009      	beq.n	8006c56 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	22ff      	movs	r2, #255	; 0xff
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e067      	b.n	8006d26 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c68:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6899      	ldr	r1, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68d2      	ldr	r2, [r2, #12]
 8006c90:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6919      	ldr	r1, [r3, #16]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	041a      	lsls	r2, r3, #16
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cb4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0203 	bic.w	r2, r2, #3
 8006cc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d113      	bne.n	8006d14 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f990 	bl	8007012 <HAL_RTC_WaitForSynchro>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00d      	beq.n	8006d14 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2204      	movs	r2, #4
 8006d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e008      	b.n	8006d26 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	22ff      	movs	r2, #255	; 0xff
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006d24:	2300      	movs	r3, #0
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d2e:	b590      	push	{r4, r7, lr}
 8006d30:	b087      	sub	sp, #28
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_RTC_SetTime+0x1a>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e0b2      	b.n	8006eae <HAL_RTC_SetTime+0x180>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d126      	bne.n	8006dac <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f99b 	bl	80070b2 <RTC_ByteToBcd2>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f994 	bl	80070b2 <RTC_ByteToBcd2>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006d8e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	789b      	ldrb	r3, [r3, #2]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f98c 	bl	80070b2 <RTC_ByteToBcd2>
 8006d9a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006d9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	78db      	ldrb	r3, [r3, #3]
 8006da4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	e018      	b.n	8006dde <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006dcc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006dd2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	78db      	ldrb	r3, [r3, #3]
 8006dd8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	22ca      	movs	r2, #202	; 0xca
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2253      	movs	r2, #83	; 0x53
 8006dec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f935 	bl	800705e <RTC_EnterInitMode>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	22ff      	movs	r2, #255	; 0xff
 8006e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2204      	movs	r2, #4
 8006e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e04b      	b.n	8006eae <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e24:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6899      	ldr	r1, [r3, #8]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	431a      	orrs	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d113      	bne.n	8006e94 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f8d0 	bl	8007012 <HAL_RTC_WaitForSynchro>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00d      	beq.n	8006e94 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	22ff      	movs	r2, #255	; 0xff
 8006e7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2204      	movs	r2, #4
 8006e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e00c      	b.n	8006eae <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	22ff      	movs	r2, #255	; 0xff
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 8006eac:	2300      	movs	r3, #0
  }
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd90      	pop	{r4, r7, pc}

08006eb6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006eb6:	b590      	push	{r4, r7, lr}
 8006eb8:	b087      	sub	sp, #28
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_RTC_SetDate+0x1a>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e09c      	b.n	800700a <HAL_RTC_SetDate+0x154>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10e      	bne.n	8006f04 <HAL_RTC_SetDate+0x4e>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	f023 0310 	bic.w	r3, r3, #16
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	330a      	adds	r3, #10
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d11c      	bne.n	8006f44 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f8cf 	bl	80070b2 <RTC_ByteToBcd2>
 8006f14:	4603      	mov	r3, r0
 8006f16:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 f8c8 	bl	80070b2 <RTC_ByteToBcd2>
 8006f22:	4603      	mov	r3, r0
 8006f24:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006f26:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	789b      	ldrb	r3, [r3, #2]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 f8c0 	bl	80070b2 <RTC_ByteToBcd2>
 8006f32:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006f34:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e00e      	b.n	8006f62 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	78db      	ldrb	r3, [r3, #3]
 8006f48:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006f50:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006f56:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	22ca      	movs	r2, #202	; 0xca
 8006f68:	625a      	str	r2, [r3, #36]	; 0x24
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2253      	movs	r2, #83	; 0x53
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f873 	bl	800705e <RTC_EnterInitMode>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	22ff      	movs	r2, #255	; 0xff
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e037      	b.n	800700a <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006fa4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fa8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d113      	bne.n	8006ff0 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f822 	bl	8007012 <HAL_RTC_WaitForSynchro>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00d      	beq.n	8006ff0 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	22ff      	movs	r2, #255	; 0xff
 8006fda:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e00c      	b.n	800700a <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd90      	pop	{r4, r7, pc}

08007012 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007028:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800702a:	f7fd fb65 	bl	80046f8 <HAL_GetTick>
 800702e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007030:	e009      	b.n	8007046 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007032:	f7fd fb61 	bl	80046f8 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007040:	d901      	bls.n	8007046 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e007      	b.n	8007056 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0ee      	beq.n	8007032 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d119      	bne.n	80070a8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800707e:	f7fd fb3b 	bl	80046f8 <HAL_GetTick>
 8007082:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007084:	e009      	b.n	800709a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007086:	f7fd fb37 	bl	80046f8 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007094:	d901      	bls.n	800709a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e007      	b.n	80070aa <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0ee      	beq.n	8007086 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	4603      	mov	r3, r0
 80070ba:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 80070c4:	e005      	b.n	80070d2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	3b0a      	subs	r3, #10
 80070d0:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d8f6      	bhi.n	80070c6 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	b2db      	uxtb	r3, r3
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007104:	2302      	movs	r3, #2
 8007106:	e024      	b.n	8007152 <HAL_RTCEx_EnableBypassShadow+0x60>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	22ca      	movs	r2, #202	; 0xca
 800711e:	625a      	str	r2, [r3, #36]	; 0x24
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2253      	movs	r2, #83	; 0x53
 8007126:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0220 	orr.w	r2, r2, #32
 8007136:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e049      	b.n	8007204 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f841 	bl	800720c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3304      	adds	r3, #4
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f000 f9d5 	bl	800754c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b01      	cmp	r3, #1
 8007232:	d001      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e036      	b.n	80072a6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <HAL_TIM_Base_Start_IT+0x94>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x44>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007262:	d115      	bne.n	8007290 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <HAL_TIM_Base_Start_IT+0x98>)
 800726c:	4013      	ands	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b06      	cmp	r3, #6
 8007274:	d015      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x82>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800727c:	d011      	beq.n	80072a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	e008      	b.n	80072a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e000      	b.n	80072a4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40012c00 	.word	0x40012c00
 80072b8:	00010007 	.word	0x00010007

080072bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d122      	bne.n	8007318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d11b      	bne.n	8007318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0202 	mvn.w	r2, #2
 80072e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f905 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 8007304:	e005      	b.n	8007312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f8f7 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f908 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b04      	cmp	r3, #4
 8007324:	d122      	bne.n	800736c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b04      	cmp	r3, #4
 8007332:	d11b      	bne.n	800736c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0204 	mvn.w	r2, #4
 800733c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f8db 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 8007358:	e005      	b.n	8007366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f8cd 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8de 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b08      	cmp	r3, #8
 8007378:	d122      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b08      	cmp	r3, #8
 8007386:	d11b      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0208 	mvn.w	r2, #8
 8007390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2204      	movs	r2, #4
 8007396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f8b1 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 80073ac:	e005      	b.n	80073ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f8a3 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f8b4 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b10      	cmp	r3, #16
 80073cc:	d122      	bne.n	8007414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d11b      	bne.n	8007414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0210 	mvn.w	r2, #16
 80073e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2208      	movs	r2, #8
 80073ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f887 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 8007400:	e005      	b.n	800740e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f879 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f88a 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b01      	cmp	r3, #1
 8007420:	d10e      	bne.n	8007440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b01      	cmp	r3, #1
 800742e:	d107      	bne.n	8007440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0201 	mvn.w	r2, #1
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fc fcea 	bl	8003e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	d10e      	bne.n	800746c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007458:	2b80      	cmp	r3, #128	; 0x80
 800745a:	d107      	bne.n	800746c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f8de 	bl	8007628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747a:	d10e      	bne.n	800749a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b80      	cmp	r3, #128	; 0x80
 8007488:	d107      	bne.n	800749a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f8d1 	bl	800763c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	d10e      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d107      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f838 	bl	8007536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d10e      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d107      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f06f 0220 	mvn.w	r2, #32
 80074ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f891 	bl	8007614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a2a      	ldr	r2, [pc, #168]	; (8007608 <TIM_Base_SetConfig+0xbc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0x20>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756a:	d108      	bne.n	800757e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a21      	ldr	r2, [pc, #132]	; (8007608 <TIM_Base_SetConfig+0xbc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_Base_SetConfig+0x52>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d007      	beq.n	800759e <TIM_Base_SetConfig+0x52>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1e      	ldr	r2, [pc, #120]	; (800760c <TIM_Base_SetConfig+0xc0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_Base_SetConfig+0x52>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <TIM_Base_SetConfig+0xc4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <TIM_Base_SetConfig+0xbc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d007      	beq.n	80075ec <TIM_Base_SetConfig+0xa0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a0b      	ldr	r2, [pc, #44]	; (800760c <TIM_Base_SetConfig+0xc0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d003      	beq.n	80075ec <TIM_Base_SetConfig+0xa0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a0a      	ldr	r2, [pc, #40]	; (8007610 <TIM_Base_SetConfig+0xc4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d103      	bne.n	80075f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	615a      	str	r2, [r3, #20]
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40012c00 	.word	0x40012c00
 800760c:	40014400 	.word	0x40014400
 8007610:	40014800 	.word	0x40014800

08007614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	f640 030f 	movw	r3, #2063	; 0x80f
 8007676:	4013      	ands	r3, r2
 8007678:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d118      	bne.n	80076b2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d013      	beq.n	80076b2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 8145 	beq.w	8007932 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
      }
      return;
 80076b0:	e13f      	b.n	8007932 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80e8 	beq.w	800788a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4ba1      	ldr	r3, [pc, #644]	; (8007944 <HAL_UART_IRQHandler+0x2f4>)
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d105      	bne.n	80076d0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4ba0      	ldr	r3, [pc, #640]	; (8007948 <HAL_UART_IRQHandler+0x2f8>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 80dd 	beq.w	800788a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d010      	beq.n	80076fc <HAL_UART_IRQHandler+0xac>
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2201      	movs	r2, #1
 80076ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	f043 0201 	orr.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d010      	beq.n	8007728 <HAL_UART_IRQHandler+0xd8>
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2202      	movs	r2, #2
 8007716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771e:	f043 0204 	orr.w	r2, r3, #4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	d010      	beq.n	8007754 <HAL_UART_IRQHandler+0x104>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2204      	movs	r2, #4
 8007742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	f043 0202 	orr.w	r2, r3, #2
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d015      	beq.n	800778a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4b76      	ldr	r3, [pc, #472]	; (8007944 <HAL_UART_IRQHandler+0x2f4>)
 800776c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2208      	movs	r2, #8
 8007778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f043 0208 	orr.w	r2, r3, #8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007790:	2b00      	cmp	r3, #0
 8007792:	d011      	beq.n	80077b8 <HAL_UART_IRQHandler+0x168>
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00c      	beq.n	80077b8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ae:	f043 0220 	orr.w	r2, r3, #32
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80b9 	beq.w	8007936 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d011      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d004      	beq.n	8007812 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800780e:	2b00      	cmp	r3, #0
 8007810:	d031      	beq.n	8007876 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f8a6 	bl	8007964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d123      	bne.n	800786e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007834:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800783a:	2b00      	cmp	r3, #0
 800783c:	d013      	beq.n	8007866 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007842:	4a42      	ldr	r2, [pc, #264]	; (800794c <HAL_UART_IRQHandler+0x2fc>)
 8007844:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784a:	4618      	mov	r0, r3
 800784c:	f7fd f8e6 	bl	8004a1c <HAL_DMA_Abort_IT>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d017      	beq.n	8007886 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007864:	e00f      	b.n	8007886 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f872 	bl	8007950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786c:	e00b      	b.n	8007886 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f86e 	bl	8007950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007874:	e007      	b.n	8007886 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f86a 	bl	8007950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007884:	e057      	b.n	8007936 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007886:	bf00      	nop
    return;
 8007888:	e055      	b.n	8007936 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00d      	beq.n	80078b0 <HAL_UART_IRQHandler+0x260>
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f8ae 	bl	8007a0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ae:	e045      	b.n	800793c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d012      	beq.n	80078e0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d008      	beq.n	80078e0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d031      	beq.n	800793a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
    }
    return;
 80078de:	e02c      	b.n	800793a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d008      	beq.n	80078fc <HAL_UART_IRQHandler+0x2ac>
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f86e 	bl	80079d6 <UART_EndTransmit_IT>
    return;
 80078fa:	e01f      	b.n	800793c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d008      	beq.n	8007918 <HAL_UART_IRQHandler+0x2c8>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f88e 	bl	8007a32 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007916:	e011      	b.n	800793c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00c      	beq.n	800793c <HAL_UART_IRQHandler+0x2ec>
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	da09      	bge.n	800793c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f878 	bl	8007a1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800792e:	bf00      	nop
 8007930:	e004      	b.n	800793c <HAL_UART_IRQHandler+0x2ec>
      return;
 8007932:	bf00      	nop
 8007934:	e002      	b.n	800793c <HAL_UART_IRQHandler+0x2ec>
    return;
 8007936:	bf00      	nop
 8007938:	e000      	b.n	800793c <HAL_UART_IRQHandler+0x2ec>
    return;
 800793a:	bf00      	nop
  }
}
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	10000001 	.word	0x10000001
 8007948:	04000120 	.word	0x04000120
 800794c:	080079ab 	.word	0x080079ab

08007950 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800797a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7ff ffc1 	bl	8007950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7fb fe75 	bl	80036ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8007a4e:	2204      	movs	r2, #4
 8007a50:	2100      	movs	r1, #0
 8007a52:	4816      	ldr	r0, [pc, #88]	; (8007aac <DIS_Init+0x64>)
 8007a54:	f005 ffcd 	bl	800d9f2 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8007a58:	f641 030a 	movw	r3, #6154	; 0x180a
 8007a5c:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8007a5e:	1d39      	adds	r1, r7, #4
 8007a60:	4b12      	ldr	r3, [pc, #72]	; (8007aac <DIS_Init+0x64>)
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	2303      	movs	r3, #3
 8007a66:	2201      	movs	r2, #1
 8007a68:	2001      	movs	r0, #1
 8007a6a:	f000 fcea 	bl	8008442 <aci_gatt_add_service>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 8007a72:	f642 2329 	movw	r3, #10793	; 0x2a29
 8007a76:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8007a78:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <DIS_Init+0x64>)
 8007a7a:	8818      	ldrh	r0, [r3, #0]
 8007a7c:	1d3a      	adds	r2, r7, #4
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <DIS_Init+0x68>)
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	2301      	movs	r3, #1
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	230a      	movs	r3, #10
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9302      	str	r3, [sp, #8]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	2302      	movs	r3, #2
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	2320      	movs	r3, #32
 8007a98:	2101      	movs	r1, #1
 8007a9a:	f000 fd81 	bl	80085a0 <aci_gatt_add_char>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 8007aa2:	bf00      	nop
}
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200002b0 	.word	0x200002b0
 8007ab0:	200002b2 	.word	0x200002b2

08007ab4 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  return;
 8007ab8:	bf00      	nop
}
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	af00      	add	r7, sp, #0
  return;
 8007ac6:	bf00      	nop
}
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  return;
 8007ad4:	bf00      	nop
}
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007ade:	b480      	push	{r7}
 8007ae0:	af00      	add	r7, sp, #0
  return;
 8007ae2:	bf00      	nop
}
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HRS_Init>:
__weak void HRS_Init( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  return;
 8007af0:	bf00      	nop
}
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <HTS_Init>:
__weak void HTS_Init( void )
{
 8007afa:	b480      	push	{r7}
 8007afc:	af00      	add	r7, sp, #0
  return;
 8007afe:	bf00      	nop
}
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <IAS_Init>:
__weak void IAS_Init( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  return;
 8007b0c:	bf00      	nop
}
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <LLS_Init>:
__weak void LLS_Init( void )
{
 8007b16:	b480      	push	{r7}
 8007b18:	af00      	add	r7, sp, #0
  return;
 8007b1a:	bf00      	nop
}
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <TPS_Init>:
__weak void TPS_Init( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	af00      	add	r7, sp, #0
  return;
 8007b28:	bf00      	nop
}
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8007b32:	b480      	push	{r7}
 8007b34:	af00      	add	r7, sp, #0
  return;
 8007b36:	bf00      	nop
}
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  return;
 8007b44:	bf00      	nop
}
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <MESH_Init>:
__weak void MESH_Init( void )
{
 8007b4e:	b480      	push	{r7}
 8007b50:	af00      	add	r7, sp, #0
  return;
 8007b52:	bf00      	nop
}
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
  return;
 8007b60:	bf00      	nop
}
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	af00      	add	r7, sp, #0
  return;
 8007b6e:	bf00      	nop
}
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <SVCCTL_Init+0x18>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007b82:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <SVCCTL_Init+0x1c>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007b88:	f000 f806 	bl	8007b98 <SVCCTL_SvcInit>

  return;
 8007b8c:	bf00      	nop
}
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	200002b4 	.word	0x200002b4
 8007b94:	200002d4 	.word	0x200002d4

08007b98 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
  BLS_Init();
 8007b9c:	f7ff ff8a 	bl	8007ab4 <BLS_Init>

  CRS_STM_Init();
 8007ba0:	f7ff ff8f 	bl	8007ac2 <CRS_STM_Init>

  DIS_Init();
 8007ba4:	f7ff ff50 	bl	8007a48 <DIS_Init>

  EDS_STM_Init();
 8007ba8:	f7ff ff92 	bl	8007ad0 <EDS_STM_Init>

  HIDS_Init();
 8007bac:	f7ff ff97 	bl	8007ade <HIDS_Init>

  HRS_Init();
 8007bb0:	f7ff ff9c 	bl	8007aec <HRS_Init>

  HTS_Init();
 8007bb4:	f7ff ffa1 	bl	8007afa <HTS_Init>

  IAS_Init();
 8007bb8:	f7ff ffa6 	bl	8007b08 <IAS_Init>

  LLS_Init();
 8007bbc:	f7ff ffab 	bl	8007b16 <LLS_Init>

  TPS_Init();
 8007bc0:	f7ff ffb0 	bl	8007b24 <TPS_Init>

  MOTENV_STM_Init();
 8007bc4:	f7ff ffb5 	bl	8007b32 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007bc8:	f7f9 ff94 	bl	8001af4 <P2PS_STM_Init>

  OTAS_STM_Init();
 8007bcc:	f7ff ffb8 	bl	8007b40 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007bd0:	f7ff ffc4 	bl	8007b5c <BVOPUS_STM_Init>

  MESH_Init();
 8007bd4:	f7ff ffbb 	bl	8007b4e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007bd8:	f7ff ffc7 	bl	8007b6a <SVCCTL_InitCustomSvc>
  
  return;
 8007bdc:	bf00      	nop
}
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007be8:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <SVCCTL_RegisterSvcHandler+0x30>)
 8007bea:	7f1b      	ldrb	r3, [r3, #28]
 8007bec:	4619      	mov	r1, r3
 8007bee:	4a08      	ldr	r2, [pc, #32]	; (8007c10 <SVCCTL_RegisterSvcHandler+0x30>)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007bf6:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <SVCCTL_RegisterSvcHandler+0x30>)
 8007bf8:	7f1b      	ldrb	r3, [r3, #28]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <SVCCTL_RegisterSvcHandler+0x30>)
 8007c00:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007c02:	bf00      	nop
}
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	200002b4 	.word	0x200002b4

08007c14 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2bff      	cmp	r3, #255	; 0xff
 8007c2c:	d000      	beq.n	8007c30 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8007c2e:	e025      	b.n	8007c7c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	3302      	adds	r3, #2
 8007c34:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c44:	d000      	beq.n	8007c48 <SVCCTL_UserEvtRx+0x34>
          break;
 8007c46:	e018      	b.n	8007c7a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	757b      	strb	r3, [r7, #21]
 8007c4c:	e00d      	b.n	8007c6a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007c4e:	7d7b      	ldrb	r3, [r7, #21]
 8007c50:	4a18      	ldr	r2, [pc, #96]	; (8007cb4 <SVCCTL_UserEvtRx+0xa0>)
 8007c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d108      	bne.n	8007c76 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007c64:	7d7b      	ldrb	r3, [r7, #21]
 8007c66:	3301      	adds	r3, #1
 8007c68:	757b      	strb	r3, [r7, #21]
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <SVCCTL_UserEvtRx+0xa0>)
 8007c6c:	7f1b      	ldrb	r3, [r3, #28]
 8007c6e:	7d7a      	ldrb	r2, [r7, #21]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d3ec      	bcc.n	8007c4e <SVCCTL_UserEvtRx+0x3a>
          break;
 8007c74:	e000      	b.n	8007c78 <SVCCTL_UserEvtRx+0x64>
              break;
 8007c76:	bf00      	nop
          break;
 8007c78:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8007c7a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d009      	beq.n	8007c96 <SVCCTL_UserEvtRx+0x82>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d00a      	beq.n	8007c9c <SVCCTL_UserEvtRx+0x88>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7f9 f992 	bl	8000fb4 <SVCCTL_App_Notification>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75bb      	strb	r3, [r7, #22]
      break;
 8007c94:	e008      	b.n	8007ca8 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007c96:	2301      	movs	r3, #1
 8007c98:	75bb      	strb	r3, [r7, #22]
      break;
 8007c9a:	e005      	b.n	8007ca8 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75bb      	strb	r3, [r7, #22]
      break;
 8007ca0:	e002      	b.n	8007ca8 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	75bb      	strb	r3, [r7, #22]
      break;
 8007ca6:	bf00      	nop
  }

  return (return_status);
 8007ca8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	200002b4 	.word	0x200002b4

08007cb8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cc2:	f107 0308 	add.w	r3, r7, #8
 8007cc6:	2218      	movs	r2, #24
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 ffe6 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cd0:	233f      	movs	r3, #63	; 0x3f
 8007cd2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007cd4:	2381      	movs	r3, #129	; 0x81
 8007cd6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007cd8:	1dfb      	adds	r3, r7, #7
 8007cda:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ce0:	f107 0308 	add.w	r3, r7, #8
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 f880 	bl	8008dec <hci_send_req>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da01      	bge.n	8007cf6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007cf2:	23ff      	movs	r3, #255	; 0xff
 8007cf4:	e000      	b.n	8007cf8 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3720      	adds	r7, #32
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007d00:	b5b0      	push	{r4, r5, r7, lr}
 8007d02:	b0ce      	sub	sp, #312	; 0x138
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4605      	mov	r5, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	1dfb      	adds	r3, r7, #7
 8007d10:	462a      	mov	r2, r5
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	1d3b      	adds	r3, r7, #4
 8007d16:	4622      	mov	r2, r4
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	1cbb      	adds	r3, r7, #2
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	801a      	strh	r2, [r3, #0]
 8007d20:	1dbb      	adds	r3, r7, #6
 8007d22:	460a      	mov	r2, r1
 8007d24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007d26:	f107 0310 	add.w	r3, r7, #16
 8007d2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007d2e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007d32:	3308      	adds	r3, #8
 8007d34:	f107 0210 	add.w	r2, r7, #16
 8007d38:	4413      	add	r3, r2
 8007d3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007d3e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007d42:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007d46:	4413      	add	r3, r2
 8007d48:	3309      	adds	r3, #9
 8007d4a:	f107 0210 	add.w	r2, r7, #16
 8007d4e:	4413      	add	r3, r2
 8007d50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d54:	f107 030f 	add.w	r3, r7, #15
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007d62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d66:	1dfa      	adds	r2, r7, #7
 8007d68:	7812      	ldrb	r2, [r2, #0]
 8007d6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d70:	3301      	adds	r3, #1
 8007d72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007d76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d7a:	1d3a      	adds	r2, r7, #4
 8007d7c:	8812      	ldrh	r2, [r2, #0]
 8007d7e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d86:	3302      	adds	r3, #2
 8007d88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007d8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d90:	1cba      	adds	r2, r7, #2
 8007d92:	8812      	ldrh	r2, [r2, #0]
 8007d94:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007da6:	1dba      	adds	r2, r7, #6
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db0:	3301      	adds	r3, #1
 8007db2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dba:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007dbe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007dca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007dce:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007dd2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dd8:	3301      	adds	r3, #1
 8007dda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007de2:	3308      	adds	r3, #8
 8007de4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007de8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 ff45 	bl	8008c7c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007df2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007df6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007e00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e04:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007e08:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007e14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e18:	3301      	adds	r3, #1
 8007e1a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007e1e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 ff2a 	bl	8008c7c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007e28:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007e2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e30:	4413      	add	r3, r2
 8007e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007e3e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e44:	3302      	adds	r3, #2
 8007e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007e52:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007e54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e58:	3302      	adds	r3, #2
 8007e5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e62:	2218      	movs	r2, #24
 8007e64:	2100      	movs	r1, #0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 ff18 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e6c:	233f      	movs	r3, #63	; 0x3f
 8007e6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007e72:	2383      	movs	r3, #131	; 0x83
 8007e74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e78:	f107 0310 	add.w	r3, r7, #16
 8007e7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e88:	f107 030f 	add.w	r3, r7, #15
 8007e8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 ffa5 	bl	8008dec <hci_send_req>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da01      	bge.n	8007eac <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007ea8:	23ff      	movs	r3, #255	; 0xff
 8007eaa:	e002      	b.n	8007eb2 <aci_gap_set_discoverable+0x1b2>
  return status;
 8007eac:	f107 030f 	add.w	r3, r7, #15
 8007eb0:	781b      	ldrb	r3, [r3, #0]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bdb0      	pop	{r4, r5, r7, pc}

08007ebc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b0cc      	sub	sp, #304	; 0x130
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	1dfb      	adds	r3, r7, #7
 8007ec6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007ec8:	f107 0310 	add.w	r3, r7, #16
 8007ecc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ed0:	f107 030f 	add.w	r3, r7, #15
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee2:	1dfa      	adds	r2, r7, #7
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eec:	3301      	adds	r3, #1
 8007eee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ef6:	2218      	movs	r2, #24
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fece 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f00:	233f      	movs	r3, #63	; 0x3f
 8007f02:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007f06:	2385      	movs	r3, #133	; 0x85
 8007f08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f0c:	f107 0310 	add.w	r3, r7, #16
 8007f10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f1c:	f107 030f 	add.w	r3, r7, #15
 8007f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 ff5b 	bl	8008dec <hci_send_req>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da01      	bge.n	8007f40 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007f3c:	23ff      	movs	r3, #255	; 0xff
 8007f3e:	e002      	b.n	8007f46 <aci_gap_set_io_capability+0x8a>
  return status;
 8007f40:	f107 030f 	add.w	r3, r7, #15
 8007f44:	781b      	ldrb	r3, [r3, #0]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007f50:	b5b0      	push	{r4, r5, r7, lr}
 8007f52:	b0cc      	sub	sp, #304	; 0x130
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4605      	mov	r5, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	1dfb      	adds	r3, r7, #7
 8007f60:	462a      	mov	r2, r5
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	1dbb      	adds	r3, r7, #6
 8007f66:	4622      	mov	r2, r4
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	1d7b      	adds	r3, r7, #5
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	1d3b      	adds	r3, r7, #4
 8007f72:	460a      	mov	r2, r1
 8007f74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007f76:	f107 0310 	add.w	r3, r7, #16
 8007f7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f7e:	f107 030f 	add.w	r3, r7, #15
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f90:	1dfa      	adds	r2, r7, #7
 8007f92:	7812      	ldrb	r2, [r2, #0]
 8007f94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa4:	1dba      	adds	r2, r7, #6
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fae:	3301      	adds	r3, #1
 8007fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb8:	1d7a      	adds	r2, r7, #5
 8007fba:	7812      	ldrb	r2, [r2, #0]
 8007fbc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fcc:	1d3a      	adds	r2, r7, #4
 8007fce:	7812      	ldrb	r2, [r2, #0]
 8007fd0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007fe4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007fe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fea:	3301      	adds	r3, #1
 8007fec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007ff8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ffe:	3301      	adds	r3, #1
 8008000:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008008:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800800c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800800e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008012:	3301      	adds	r3, #1
 8008014:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008020:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008028:	3304      	adds	r3, #4
 800802a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800802e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008032:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008036:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800803c:	3301      	adds	r3, #1
 800803e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008042:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008046:	2218      	movs	r2, #24
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fe26 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008050:	233f      	movs	r3, #63	; 0x3f
 8008052:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008056:	2386      	movs	r3, #134	; 0x86
 8008058:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800805c:	f107 0310 	add.w	r3, r7, #16
 8008060:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008064:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008068:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800806c:	f107 030f 	add.w	r3, r7, #15
 8008070:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008074:	2301      	movs	r3, #1
 8008076:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800807a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800807e:	2100      	movs	r1, #0
 8008080:	4618      	mov	r0, r3
 8008082:	f000 feb3 	bl	8008dec <hci_send_req>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	da01      	bge.n	8008090 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800808c:	23ff      	movs	r3, #255	; 0xff
 800808e:	e002      	b.n	8008096 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8008090:	f107 030f 	add.w	r3, r7, #15
 8008094:	781b      	ldrb	r3, [r3, #0]
}
 8008096:	4618      	mov	r0, r3
 8008098:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800809c:	46bd      	mov	sp, r7
 800809e:	bdb0      	pop	{r4, r5, r7, pc}

080080a0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b0cd      	sub	sp, #308	; 0x134
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4604      	mov	r4, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	4611      	mov	r1, r2
 80080ac:	463a      	mov	r2, r7
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	1dfb      	adds	r3, r7, #7
 80080b2:	4622      	mov	r2, r4
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	1dbb      	adds	r3, r7, #6
 80080b8:	4602      	mov	r2, r0
 80080ba:	701a      	strb	r2, [r3, #0]
 80080bc:	1d7b      	adds	r3, r7, #5
 80080be:	460a      	mov	r2, r1
 80080c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80080c2:	f107 0310 	add.w	r3, r7, #16
 80080c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80080ca:	f107 0308 	add.w	r3, r7, #8
 80080ce:	2207      	movs	r2, #7
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fde2 	bl	8008c9c <Osal_MemSet>
  int index_input = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	1dfa      	adds	r2, r7, #7
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080ec:	3301      	adds	r3, #1
 80080ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80080f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f6:	1dba      	adds	r2, r7, #6
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80080fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008100:	3301      	adds	r3, #1
 8008102:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810a:	1d7a      	adds	r2, r7, #5
 800810c:	7812      	ldrb	r2, [r2, #0]
 800810e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008110:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008114:	3301      	adds	r3, #1
 8008116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800811a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800811e:	2218      	movs	r2, #24
 8008120:	2100      	movs	r1, #0
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fdba 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008128:	233f      	movs	r3, #63	; 0x3f
 800812a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800812e:	238a      	movs	r3, #138	; 0x8a
 8008130:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008134:	f107 0310 	add.w	r3, r7, #16
 8008138:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800813c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008140:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008144:	f107 0308 	add.w	r3, r7, #8
 8008148:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800814c:	2307      	movs	r3, #7
 800814e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fe47 	bl	8008dec <hci_send_req>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	da01      	bge.n	8008168 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008164:	23ff      	movs	r3, #255	; 0xff
 8008166:	e021      	b.n	80081ac <aci_gap_init+0x10c>
  if ( resp.Status )
 8008168:	f107 0308 	add.w	r3, r7, #8
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <aci_gap_init+0xda>
    return resp.Status;
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	e018      	b.n	80081ac <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008182:	b29a      	uxth	r2, r3
 8008184:	463b      	mov	r3, r7
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008192:	b29a      	uxth	r2, r3
 8008194:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008198:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800819a:	f107 0308 	add.w	r3, r7, #8
 800819e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80081a8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd90      	pop	{r4, r7, pc}

080081b6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b0cc      	sub	sp, #304	; 0x130
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	4602      	mov	r2, r0
 80081be:	463b      	mov	r3, r7
 80081c0:	6019      	str	r1, [r3, #0]
 80081c2:	1dfb      	adds	r3, r7, #7
 80081c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80081c6:	f107 0310 	add.w	r3, r7, #16
 80081ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80081ce:	f107 030f 	add.w	r3, r7, #15
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80081dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e0:	1dfa      	adds	r2, r7, #7
 80081e2:	7812      	ldrb	r2, [r2, #0]
 80081e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081ea:	3301      	adds	r3, #1
 80081ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80081f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f4:	1c58      	adds	r0, r3, #1
 80081f6:	1dfb      	adds	r3, r7, #7
 80081f8:	781a      	ldrb	r2, [r3, #0]
 80081fa:	463b      	mov	r3, r7
 80081fc:	6819      	ldr	r1, [r3, #0]
 80081fe:	f000 fd3d 	bl	8008c7c <Osal_MemCpy>
  index_input += AdvDataLen;
 8008202:	1dfb      	adds	r3, r7, #7
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800820a:	4413      	add	r3, r2
 800820c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008210:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008214:	2218      	movs	r2, #24
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fd3f 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 800821e:	233f      	movs	r3, #63	; 0x3f
 8008220:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008224:	238e      	movs	r3, #142	; 0x8e
 8008226:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800822a:	f107 0310 	add.w	r3, r7, #16
 800822e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008236:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800823a:	f107 030f 	add.w	r3, r7, #15
 800823e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008242:	2301      	movs	r3, #1
 8008244:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008248:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fdcc 	bl	8008dec <hci_send_req>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	da01      	bge.n	800825e <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800825a:	23ff      	movs	r3, #255	; 0xff
 800825c:	e002      	b.n	8008264 <aci_gap_update_adv_data+0xae>
  return status;
 800825e:	f107 030f 	add.w	r3, r7, #15
 8008262:	781b      	ldrb	r3, [r3, #0]
}
 8008264:	4618      	mov	r0, r3
 8008266:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b088      	sub	sp, #32
 8008272:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008278:	f107 0308 	add.w	r3, r7, #8
 800827c:	2218      	movs	r2, #24
 800827e:	2100      	movs	r1, #0
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fd0b 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008286:	233f      	movs	r3, #63	; 0x3f
 8008288:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800828a:	2392      	movs	r3, #146	; 0x92
 800828c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800828e:	1dfb      	adds	r3, r7, #7
 8008290:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008292:	2301      	movs	r3, #1
 8008294:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	2100      	movs	r1, #0
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fda5 	bl	8008dec <hci_send_req>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da01      	bge.n	80082ac <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80082a8:	23ff      	movs	r3, #255	; 0xff
 80082aa:	e000      	b.n	80082ae <aci_gap_configure_whitelist+0x40>
  return status;
 80082ac:	79fb      	ldrb	r3, [r7, #7]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3720      	adds	r7, #32
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b0cc      	sub	sp, #304	; 0x130
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	4602      	mov	r2, r0
 80082be:	1dbb      	adds	r3, r7, #6
 80082c0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80082ca:	f107 030f 	add.w	r3, r7, #15
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80082d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082dc:	1dba      	adds	r2, r7, #6
 80082de:	8812      	ldrh	r2, [r2, #0]
 80082e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082e6:	3302      	adds	r3, #2
 80082e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082f0:	2218      	movs	r2, #24
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fcd1 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80082fa:	233f      	movs	r3, #63	; 0x3f
 80082fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8008300:	2395      	movs	r3, #149	; 0x95
 8008302:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008306:	f107 0310 	add.w	r3, r7, #16
 800830a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800830e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008312:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008316:	f107 030f 	add.w	r3, r7, #15
 800831a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800831e:	2301      	movs	r3, #1
 8008320:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008324:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fd5e 	bl	8008dec <hci_send_req>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	da01      	bge.n	800833a <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 8008336:	23ff      	movs	r3, #255	; 0xff
 8008338:	e002      	b.n	8008340 <aci_gap_allow_rebond+0x8a>
  return status;
 800833a:	f107 030f 	add.w	r3, r7, #15
 800833e:	781b      	ldrb	r3, [r3, #0]
}
 8008340:	4618      	mov	r0, r3
 8008342:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b0cc      	sub	sp, #304	; 0x130
 800834e:	af00      	add	r7, sp, #0
 8008350:	4602      	mov	r2, r0
 8008352:	1dbb      	adds	r3, r7, #6
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	1d7b      	adds	r3, r7, #5
 8008358:	460a      	mov	r2, r1
 800835a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800835c:	f107 0310 	add.w	r3, r7, #16
 8008360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008364:	f107 030f 	add.w	r3, r7, #15
 8008368:	2200      	movs	r2, #0
 800836a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008376:	1dba      	adds	r2, r7, #6
 8008378:	8812      	ldrh	r2, [r2, #0]
 800837a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800837c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008380:	3302      	adds	r3, #2
 8008382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838a:	1d7a      	adds	r2, r7, #5
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008394:	3301      	adds	r3, #1
 8008396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800839a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800839e:	2218      	movs	r2, #24
 80083a0:	2100      	movs	r1, #0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fc7a 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80083a8:	233f      	movs	r3, #63	; 0x3f
 80083aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80083ae:	23a5      	movs	r3, #165	; 0xa5
 80083b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80083bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80083c4:	f107 030f 	add.w	r3, r7, #15
 80083c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083d6:	2100      	movs	r1, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fd07 	bl	8008dec <hci_send_req>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da01      	bge.n	80083e8 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80083e4:	23ff      	movs	r3, #255	; 0xff
 80083e6:	e002      	b.n	80083ee <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80083e8:	f107 030f 	add.w	r3, r7, #15
 80083ec:	781b      	ldrb	r3, [r3, #0]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	2218      	movs	r2, #24
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fc46 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008410:	233f      	movs	r3, #63	; 0x3f
 8008412:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008414:	f240 1301 	movw	r3, #257	; 0x101
 8008418:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800841a:	1dfb      	adds	r3, r7, #7
 800841c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800841e:	2301      	movs	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fcdf 	bl	8008dec <hci_send_req>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	da01      	bge.n	8008438 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008434:	23ff      	movs	r3, #255	; 0xff
 8008436:	e000      	b.n	800843a <aci_gatt_init+0x42>
  return status;
 8008438:	79fb      	ldrb	r3, [r7, #7]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008442:	b590      	push	{r4, r7, lr}
 8008444:	b0cf      	sub	sp, #316	; 0x13c
 8008446:	af00      	add	r7, sp, #0
 8008448:	4604      	mov	r4, r0
 800844a:	4638      	mov	r0, r7
 800844c:	6001      	str	r1, [r0, #0]
 800844e:	4610      	mov	r0, r2
 8008450:	4619      	mov	r1, r3
 8008452:	1dfb      	adds	r3, r7, #7
 8008454:	4622      	mov	r2, r4
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	1dbb      	adds	r3, r7, #6
 800845a:	4602      	mov	r2, r0
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	1d7b      	adds	r3, r7, #5
 8008460:	460a      	mov	r2, r1
 8008462:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008464:	f107 0310 	add.w	r3, r7, #16
 8008468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800846c:	1dfb      	adds	r3, r7, #7
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d007      	beq.n	8008484 <aci_gatt_add_service+0x42>
 8008474:	1dfb      	adds	r3, r7, #7
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d101      	bne.n	8008480 <aci_gatt_add_service+0x3e>
 800847c:	2311      	movs	r3, #17
 800847e:	e002      	b.n	8008486 <aci_gatt_add_service+0x44>
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <aci_gatt_add_service+0x44>
 8008484:	2303      	movs	r3, #3
 8008486:	f107 0210 	add.w	r2, r7, #16
 800848a:	4413      	add	r3, r2
 800848c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	2203      	movs	r2, #3
 8008496:	2100      	movs	r1, #0
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fbff 	bl	8008c9c <Osal_MemSet>
  int index_input = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80084a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084a8:	1dfa      	adds	r2, r7, #7
 80084aa:	7812      	ldrb	r2, [r2, #0]
 80084ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084b2:	3301      	adds	r3, #1
 80084b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80084b8:	1dfb      	adds	r3, r7, #7
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d002      	beq.n	80084c6 <aci_gatt_add_service+0x84>
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d004      	beq.n	80084ce <aci_gatt_add_service+0x8c>
 80084c4:	e007      	b.n	80084d6 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80084c6:	2302      	movs	r3, #2
 80084c8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80084cc:	e005      	b.n	80084da <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80084ce:	2310      	movs	r3, #16
 80084d0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80084d4:	e001      	b.n	80084da <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80084d6:	2347      	movs	r3, #71	; 0x47
 80084d8:	e05d      	b.n	8008596 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80084da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084de:	1c58      	adds	r0, r3, #1
 80084e0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80084e4:	463b      	mov	r3, r7
 80084e6:	6819      	ldr	r1, [r3, #0]
 80084e8:	f000 fbc8 	bl	8008c7c <Osal_MemCpy>
    index_input += size;
 80084ec:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80084f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80084f4:	4413      	add	r3, r2
 80084f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80084fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fe:	1dba      	adds	r2, r7, #6
 8008500:	7812      	ldrb	r2, [r2, #0]
 8008502:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008508:	3301      	adds	r3, #1
 800850a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800850e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008512:	1d7a      	adds	r2, r7, #5
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008518:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800851c:	3301      	adds	r3, #1
 800851e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008526:	2218      	movs	r2, #24
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fbb6 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008530:	233f      	movs	r3, #63	; 0x3f
 8008532:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008536:	f44f 7381 	mov.w	r3, #258	; 0x102
 800853a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800853e:	f107 0310 	add.w	r3, r7, #16
 8008542:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800854a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008556:	2303      	movs	r3, #3
 8008558:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800855c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fc42 	bl	8008dec <hci_send_req>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	da01      	bge.n	8008572 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800856e:	23ff      	movs	r3, #255	; 0xff
 8008570:	e011      	b.n	8008596 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008572:	f107 030c 	add.w	r3, r7, #12
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <aci_gatt_add_service+0x142>
    return resp.Status;
 800857c:	f107 030c 	add.w	r3, r7, #12
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	e008      	b.n	8008596 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8008584:	f107 030c 	add.w	r3, r7, #12
 8008588:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800858c:	b29a      	uxth	r2, r3
 800858e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008592:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800859c:	46bd      	mov	sp, r7
 800859e:	bd90      	pop	{r4, r7, pc}

080085a0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b0d1      	sub	sp, #324	; 0x144
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	f107 0108 	add.w	r1, r7, #8
 80085ae:	600a      	str	r2, [r1, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	f107 030e 	add.w	r3, r7, #14
 80085b6:	4622      	mov	r2, r4
 80085b8:	801a      	strh	r2, [r3, #0]
 80085ba:	f107 030d 	add.w	r3, r7, #13
 80085be:	4602      	mov	r2, r0
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	1dbb      	adds	r3, r7, #6
 80085c4:	460a      	mov	r2, r1
 80085c6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80085c8:	f107 0318 	add.w	r3, r7, #24
 80085cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80085d0:	f107 030d 	add.w	r3, r7, #13
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d008      	beq.n	80085ec <aci_gatt_add_char+0x4c>
 80085da:	f107 030d 	add.w	r3, r7, #13
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d101      	bne.n	80085e8 <aci_gatt_add_char+0x48>
 80085e4:	2313      	movs	r3, #19
 80085e6:	e002      	b.n	80085ee <aci_gatt_add_char+0x4e>
 80085e8:	2303      	movs	r3, #3
 80085ea:	e000      	b.n	80085ee <aci_gatt_add_char+0x4e>
 80085ec:	2305      	movs	r3, #5
 80085ee:	f107 0218 	add.w	r2, r7, #24
 80085f2:	4413      	add	r3, r2
 80085f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80085f8:	f107 0314 	add.w	r3, r7, #20
 80085fc:	2203      	movs	r2, #3
 80085fe:	2100      	movs	r1, #0
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fb4b 	bl	8008c9c <Osal_MemSet>
  int index_input = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800860c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008610:	f107 020e 	add.w	r2, r7, #14
 8008614:	8812      	ldrh	r2, [r2, #0]
 8008616:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008618:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800861c:	3302      	adds	r3, #2
 800861e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008622:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008626:	f107 020d 	add.w	r2, r7, #13
 800862a:	7812      	ldrb	r2, [r2, #0]
 800862c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800862e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008632:	3301      	adds	r3, #1
 8008634:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008638:	f107 030d 	add.w	r3, r7, #13
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d002      	beq.n	8008648 <aci_gatt_add_char+0xa8>
 8008642:	2b02      	cmp	r3, #2
 8008644:	d004      	beq.n	8008650 <aci_gatt_add_char+0xb0>
 8008646:	e007      	b.n	8008658 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8008648:	2302      	movs	r3, #2
 800864a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800864e:	e005      	b.n	800865c <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8008650:	2310      	movs	r3, #16
 8008652:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008656:	e001      	b.n	800865c <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8008658:	2347      	movs	r3, #71	; 0x47
 800865a:	e086      	b.n	800876a <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800865c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008660:	1cd8      	adds	r0, r3, #3
 8008662:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	6819      	ldr	r1, [r3, #0]
 800866c:	f000 fb06 	bl	8008c7c <Osal_MemCpy>
    index_input += size;
 8008670:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008674:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008678:	4413      	add	r3, r2
 800867a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800867e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008682:	1dba      	adds	r2, r7, #6
 8008684:	8812      	ldrh	r2, [r2, #0]
 8008686:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008688:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800868c:	3302      	adds	r3, #2
 800868e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008692:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008696:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800869a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800869c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80086a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086aa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80086ae:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80086b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086b4:	3301      	adds	r3, #1
 80086b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80086ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086be:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80086c2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80086c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086c8:	3301      	adds	r3, #1
 80086ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80086ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086d2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80086d6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80086d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80086e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086e6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80086ea:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80086ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086f0:	3301      	adds	r3, #1
 80086f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80086fa:	2218      	movs	r2, #24
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 facc 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008704:	233f      	movs	r3, #63	; 0x3f
 8008706:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800870a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800870e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800871a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800871e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008722:	f107 0314 	add.w	r3, r7, #20
 8008726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800872a:	2303      	movs	r3, #3
 800872c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008730:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008734:	2100      	movs	r1, #0
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fb58 	bl	8008dec <hci_send_req>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	da01      	bge.n	8008746 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008742:	23ff      	movs	r3, #255	; 0xff
 8008744:	e011      	b.n	800876a <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8008746:	f107 0314 	add.w	r3, r7, #20
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8008750:	f107 0314 	add.w	r3, r7, #20
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	e008      	b.n	800876a <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008760:	b29a      	uxth	r2, r3
 8008762:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008766:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008770:	46bd      	mov	sp, r7
 8008772:	bd90      	pop	{r4, r7, pc}

08008774 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008774:	b5b0      	push	{r4, r5, r7, lr}
 8008776:	b0cc      	sub	sp, #304	; 0x130
 8008778:	af00      	add	r7, sp, #0
 800877a:	4605      	mov	r5, r0
 800877c:	460c      	mov	r4, r1
 800877e:	4610      	mov	r0, r2
 8008780:	4619      	mov	r1, r3
 8008782:	1dbb      	adds	r3, r7, #6
 8008784:	462a      	mov	r2, r5
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	4622      	mov	r2, r4
 800878c:	801a      	strh	r2, [r3, #0]
 800878e:	1cfb      	adds	r3, r7, #3
 8008790:	4602      	mov	r2, r0
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	1cbb      	adds	r3, r7, #2
 8008796:	460a      	mov	r2, r1
 8008798:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800879a:	f107 0310 	add.w	r3, r7, #16
 800879e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087a2:	f107 030f 	add.w	r3, r7, #15
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80087b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b4:	1dba      	adds	r2, r7, #6
 80087b6:	8812      	ldrh	r2, [r2, #0]
 80087b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087be:	3302      	adds	r3, #2
 80087c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80087c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c8:	1d3a      	adds	r2, r7, #4
 80087ca:	8812      	ldrh	r2, [r2, #0]
 80087cc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80087ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087d2:	3302      	adds	r3, #2
 80087d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80087d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087dc:	1cfa      	adds	r2, r7, #3
 80087de:	7812      	ldrb	r2, [r2, #0]
 80087e0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80087e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087e6:	3301      	adds	r3, #1
 80087e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80087ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f0:	1cba      	adds	r2, r7, #2
 80087f2:	7812      	ldrb	r2, [r2, #0]
 80087f4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80087f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087fa:	3301      	adds	r3, #1
 80087fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008804:	1d98      	adds	r0, r3, #6
 8008806:	1cbb      	adds	r3, r7, #2
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008810:	f000 fa34 	bl	8008c7c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008814:	1cbb      	adds	r3, r7, #2
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800881c:	4413      	add	r3, r2
 800881e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008826:	2218      	movs	r2, #24
 8008828:	2100      	movs	r1, #0
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fa36 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008830:	233f      	movs	r3, #63	; 0x3f
 8008832:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008836:	f44f 7383 	mov.w	r3, #262	; 0x106
 800883a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800883e:	f107 0310 	add.w	r3, r7, #16
 8008842:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800884a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800884e:	f107 030f 	add.w	r3, r7, #15
 8008852:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008856:	2301      	movs	r3, #1
 8008858:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800885c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008860:	2100      	movs	r1, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fac2 	bl	8008dec <hci_send_req>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	da01      	bge.n	8008872 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800886e:	23ff      	movs	r3, #255	; 0xff
 8008870:	e002      	b.n	8008878 <aci_gatt_update_char_value+0x104>
  return status;
 8008872:	f107 030f 	add.w	r3, r7, #15
 8008876:	781b      	ldrb	r3, [r3, #0]
}
 8008878:	4618      	mov	r0, r3
 800887a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800887e:	46bd      	mov	sp, r7
 8008880:	bdb0      	pop	{r4, r5, r7, pc}

08008882 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b0cc      	sub	sp, #304	; 0x130
 8008886:	af00      	add	r7, sp, #0
 8008888:	463b      	mov	r3, r7
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	1dfb      	adds	r3, r7, #7
 800888e:	4602      	mov	r2, r0
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	1dbb      	adds	r3, r7, #6
 8008894:	460a      	mov	r2, r1
 8008896:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008898:	f107 0310 	add.w	r3, r7, #16
 800889c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088a0:	f107 030f 	add.w	r3, r7, #15
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80088ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b2:	1dfa      	adds	r2, r7, #7
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088bc:	3301      	adds	r3, #1
 80088be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80088c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c6:	1dba      	adds	r2, r7, #6
 80088c8:	7812      	ldrb	r2, [r2, #0]
 80088ca:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088d0:	3301      	adds	r3, #1
 80088d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80088d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088da:	1c98      	adds	r0, r3, #2
 80088dc:	1dbb      	adds	r3, r7, #6
 80088de:	781a      	ldrb	r2, [r3, #0]
 80088e0:	463b      	mov	r3, r7
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	f000 f9ca 	bl	8008c7c <Osal_MemCpy>
  index_input += Length;
 80088e8:	1dbb      	adds	r3, r7, #6
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80088f0:	4413      	add	r3, r2
 80088f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088fa:	2218      	movs	r2, #24
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 f9cc 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008904:	233f      	movs	r3, #63	; 0x3f
 8008906:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800890a:	230c      	movs	r3, #12
 800890c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008910:	f107 0310 	add.w	r3, r7, #16
 8008914:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008918:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800891c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008920:	f107 030f 	add.w	r3, r7, #15
 8008924:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008928:	2301      	movs	r3, #1
 800892a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800892e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008932:	2100      	movs	r1, #0
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fa59 	bl	8008dec <hci_send_req>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	da01      	bge.n	8008944 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008940:	23ff      	movs	r3, #255	; 0xff
 8008942:	e002      	b.n	800894a <aci_hal_write_config_data+0xc8>
  return status;
 8008944:	f107 030f 	add.w	r3, r7, #15
 8008948:	781b      	ldrb	r3, [r3, #0]
}
 800894a:	4618      	mov	r0, r3
 800894c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b0cc      	sub	sp, #304	; 0x130
 8008958:	af00      	add	r7, sp, #0
 800895a:	4602      	mov	r2, r0
 800895c:	1dfb      	adds	r3, r7, #7
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	1dbb      	adds	r3, r7, #6
 8008962:	460a      	mov	r2, r1
 8008964:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008966:	f107 0310 	add.w	r3, r7, #16
 800896a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800896e:	f107 030f 	add.w	r3, r7, #15
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	1dfa      	adds	r2, r7, #7
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008986:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800898a:	3301      	adds	r3, #1
 800898c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008994:	1dba      	adds	r2, r7, #6
 8008996:	7812      	ldrb	r2, [r2, #0]
 8008998:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800899a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800899e:	3301      	adds	r3, #1
 80089a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089a8:	2218      	movs	r2, #24
 80089aa:	2100      	movs	r1, #0
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f975 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 80089b2:	233f      	movs	r3, #63	; 0x3f
 80089b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80089b8:	230f      	movs	r3, #15
 80089ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089be:	f107 0310 	add.w	r3, r7, #16
 80089c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089ce:	f107 030f 	add.w	r3, r7, #15
 80089d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fa02 	bl	8008dec <hci_send_req>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da01      	bge.n	80089f2 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80089ee:	23ff      	movs	r3, #255	; 0xff
 80089f0:	e002      	b.n	80089f8 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80089f2:	f107 030f 	add.w	r3, r7, #15
 80089f6:	781b      	ldrb	r3, [r3, #0]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b0cc      	sub	sp, #304	; 0x130
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	4602      	mov	r2, r0
 8008a0a:	1dbb      	adds	r3, r7, #6
 8008a0c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008a0e:	f107 0310 	add.w	r3, r7, #16
 8008a12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a16:	f107 030f 	add.w	r3, r7, #15
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a28:	1dba      	adds	r2, r7, #6
 8008a2a:	8812      	ldrh	r2, [r2, #0]
 8008a2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a32:	3302      	adds	r3, #2
 8008a34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a3c:	2218      	movs	r2, #24
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 f92b 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a46:	233f      	movs	r3, #63	; 0x3f
 8008a48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008a4c:	2318      	movs	r3, #24
 8008a4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a52:	f107 0310 	add.w	r3, r7, #16
 8008a56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a62:	f107 030f 	add.w	r3, r7, #15
 8008a66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a74:	2100      	movs	r1, #0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f9b8 	bl	8008dec <hci_send_req>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	da01      	bge.n	8008a86 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8008a82:	23ff      	movs	r3, #255	; 0xff
 8008a84:	e002      	b.n	8008a8c <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8008a86:	f107 030f 	add.w	r3, r7, #15
 8008a8a:	781b      	ldrb	r3, [r3, #0]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b088      	sub	sp, #32
 8008a9a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008aa0:	f107 0308 	add.w	r3, r7, #8
 8008aa4:	2218      	movs	r2, #24
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f8f7 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x03;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008ab6:	1dfb      	adds	r3, r7, #7
 8008ab8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008abe:	f107 0308 	add.w	r3, r7, #8
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f991 	bl	8008dec <hci_send_req>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da01      	bge.n	8008ad4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008ad0:	23ff      	movs	r3, #255	; 0xff
 8008ad2:	e000      	b.n	8008ad6 <hci_reset+0x40>
  return status;
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b0ce      	sub	sp, #312	; 0x138
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	f107 0308 	add.w	r3, r7, #8
 8008ae8:	6019      	str	r1, [r3, #0]
 8008aea:	1d3b      	adds	r3, r7, #4
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	f107 030e 	add.w	r3, r7, #14
 8008af2:	4602      	mov	r2, r0
 8008af4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8008af6:	f107 0318 	add.w	r3, r7, #24
 8008afa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008afe:	f107 0310 	add.w	r3, r7, #16
 8008b02:	2205      	movs	r2, #5
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f8c8 	bl	8008c9c <Osal_MemSet>
  int index_input = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008b12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b16:	f107 020e 	add.w	r2, r7, #14
 8008b1a:	8812      	ldrh	r2, [r2, #0]
 8008b1c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b22:	3302      	adds	r3, #2
 8008b24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008b2c:	2218      	movs	r2, #24
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f8b3 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x08;
 8008b36:	2308      	movs	r3, #8
 8008b38:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8008b3c:	2330      	movs	r3, #48	; 0x30
 8008b3e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008b42:	f107 0318 	add.w	r3, r7, #24
 8008b46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008b4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008b52:	f107 0310 	add.w	r3, r7, #16
 8008b56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008b5a:	2305      	movs	r3, #5
 8008b5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f940 	bl	8008dec <hci_send_req>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	da01      	bge.n	8008b76 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8008b72:	23ff      	movs	r3, #255	; 0xff
 8008b74:	e016      	b.n	8008ba4 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8008b76:	f107 0310 	add.w	r3, r7, #16
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <hci_le_read_phy+0xaa>
    return resp.Status;
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	e00d      	b.n	8008ba4 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8008b88:	f107 0310 	add.w	r3, r7, #16
 8008b8c:	78da      	ldrb	r2, [r3, #3]
 8008b8e:	f107 0308 	add.w	r3, r7, #8
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8008b96:	f107 0310 	add.w	r3, r7, #16
 8008b9a:	791a      	ldrb	r2, [r3, #4]
 8008b9c:	1d3b      	adds	r3, r7, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008bae:	b590      	push	{r4, r7, lr}
 8008bb0:	b0cd      	sub	sp, #308	; 0x134
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	1dfb      	adds	r3, r7, #7
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	1dbb      	adds	r3, r7, #6
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	1d7b      	adds	r3, r7, #5
 8008bc8:	460a      	mov	r2, r1
 8008bca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008bcc:	f107 0310 	add.w	r3, r7, #16
 8008bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bd4:	f107 030f 	add.w	r3, r7, #15
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be6:	1dfa      	adds	r2, r7, #7
 8008be8:	7812      	ldrb	r2, [r2, #0]
 8008bea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bfa:	1dba      	adds	r2, r7, #6
 8008bfc:	7812      	ldrb	r2, [r2, #0]
 8008bfe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c04:	3301      	adds	r3, #1
 8008c06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0e:	1d7a      	adds	r2, r7, #5
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c18:	3301      	adds	r3, #1
 8008c1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c22:	2218      	movs	r2, #24
 8008c24:	2100      	movs	r1, #0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 f838 	bl	8008c9c <Osal_MemSet>
  rq.ogf = 0x08;
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008c32:	2331      	movs	r3, #49	; 0x31
 8008c34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c38:	f107 0310 	add.w	r3, r7, #16
 8008c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c48:	f107 030f 	add.w	r3, r7, #15
 8008c4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f8c5 	bl	8008dec <hci_send_req>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da01      	bge.n	8008c6c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008c68:	23ff      	movs	r3, #255	; 0xff
 8008c6a:	e002      	b.n	8008c72 <hci_le_set_default_phy+0xc4>
  return status;
 8008c6c:	f107 030f 	add.w	r3, r7, #15
 8008c70:	781b      	ldrb	r3, [r3, #0]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd90      	pop	{r4, r7, pc}

08008c7c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f004 fea5 	bl	800d9dc <memcpy>
 8008c92:	4603      	mov	r3, r0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f004 fea0 	bl	800d9f2 <memset>
 8008cb2:	4603      	mov	r3, r0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	2121      	movs	r1, #33	; 0x21
 8008cd4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008cd8:	f000 fa1e 	bl	8009118 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	330b      	adds	r3, #11
 8008ce0:	78db      	ldrb	r3, [r3, #3]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3720      	adds	r7, #32
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b088      	sub	sp, #32
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008cf2:	f107 030c 	add.w	r3, r7, #12
 8008cf6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	210f      	movs	r1, #15
 8008d02:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008d06:	f000 fa07 	bl	8009118 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	330b      	adds	r3, #11
 8008d0e:	78db      	ldrb	r3, [r3, #3]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3720      	adds	r7, #32
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4a08      	ldr	r2, [pc, #32]	; (8008d48 <hci_init+0x30>)
 8008d28:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008d2a:	4a08      	ldr	r2, [pc, #32]	; (8008d4c <hci_init+0x34>)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008d30:	4806      	ldr	r0, [pc, #24]	; (8008d4c <hci_init+0x34>)
 8008d32:	f000 f973 	bl	800901c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f8d4 	bl	8008ee8 <TlInit>

  return;
 8008d40:	bf00      	nop
}
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20000418 	.word	0x20000418
 8008d4c:	200003f0 	.word	0x200003f0

08008d50 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008d56:	4822      	ldr	r0, [pc, #136]	; (8008de0 <hci_user_evt_proc+0x90>)
 8008d58:	f000 fd2c 	bl	80097b4 <LST_is_empty>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d12b      	bne.n	8008dba <hci_user_evt_proc+0x6a>
 8008d62:	4b20      	ldr	r3, [pc, #128]	; (8008de4 <hci_user_evt_proc+0x94>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d027      	beq.n	8008dba <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008d6a:	f107 030c 	add.w	r3, r7, #12
 8008d6e:	4619      	mov	r1, r3
 8008d70:	481b      	ldr	r0, [pc, #108]	; (8008de0 <hci_user_evt_proc+0x90>)
 8008d72:	f000 fda6 	bl	80098c2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008d76:	4b1c      	ldr	r3, [pc, #112]	; (8008de8 <hci_user_evt_proc+0x98>)
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00c      	beq.n	8008d98 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008d82:	2301      	movs	r3, #1
 8008d84:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008d86:	4b18      	ldr	r3, [pc, #96]	; (8008de8 <hci_user_evt_proc+0x98>)
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	1d3a      	adds	r2, r7, #4
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008d90:	793a      	ldrb	r2, [r7, #4]
 8008d92:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <hci_user_evt_proc+0x94>)
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e002      	b.n	8008d9e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008d98:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <hci_user_evt_proc+0x94>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008d9e:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <hci_user_evt_proc+0x94>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d004      	beq.n	8008db0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fc03 	bl	80095b4 <TL_MM_EvtDone>
 8008dae:	e004      	b.n	8008dba <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4619      	mov	r1, r3
 8008db4:	480a      	ldr	r0, [pc, #40]	; (8008de0 <hci_user_evt_proc+0x90>)
 8008db6:	f000 fd1d 	bl	80097f4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008dba:	4809      	ldr	r0, [pc, #36]	; (8008de0 <hci_user_evt_proc+0x90>)
 8008dbc:	f000 fcfa 	bl	80097b4 <LST_is_empty>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d107      	bne.n	8008dd6 <hci_user_evt_proc+0x86>
 8008dc6:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <hci_user_evt_proc+0x94>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008dce:	4804      	ldr	r0, [pc, #16]	; (8008de0 <hci_user_evt_proc+0x90>)
 8008dd0:	f7f8 fcbe 	bl	8001750 <hci_notify_asynch_evt>
  }


  return;
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
}
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	200002dc 	.word	0x200002dc
 8008de4:	200002e8 	.word	0x200002e8
 8008de8:	200003f0 	.word	0x200003f0

08008dec <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f000 f8cb 	bl	8008f94 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	b21b      	sxth	r3, r3
 8008e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e0c:	b21a      	sxth	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	029b      	lsls	r3, r3, #10
 8008e14:	b21b      	sxth	r3, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b21b      	sxth	r3, r3
 8008e1a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	b2d9      	uxtb	r1, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	8bbb      	ldrh	r3, [r7, #28]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f88d 	bl	8008f48 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008e2e:	e04e      	b.n	8008ece <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008e30:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008e34:	f7f8 fcac 	bl	8001790 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008e38:	e043      	b.n	8008ec2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4828      	ldr	r0, [pc, #160]	; (8008ee4 <hci_send_req+0xf8>)
 8008e42:	f000 fd3e 	bl	80098c2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	7a5b      	ldrb	r3, [r3, #9]
 8008e4a:	2b0f      	cmp	r3, #15
 8008e4c:	d114      	bne.n	8008e78 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	330b      	adds	r3, #11
 8008e52:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	885b      	ldrh	r3, [r3, #2]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	8bba      	ldrh	r2, [r7, #28]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d104      	bne.n	8008e6a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	7812      	ldrb	r2, [r2, #0]
 8008e68:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d027      	beq.n	8008ec2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008e72:	2301      	movs	r3, #1
 8008e74:	77fb      	strb	r3, [r7, #31]
 8008e76:	e024      	b.n	8008ec2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	330b      	adds	r3, #11
 8008e7c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	8bba      	ldrh	r2, [r7, #28]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d114      	bne.n	8008eb6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	7a9b      	ldrb	r3, [r3, #10]
 8008e90:	3b03      	subs	r3, #3
 8008e92:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695a      	ldr	r2, [r3, #20]
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	bfa8      	it	ge
 8008e9e:	461a      	movge	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6918      	ldr	r0, [r3, #16]
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	1cd9      	adds	r1, r3, #3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f004 fd93 	bl	800d9dc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008ec2:	4808      	ldr	r0, [pc, #32]	; (8008ee4 <hci_send_req+0xf8>)
 8008ec4:	f000 fc76 	bl	80097b4 <LST_is_empty>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0b5      	beq.n	8008e3a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008ece:	7ffb      	ldrb	r3, [r7, #31]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0ad      	beq.n	8008e30 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	f000 f85d 	bl	8008f94 <NotifyCmdStatus>

  return 0;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000410 	.word	0x20000410

08008ee8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008ef0:	480f      	ldr	r0, [pc, #60]	; (8008f30 <TlInit+0x48>)
 8008ef2:	f000 fc4f 	bl	8009794 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008ef6:	4a0f      	ldr	r2, [pc, #60]	; (8008f34 <TlInit+0x4c>)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008efc:	480e      	ldr	r0, [pc, #56]	; (8008f38 <TlInit+0x50>)
 8008efe:	f000 fc49 	bl	8009794 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008f02:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <TlInit+0x54>)
 8008f04:	2201      	movs	r2, #1
 8008f06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008f08:	4b0d      	ldr	r3, [pc, #52]	; (8008f40 <TlInit+0x58>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008f14:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <TlInit+0x5c>)
 8008f16:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008f18:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <TlInit+0x58>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f107 0208 	add.w	r2, r7, #8
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
  }

  return;
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
}
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000410 	.word	0x20000410
 8008f34:	200002e4 	.word	0x200002e4
 8008f38:	200002dc 	.word	0x200002dc
 8008f3c:	200002e8 	.word	0x200002e8
 8008f40:	200003f0 	.word	0x200003f0
 8008f44:	08008fd5 	.word	0x08008fd5

08008f48 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	603a      	str	r2, [r7, #0]
 8008f52:	80fb      	strh	r3, [r7, #6]
 8008f54:	460b      	mov	r3, r1
 8008f56:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <SendCmd+0x44>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	88fa      	ldrh	r2, [r7, #6]
 8008f5e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008f62:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <SendCmd+0x44>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	797a      	ldrb	r2, [r7, #5]
 8008f68:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008f6a:	4b08      	ldr	r3, [pc, #32]	; (8008f8c <SendCmd+0x44>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	330c      	adds	r3, #12
 8008f70:	797a      	ldrb	r2, [r7, #5]
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f004 fd31 	bl	800d9dc <memcpy>

  hciContext.io.Send(0,0);
 8008f7a:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <SendCmd+0x48>)
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2100      	movs	r1, #0
 8008f80:	2000      	movs	r0, #0
 8008f82:	4798      	blx	r3

  return;
 8008f84:	bf00      	nop
}
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200002e4 	.word	0x200002e4
 8008f90:	200003f0 	.word	0x200003f0

08008f94 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d108      	bne.n	8008fb6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <NotifyCmdStatus+0x3c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00d      	beq.n	8008fc8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008fac:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <NotifyCmdStatus+0x3c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008fb4:	e008      	b.n	8008fc8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008fb6:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <NotifyCmdStatus+0x3c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008fbe:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <NotifyCmdStatus+0x3c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	4798      	blx	r3
  return;
 8008fc6:	bf00      	nop
 8008fc8:	bf00      	nop
}
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20000418 	.word	0x20000418

08008fd4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7a5b      	ldrb	r3, [r3, #9]
 8008fe0:	2b0f      	cmp	r3, #15
 8008fe2:	d003      	beq.n	8008fec <TlEvtReceived+0x18>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7a5b      	ldrb	r3, [r3, #9]
 8008fe8:	2b0e      	cmp	r3, #14
 8008fea:	d107      	bne.n	8008ffc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	4809      	ldr	r0, [pc, #36]	; (8009014 <TlEvtReceived+0x40>)
 8008ff0:	f000 fc24 	bl	800983c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f7f8 fbbb 	bl	8001770 <hci_cmd_resp_release>
 8008ffa:	e006      	b.n	800900a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	4806      	ldr	r0, [pc, #24]	; (8009018 <TlEvtReceived+0x44>)
 8009000:	f000 fc1c 	bl	800983c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009004:	4804      	ldr	r0, [pc, #16]	; (8009018 <TlEvtReceived+0x44>)
 8009006:	f7f8 fba3 	bl	8001750 <hci_notify_asynch_evt>
  }

  return;
 800900a:	bf00      	nop
}
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000410 	.word	0x20000410
 8009018:	200002dc 	.word	0x200002dc

0800901c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a05      	ldr	r2, [pc, #20]	; (800903c <hci_register_io_bus+0x20>)
 8009028:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a04      	ldr	r2, [pc, #16]	; (8009040 <hci_register_io_bus+0x24>)
 800902e:	611a      	str	r2, [r3, #16]

  return;
 8009030:	bf00      	nop
}
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	0800932d 	.word	0x0800932d
 8009040:	08009395 	.word	0x08009395

08009044 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	4a08      	ldr	r2, [pc, #32]	; (8009074 <shci_init+0x30>)
 8009054:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009056:	4a08      	ldr	r2, [pc, #32]	; (8009078 <shci_init+0x34>)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800905c:	4806      	ldr	r0, [pc, #24]	; (8009078 <shci_init+0x34>)
 800905e:	f000 f911 	bl	8009284 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f894 	bl	8009194 <TlInit>

  return;
 800906c:	bf00      	nop
}
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	2000043c 	.word	0x2000043c
 8009078:	2000041c 	.word	0x2000041c

0800907c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009082:	4822      	ldr	r0, [pc, #136]	; (800910c <shci_user_evt_proc+0x90>)
 8009084:	f000 fb96 	bl	80097b4 <LST_is_empty>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d12b      	bne.n	80090e6 <shci_user_evt_proc+0x6a>
 800908e:	4b20      	ldr	r3, [pc, #128]	; (8009110 <shci_user_evt_proc+0x94>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d027      	beq.n	80090e6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009096:	f107 030c 	add.w	r3, r7, #12
 800909a:	4619      	mov	r1, r3
 800909c:	481b      	ldr	r0, [pc, #108]	; (800910c <shci_user_evt_proc+0x90>)
 800909e:	f000 fc10 	bl	80098c2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <shci_user_evt_proc+0x98>)
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00c      	beq.n	80090c4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80090ae:	2301      	movs	r3, #1
 80090b0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80090b2:	4b18      	ldr	r3, [pc, #96]	; (8009114 <shci_user_evt_proc+0x98>)
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	1d3a      	adds	r2, r7, #4
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80090bc:	793a      	ldrb	r2, [r7, #4]
 80090be:	4b14      	ldr	r3, [pc, #80]	; (8009110 <shci_user_evt_proc+0x94>)
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e002      	b.n	80090ca <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80090c4:	4b12      	ldr	r3, [pc, #72]	; (8009110 <shci_user_evt_proc+0x94>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <shci_user_evt_proc+0x94>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d004      	beq.n	80090dc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fa6d 	bl	80095b4 <TL_MM_EvtDone>
 80090da:	e004      	b.n	80090e6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4619      	mov	r1, r3
 80090e0:	480a      	ldr	r0, [pc, #40]	; (800910c <shci_user_evt_proc+0x90>)
 80090e2:	f000 fb87 	bl	80097f4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80090e6:	4809      	ldr	r0, [pc, #36]	; (800910c <shci_user_evt_proc+0x90>)
 80090e8:	f000 fb64 	bl	80097b4 <LST_is_empty>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d107      	bne.n	8009102 <shci_user_evt_proc+0x86>
 80090f2:	4b07      	ldr	r3, [pc, #28]	; (8009110 <shci_user_evt_proc+0x94>)
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80090fa:	4804      	ldr	r0, [pc, #16]	; (800910c <shci_user_evt_proc+0x90>)
 80090fc:	f7f9 fa4e 	bl	800259c <shci_notify_asynch_evt>
  }


  return;
 8009100:	bf00      	nop
 8009102:	bf00      	nop
}
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20000388 	.word	0x20000388
 8009110:	20000398 	.word	0x20000398
 8009114:	2000041c 	.word	0x2000041c

08009118 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60ba      	str	r2, [r7, #8]
 8009120:	607b      	str	r3, [r7, #4]
 8009122:	4603      	mov	r3, r0
 8009124:	81fb      	strh	r3, [r7, #14]
 8009126:	460b      	mov	r3, r1
 8009128:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800912a:	2000      	movs	r0, #0
 800912c:	f000 f864 	bl	80091f8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009130:	4b16      	ldr	r3, [pc, #88]	; (800918c <shci_send+0x74>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	89fa      	ldrh	r2, [r7, #14]
 8009136:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800913a:	4b14      	ldr	r3, [pc, #80]	; (800918c <shci_send+0x74>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	7b7a      	ldrb	r2, [r7, #13]
 8009140:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009142:	4b12      	ldr	r3, [pc, #72]	; (800918c <shci_send+0x74>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	330c      	adds	r3, #12
 8009148:	7b7a      	ldrb	r2, [r7, #13]
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	4618      	mov	r0, r3
 800914e:	f004 fc45 	bl	800d9dc <memcpy>

  shciContext.io.Send(0,0);
 8009152:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <shci_send+0x78>)
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2100      	movs	r1, #0
 8009158:	2000      	movs	r0, #0
 800915a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800915c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009160:	f7f9 fa3c 	bl	80025dc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f103 0008 	add.w	r0, r3, #8
 800916a:	4b08      	ldr	r3, [pc, #32]	; (800918c <shci_send+0x74>)
 800916c:	6819      	ldr	r1, [r3, #0]
 800916e:	4b07      	ldr	r3, [pc, #28]	; (800918c <shci_send+0x74>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	789b      	ldrb	r3, [r3, #2]
 8009174:	3303      	adds	r3, #3
 8009176:	461a      	mov	r2, r3
 8009178:	f004 fc30 	bl	800d9dc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800917c:	2001      	movs	r0, #1
 800917e:	f000 f83b 	bl	80091f8 <Cmd_SetStatus>

  return;
 8009182:	bf00      	nop
}
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000394 	.word	0x20000394
 8009190:	2000041c 	.word	0x2000041c

08009194 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800919c:	4a10      	ldr	r2, [pc, #64]	; (80091e0 <TlInit+0x4c>)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80091a2:	4810      	ldr	r0, [pc, #64]	; (80091e4 <TlInit+0x50>)
 80091a4:	f000 faf6 	bl	8009794 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80091a8:	2001      	movs	r0, #1
 80091aa:	f000 f825 	bl	80091f8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80091ae:	4b0e      	ldr	r3, [pc, #56]	; (80091e8 <TlInit+0x54>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80091b4:	4b0d      	ldr	r3, [pc, #52]	; (80091ec <TlInit+0x58>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00c      	beq.n	80091d6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80091c0:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <TlInit+0x5c>)
 80091c2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80091c4:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <TlInit+0x60>)
 80091c6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80091c8:	4b08      	ldr	r3, [pc, #32]	; (80091ec <TlInit+0x58>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f107 020c 	add.w	r2, r7, #12
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
  }

  return;
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
}
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000394 	.word	0x20000394
 80091e4:	20000388 	.word	0x20000388
 80091e8:	20000398 	.word	0x20000398
 80091ec:	2000041c 	.word	0x2000041c
 80091f0:	08009249 	.word	0x08009249
 80091f4:	08009261 	.word	0x08009261

080091f8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009208:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <Cmd_SetStatus+0x48>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009210:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <Cmd_SetStatus+0x48>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2000      	movs	r0, #0
 8009216:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009218:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <Cmd_SetStatus+0x4c>)
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800921e:	e00b      	b.n	8009238 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009220:	4b08      	ldr	r3, [pc, #32]	; (8009244 <Cmd_SetStatus+0x4c>)
 8009222:	2201      	movs	r2, #1
 8009224:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009226:	4b06      	ldr	r3, [pc, #24]	; (8009240 <Cmd_SetStatus+0x48>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800922e:	4b04      	ldr	r3, [pc, #16]	; (8009240 <Cmd_SetStatus+0x48>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2001      	movs	r0, #1
 8009234:	4798      	blx	r3
  return;
 8009236:	bf00      	nop
 8009238:	bf00      	nop
}
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	2000043c 	.word	0x2000043c
 8009244:	20000390 	.word	0x20000390

08009248 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009250:	2000      	movs	r0, #0
 8009252:	f7f9 f9b3 	bl	80025bc <shci_cmd_resp_release>

  return;
 8009256:	bf00      	nop
}
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	4805      	ldr	r0, [pc, #20]	; (8009280 <TlUserEvtReceived+0x20>)
 800926c:	f000 fae6 	bl	800983c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009270:	4803      	ldr	r0, [pc, #12]	; (8009280 <TlUserEvtReceived+0x20>)
 8009272:	f7f9 f993 	bl	800259c <shci_notify_asynch_evt>

  return;
 8009276:	bf00      	nop
}
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20000388 	.word	0x20000388

08009284 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a05      	ldr	r2, [pc, #20]	; (80092a4 <shci_register_io_bus+0x20>)
 8009290:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a04      	ldr	r2, [pc, #16]	; (80092a8 <shci_register_io_bus+0x24>)
 8009296:	611a      	str	r2, [r3, #16]

  return;
 8009298:	bf00      	nop
}
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	08009441 	.word	0x08009441
 80092a8:	08009495 	.word	0x08009495

080092ac <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80092b0:	f7f8 fe4c 	bl	8001f4c <HW_IPCC_Enable>

  return;
 80092b4:	bf00      	nop
}
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <TL_Init>:


void TL_Init( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80092bc:	4b10      	ldr	r3, [pc, #64]	; (8009300 <TL_Init+0x48>)
 80092be:	4a11      	ldr	r2, [pc, #68]	; (8009304 <TL_Init+0x4c>)
 80092c0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80092c2:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <TL_Init+0x48>)
 80092c4:	4a10      	ldr	r2, [pc, #64]	; (8009308 <TL_Init+0x50>)
 80092c6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80092c8:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <TL_Init+0x48>)
 80092ca:	4a10      	ldr	r2, [pc, #64]	; (800930c <TL_Init+0x54>)
 80092cc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <TL_Init+0x48>)
 80092d0:	4a0f      	ldr	r2, [pc, #60]	; (8009310 <TL_Init+0x58>)
 80092d2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80092d4:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <TL_Init+0x48>)
 80092d6:	4a0f      	ldr	r2, [pc, #60]	; (8009314 <TL_Init+0x5c>)
 80092d8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <TL_Init+0x48>)
 80092dc:	4a0e      	ldr	r2, [pc, #56]	; (8009318 <TL_Init+0x60>)
 80092de:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80092e0:	4b07      	ldr	r3, [pc, #28]	; (8009300 <TL_Init+0x48>)
 80092e2:	4a0e      	ldr	r2, [pc, #56]	; (800931c <TL_Init+0x64>)
 80092e4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80092e6:	4b06      	ldr	r3, [pc, #24]	; (8009300 <TL_Init+0x48>)
 80092e8:	4a0d      	ldr	r2, [pc, #52]	; (8009320 <TL_Init+0x68>)
 80092ea:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80092ec:	4b04      	ldr	r3, [pc, #16]	; (8009300 <TL_Init+0x48>)
 80092ee:	4a0d      	ldr	r2, [pc, #52]	; (8009324 <TL_Init+0x6c>)
 80092f0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <TL_Init+0x48>)
 80092f4:	4a0c      	ldr	r2, [pc, #48]	; (8009328 <TL_Init+0x70>)
 80092f6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80092f8:	f7f8 fe3c 	bl	8001f74 <HW_IPCC_Init>

  return;
 80092fc:	bf00      	nop
}
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	20030000 	.word	0x20030000
 8009304:	20030134 	.word	0x20030134
 8009308:	20030154 	.word	0x20030154
 800930c:	20030164 	.word	0x20030164
 8009310:	20030170 	.word	0x20030170
 8009314:	20030178 	.word	0x20030178
 8009318:	20030180 	.word	0x20030180
 800931c:	20030188 	.word	0x20030188
 8009320:	200301a4 	.word	0x200301a4
 8009324:	200301a8 	.word	0x200301a8
 8009328:	200301b4 	.word	0x200301b4

0800932c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009338:	4811      	ldr	r0, [pc, #68]	; (8009380 <TL_BLE_Init+0x54>)
 800933a:	f000 fa2b 	bl	8009794 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800933e:	4b11      	ldr	r3, [pc, #68]	; (8009384 <TL_BLE_Init+0x58>)
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4a0c      	ldr	r2, [pc, #48]	; (8009388 <TL_BLE_Init+0x5c>)
 8009358:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	4a08      	ldr	r2, [pc, #32]	; (8009380 <TL_BLE_Init+0x54>)
 800935e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009360:	f7f8 fe1e 	bl	8001fa0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a08      	ldr	r2, [pc, #32]	; (800938c <TL_BLE_Init+0x60>)
 800936a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	4a07      	ldr	r2, [pc, #28]	; (8009390 <TL_BLE_Init+0x64>)
 8009372:	6013      	str	r3, [r2, #0]

  return 0;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	200301d0 	.word	0x200301d0
 8009384:	20030000 	.word	0x20030000
 8009388:	20030a48 	.word	0x20030a48
 800938c:	20000448 	.word	0x20000448
 8009390:	2000044c 	.word	0x2000044c

08009394 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80093a0:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <TL_BLE_SendCmd+0x34>)
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80093aa:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <TL_BLE_SendCmd+0x34>)
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4619      	mov	r1, r3
 80093b2:	2001      	movs	r0, #1
 80093b4:	f000 f96c 	bl	8009690 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80093b8:	f7f8 fdfc 	bl	8001fb4 <HW_IPCC_BLE_SendCmd>

  return 0;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20030000 	.word	0x20030000

080093cc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80093d2:	e01c      	b.n	800940e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80093d4:	1d3b      	adds	r3, r7, #4
 80093d6:	4619      	mov	r1, r3
 80093d8:	4812      	ldr	r0, [pc, #72]	; (8009424 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80093da:	f000 fa72 	bl	80098c2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7a5b      	ldrb	r3, [r3, #9]
 80093e2:	2b0f      	cmp	r3, #15
 80093e4:	d003      	beq.n	80093ee <HW_IPCC_BLE_RxEvtNot+0x22>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	7a5b      	ldrb	r3, [r3, #9]
 80093ea:	2b0e      	cmp	r3, #14
 80093ec:	d105      	bne.n	80093fa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4619      	mov	r1, r3
 80093f2:	2002      	movs	r0, #2
 80093f4:	f000 f94c 	bl	8009690 <OutputDbgTrace>
 80093f8:	e004      	b.n	8009404 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4619      	mov	r1, r3
 80093fe:	2003      	movs	r0, #3
 8009400:	f000 f946 	bl	8009690 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009404:	4b08      	ldr	r3, [pc, #32]	; (8009428 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	4610      	mov	r0, r2
 800940c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800940e:	4805      	ldr	r0, [pc, #20]	; (8009424 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009410:	f000 f9d0 	bl	80097b4 <LST_is_empty>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0dc      	beq.n	80093d4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800941a:	bf00      	nop
}
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200301d0 	.word	0x200301d0
 8009428:	20000448 	.word	0x20000448

0800942c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4798      	blx	r3

  return;
 8009436:	bf00      	nop
}
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	2000044c 	.word	0x2000044c

08009440 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800944c:	480d      	ldr	r0, [pc, #52]	; (8009484 <TL_SYS_Init+0x44>)
 800944e:	f000 f9a1 	bl	8009794 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009452:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <TL_SYS_Init+0x48>)
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	4a08      	ldr	r2, [pc, #32]	; (8009484 <TL_SYS_Init+0x44>)
 8009464:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009466:	f7f8 fdc7 	bl	8001ff8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a07      	ldr	r2, [pc, #28]	; (800948c <TL_SYS_Init+0x4c>)
 8009470:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	4a06      	ldr	r2, [pc, #24]	; (8009490 <TL_SYS_Init+0x50>)
 8009478:	6013      	str	r3, [r2, #0]

  return 0;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	200301d8 	.word	0x200301d8
 8009488:	20030000 	.word	0x20030000
 800948c:	20000450 	.word	0x20000450
 8009490:	20000454 	.word	0x20000454

08009494 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <TL_SYS_SendCmd+0x34>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2210      	movs	r2, #16
 80094a8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80094aa:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <TL_SYS_SendCmd+0x34>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4619      	mov	r1, r3
 80094b2:	2004      	movs	r0, #4
 80094b4:	f000 f8ec 	bl	8009690 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80094b8:	f7f8 fda8 	bl	800200c <HW_IPCC_SYS_SendCmd>

  return 0;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20030000 	.word	0x20030000

080094cc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4619      	mov	r1, r3
 80094d8:	2005      	movs	r0, #5
 80094da:	f000 f8d9 	bl	8009690 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a03      	ldr	r2, [pc, #12]	; (80094f0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80094e4:	68d2      	ldr	r2, [r2, #12]
 80094e6:	6812      	ldr	r2, [r2, #0]
 80094e8:	4610      	mov	r0, r2
 80094ea:	4798      	blx	r3

  return;
 80094ec:	bf00      	nop
}
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20030000 	.word	0x20030000
 80094f4:	20000450 	.word	0x20000450

080094f8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80094fe:	e00e      	b.n	800951e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009500:	1d3b      	adds	r3, r7, #4
 8009502:	4619      	mov	r1, r3
 8009504:	480b      	ldr	r0, [pc, #44]	; (8009534 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009506:	f000 f9dc 	bl	80098c2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4619      	mov	r1, r3
 800950e:	2006      	movs	r0, #6
 8009510:	f000 f8be 	bl	8009690 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009514:	4b08      	ldr	r3, [pc, #32]	; (8009538 <HW_IPCC_SYS_EvtNot+0x40>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4610      	mov	r0, r2
 800951c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800951e:	4805      	ldr	r0, [pc, #20]	; (8009534 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009520:	f000 f948 	bl	80097b4 <LST_is_empty>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0ea      	beq.n	8009500 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800952a:	bf00      	nop
}
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200301d8 	.word	0x200301d8
 8009538:	20000454 	.word	0x20000454

0800953c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009544:	4817      	ldr	r0, [pc, #92]	; (80095a4 <TL_MM_Init+0x68>)
 8009546:	f000 f925 	bl	8009794 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800954a:	4817      	ldr	r0, [pc, #92]	; (80095a8 <TL_MM_Init+0x6c>)
 800954c:	f000 f922 	bl	8009794 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009550:	4b16      	ldr	r3, [pc, #88]	; (80095ac <TL_MM_Init+0x70>)
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	4a16      	ldr	r2, [pc, #88]	; (80095b0 <TL_MM_Init+0x74>)
 8009556:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <TL_MM_Init+0x74>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	6892      	ldr	r2, [r2, #8]
 8009560:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <TL_MM_Init+0x74>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	68d2      	ldr	r2, [r2, #12]
 800956a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800956c:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <TL_MM_Init+0x74>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a0c      	ldr	r2, [pc, #48]	; (80095a4 <TL_MM_Init+0x68>)
 8009572:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009574:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <TL_MM_Init+0x74>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800957e:	4b0c      	ldr	r3, [pc, #48]	; (80095b0 <TL_MM_Init+0x74>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6852      	ldr	r2, [r2, #4]
 8009586:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009588:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <TL_MM_Init+0x74>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	6912      	ldr	r2, [r2, #16]
 8009590:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009592:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <TL_MM_Init+0x74>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6952      	ldr	r2, [r2, #20]
 800959a:	619a      	str	r2, [r3, #24]

  return;
 800959c:	bf00      	nop
}
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	200301c0 	.word	0x200301c0
 80095a8:	20000440 	.word	0x20000440
 80095ac:	20030000 	.word	0x20030000
 80095b0:	20000458 	.word	0x20000458

080095b4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4807      	ldr	r0, [pc, #28]	; (80095dc <TL_MM_EvtDone+0x28>)
 80095c0:	f000 f93c 	bl	800983c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	2000      	movs	r0, #0
 80095c8:	f000 f862 	bl	8009690 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80095cc:	4804      	ldr	r0, [pc, #16]	; (80095e0 <TL_MM_EvtDone+0x2c>)
 80095ce:	f7f8 fd43 	bl	8002058 <HW_IPCC_MM_SendFreeBuf>

  return;
 80095d2:	bf00      	nop
}
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20000440 	.word	0x20000440
 80095e0:	080095e5 	.word	0x080095e5

080095e4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80095ea:	e00c      	b.n	8009606 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	480a      	ldr	r0, [pc, #40]	; (800961c <SendFreeBuf+0x38>)
 80095f2:	f000 f966 	bl	80098c2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80095f6:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <SendFreeBuf+0x3c>)
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f91b 	bl	800983c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009606:	4805      	ldr	r0, [pc, #20]	; (800961c <SendFreeBuf+0x38>)
 8009608:	f000 f8d4 	bl	80097b4 <LST_is_empty>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0ec      	beq.n	80095ec <SendFreeBuf+0x8>
  }

  return;
 8009612:	bf00      	nop
}
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000440 	.word	0x20000440
 8009620:	20030000 	.word	0x20030000

08009624 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009628:	4805      	ldr	r0, [pc, #20]	; (8009640 <TL_TRACES_Init+0x1c>)
 800962a:	f000 f8b3 	bl	8009794 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <TL_TRACES_Init+0x20>)
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	4a03      	ldr	r2, [pc, #12]	; (8009640 <TL_TRACES_Init+0x1c>)
 8009634:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009636:	f7f8 fd45 	bl	80020c4 <HW_IPCC_TRACES_Init>

  return;
 800963a:	bf00      	nop
}
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	200301c8 	.word	0x200301c8
 8009644:	20030000 	.word	0x20030000

08009648 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800964e:	e008      	b.n	8009662 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009650:	1d3b      	adds	r3, r7, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4808      	ldr	r0, [pc, #32]	; (8009678 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009656:	f000 f934 	bl	80098c2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f80d 	bl	800967c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009662:	4805      	ldr	r0, [pc, #20]	; (8009678 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009664:	f000 f8a6 	bl	80097b4 <LST_is_empty>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0f0      	beq.n	8009650 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800966e:	bf00      	nop
}
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	200301c8 	.word	0x200301c8

0800967c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	6039      	str	r1, [r7, #0]
 800969a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	2b06      	cmp	r3, #6
 80096a0:	d849      	bhi.n	8009736 <OutputDbgTrace+0xa6>
 80096a2:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <OutputDbgTrace+0x18>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096e7 	.word	0x080096e7
 80096b0:	080096ed 	.word	0x080096ed
 80096b4:	08009707 	.word	0x08009707
 80096b8:	08009713 	.word	0x08009713
 80096bc:	08009719 	.word	0x08009719
 80096c0:	0800972b 	.word	0x0800972b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	7a5b      	ldrb	r3, [r3, #9]
 80096cc:	2b0f      	cmp	r3, #15
 80096ce:	d004      	beq.n	80096da <OutputDbgTrace+0x4a>
 80096d0:	2bff      	cmp	r3, #255	; 0xff
 80096d2:	d004      	beq.n	80096de <OutputDbgTrace+0x4e>
 80096d4:	2b0e      	cmp	r3, #14
 80096d6:	d004      	beq.n	80096e2 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80096d8:	e004      	b.n	80096e4 <OutputDbgTrace+0x54>
          break;
 80096da:	bf00      	nop
 80096dc:	e02c      	b.n	8009738 <OutputDbgTrace+0xa8>
          break;
 80096de:	bf00      	nop
 80096e0:	e02a      	b.n	8009738 <OutputDbgTrace+0xa8>
          break;
 80096e2:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80096e4:	e028      	b.n	8009738 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80096ea:	e025      	b.n	8009738 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	7a5b      	ldrb	r3, [r3, #9]
 80096f4:	2b0e      	cmp	r3, #14
 80096f6:	d002      	beq.n	80096fe <OutputDbgTrace+0x6e>
 80096f8:	2b0f      	cmp	r3, #15
 80096fa:	d002      	beq.n	8009702 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80096fc:	e002      	b.n	8009704 <OutputDbgTrace+0x74>
          break;
 80096fe:	bf00      	nop
 8009700:	e01a      	b.n	8009738 <OutputDbgTrace+0xa8>
          break;
 8009702:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009704:	e018      	b.n	8009738 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	7a5b      	ldrb	r3, [r3, #9]
 800970e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009710:	e012      	b.n	8009738 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009716:	e00f      	b.n	8009738 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	7a5b      	ldrb	r3, [r3, #9]
 8009720:	2b0e      	cmp	r3, #14
 8009722:	d000      	beq.n	8009726 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009724:	e000      	b.n	8009728 <OutputDbgTrace+0x98>
          break;
 8009726:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009728:	e006      	b.n	8009738 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	7a5b      	ldrb	r3, [r3, #9]
 8009732:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009734:	e000      	b.n	8009738 <OutputDbgTrace+0xa8>

    default:
      break;
 8009736:	bf00      	nop
  }

  return;
 8009738:	bf00      	nop
}
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800974e:	4b0f      	ldr	r3, [pc, #60]	; (800978c <OTP_Read+0x48>)
 8009750:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009752:	e002      	b.n	800975a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3b08      	subs	r3, #8
 8009758:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3307      	adds	r3, #7
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	79fa      	ldrb	r2, [r7, #7]
 8009762:	429a      	cmp	r2, r3
 8009764:	d003      	beq.n	800976e <OTP_Read+0x2a>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4a09      	ldr	r2, [pc, #36]	; (8009790 <OTP_Read+0x4c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d1f2      	bne.n	8009754 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3307      	adds	r3, #7
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	79fa      	ldrb	r2, [r7, #7]
 8009776:	429a      	cmp	r2, r3
 8009778:	d001      	beq.n	800977e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800977e:	68fb      	ldr	r3, [r7, #12]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	1fff73f8 	.word	0x1fff73f8
 8009790:	1fff7000 	.word	0x1fff7000

08009794 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	605a      	str	r2, [r3, #4]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097bc:	f3ef 8310 	mrs	r3, PRIMASK
 80097c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80097c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80097c6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d102      	bne.n	80097d8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]
 80097d6:	e001      	b.n	80097dc <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 80097d8:	2300      	movs	r3, #0
 80097da:	75fb      	strb	r3, [r7, #23]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009802:	60fb      	str	r3, [r7, #12]
  return(result);
 8009804:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009808:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	605a      	str	r2, [r3, #4]
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009846:	f3ef 8310 	mrs	r3, PRIMASK
 800984a:	60fb      	str	r3, [r7, #12]
  return(result);
 800984c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800984e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009850:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009878:	bf00      	nop
 800987a:	371c      	adds	r7, #28
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800988c:	f3ef 8310 	mrs	r3, PRIMASK
 8009890:	60fb      	str	r3, [r7, #12]
  return(result);
 8009892:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009896:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6812      	ldr	r2, [r2, #0]
 80098a0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6852      	ldr	r2, [r2, #4]
 80098aa:	605a      	str	r2, [r3, #4]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098b6:	bf00      	nop
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b086      	sub	sp, #24
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098cc:	f3ef 8310 	mrs	r3, PRIMASK
 80098d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80098d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098d6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff ffcd 	bl	8009884 <LST_remove_node>
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098f4:	bf00      	nop
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009900:	bf00      	nop
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
	...

0800990c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009912:	f3ef 8305 	mrs	r3, IPSR
 8009916:	60bb      	str	r3, [r7, #8]
  return(result);
 8009918:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10f      	bne.n	800993e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800991e:	f3ef 8310 	mrs	r3, PRIMASK
 8009922:	607b      	str	r3, [r7, #4]
  return(result);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d105      	bne.n	8009936 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800992a:	f3ef 8311 	mrs	r3, BASEPRI
 800992e:	603b      	str	r3, [r7, #0]
  return(result);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <osKernelInitialize+0x3a>
 8009936:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <osKernelInitialize+0x64>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d103      	bne.n	8009946 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800993e:	f06f 0305 	mvn.w	r3, #5
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e00c      	b.n	8009960 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009946:	4b0a      	ldr	r3, [pc, #40]	; (8009970 <osKernelInitialize+0x64>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d105      	bne.n	800995a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800994e:	4b08      	ldr	r3, [pc, #32]	; (8009970 <osKernelInitialize+0x64>)
 8009950:	2201      	movs	r2, #1
 8009952:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	e002      	b.n	8009960 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800995a:	f04f 33ff 	mov.w	r3, #4294967295
 800995e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009960:	68fb      	ldr	r3, [r7, #12]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	2000045c 	.word	0x2000045c

08009974 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800997a:	f3ef 8305 	mrs	r3, IPSR
 800997e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009980:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10f      	bne.n	80099a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009986:	f3ef 8310 	mrs	r3, PRIMASK
 800998a:	607b      	str	r3, [r7, #4]
  return(result);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009992:	f3ef 8311 	mrs	r3, BASEPRI
 8009996:	603b      	str	r3, [r7, #0]
  return(result);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d007      	beq.n	80099ae <osKernelStart+0x3a>
 800999e:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <osKernelStart+0x68>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d103      	bne.n	80099ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80099a6:	f06f 0305 	mvn.w	r3, #5
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e010      	b.n	80099d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099ae:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <osKernelStart+0x68>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d109      	bne.n	80099ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099b6:	f7ff ffa1 	bl	80098fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099ba:	4b08      	ldr	r3, [pc, #32]	; (80099dc <osKernelStart+0x68>)
 80099bc:	2202      	movs	r2, #2
 80099be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099c0:	f002 fb6c 	bl	800c09c <vTaskStartScheduler>
      stat = osOK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	e002      	b.n	80099d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80099ca:	f04f 33ff 	mov.w	r3, #4294967295
 80099ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80099d0:	68fb      	ldr	r3, [r7, #12]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	2000045c 	.word	0x2000045c

080099e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b090      	sub	sp, #64	; 0x40
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099f0:	f3ef 8305 	mrs	r3, IPSR
 80099f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80099f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f040 808f 	bne.w	8009b1c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009a02:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a0e:	617b      	str	r3, [r7, #20]
  return(result);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <osThreadNew+0x3e>
 8009a16:	4b44      	ldr	r3, [pc, #272]	; (8009b28 <osThreadNew+0x148>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d07e      	beq.n	8009b1c <osThreadNew+0x13c>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d07b      	beq.n	8009b1c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009a28:	2318      	movs	r3, #24
 8009a2a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009a30:	f04f 33ff 	mov.w	r3, #4294967295
 8009a34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d045      	beq.n	8009ac8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <osThreadNew+0x6a>
        name = attr->name;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d008      	beq.n	8009a70 <osThreadNew+0x90>
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	2b38      	cmp	r3, #56	; 0x38
 8009a62:	d805      	bhi.n	8009a70 <osThreadNew+0x90>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <osThreadNew+0x94>
        return (NULL);
 8009a70:	2300      	movs	r3, #0
 8009a72:	e054      	b.n	8009b1e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	089b      	lsrs	r3, r3, #2
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00e      	beq.n	8009aaa <osThreadNew+0xca>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b5b      	cmp	r3, #91	; 0x5b
 8009a92:	d90a      	bls.n	8009aaa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <osThreadNew+0xca>
        mem = 1;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	623b      	str	r3, [r7, #32]
 8009aa8:	e010      	b.n	8009acc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10c      	bne.n	8009acc <osThreadNew+0xec>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d108      	bne.n	8009acc <osThreadNew+0xec>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d104      	bne.n	8009acc <osThreadNew+0xec>
          mem = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	623b      	str	r3, [r7, #32]
 8009ac6:	e001      	b.n	8009acc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d110      	bne.n	8009af4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ada:	9202      	str	r2, [sp, #8]
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f002 f939 	bl	800bd60 <xTaskCreateStatic>
 8009aee:	4603      	mov	r3, r0
 8009af0:	613b      	str	r3, [r7, #16]
 8009af2:	e013      	b.n	8009b1c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d110      	bne.n	8009b1c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	f107 0310 	add.w	r3, r7, #16
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f002 f981 	bl	800be14 <xTaskCreate>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d001      	beq.n	8009b1c <osThreadNew+0x13c>
          hTask = NULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b1c:	693b      	ldr	r3, [r7, #16]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3730      	adds	r7, #48	; 0x30
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	2000045c 	.word	0x2000045c

08009b2c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	; 0x28
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <osThreadFlagsSet+0x1a>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da03      	bge.n	8009b4e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009b46:	f06f 0303 	mvn.w	r3, #3
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	e046      	b.n	8009bdc <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8009b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b54:	f3ef 8305 	mrs	r3, IPSR
 8009b58:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b5a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10f      	bne.n	8009b80 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b60:	f3ef 8310 	mrs	r3, PRIMASK
 8009b64:	617b      	str	r3, [r7, #20]
  return(result);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d105      	bne.n	8009b78 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8009b70:	613b      	str	r3, [r7, #16]
  return(result);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d024      	beq.n	8009bc2 <osThreadFlagsSet+0x96>
 8009b78:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <osThreadFlagsSet+0xbc>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d120      	bne.n	8009bc2 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009b84:	f107 0308 	add.w	r3, r7, #8
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	69f8      	ldr	r0, [r7, #28]
 8009b92:	f003 fa13 	bl	800cfbc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009b96:	f107 020c 	add.w	r2, r7, #12
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	69f8      	ldr	r0, [r7, #28]
 8009ba6:	f003 fa09 	bl	800cfbc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d015      	beq.n	8009bdc <osThreadFlagsSet+0xb0>
 8009bb0:	4b0e      	ldr	r3, [pc, #56]	; (8009bec <osThreadFlagsSet+0xc0>)
 8009bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	e00c      	b.n	8009bdc <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	69f8      	ldr	r0, [r7, #28]
 8009bca:	f003 f941 	bl	800ce50 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009bce:	f107 030c 	add.w	r3, r7, #12
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	69f8      	ldr	r0, [r7, #28]
 8009bd8:	f003 f93a 	bl	800ce50 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3720      	adds	r7, #32
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	2000045c 	.word	0x2000045c
 8009bec:	e000ed04 	.word	0xe000ed04

08009bf0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08e      	sub	sp, #56	; 0x38
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bfc:	f3ef 8305 	mrs	r3, IPSR
 8009c00:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c02:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10f      	bne.n	8009c28 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c08:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d105      	bne.n	8009c20 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c14:	f3ef 8311 	mrs	r3, BASEPRI
 8009c18:	617b      	str	r3, [r7, #20]
  return(result);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d007      	beq.n	8009c30 <osThreadFlagsWait+0x40>
 8009c20:	4b3c      	ldr	r3, [pc, #240]	; (8009d14 <osThreadFlagsWait+0x124>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d103      	bne.n	8009c30 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8009c28:	f06f 0305 	mvn.w	r3, #5
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c2e:	e06b      	b.n	8009d08 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da03      	bge.n	8009c3e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8009c36:	f06f 0303 	mvn.w	r3, #3
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3c:	e064      	b.n	8009d08 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8009c4c:	e001      	b.n	8009c52 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8009c5a:	f002 fb65 	bl	800c328 <xTaskGetTickCount>
 8009c5e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009c60:	f107 0210 	add.w	r2, r7, #16
 8009c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c68:	2000      	movs	r0, #0
 8009c6a:	f003 f897 	bl	800cd9c <xTaskNotifyWait>
 8009c6e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d137      	bne.n	8009ce6 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8009c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c82:	4313      	orrs	r3, r2
 8009c84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c94:	4013      	ands	r3, r2
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d032      	beq.n	8009d02 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10f      	bne.n	8009cc2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8009ca2:	f06f 0302 	mvn.w	r3, #2
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8009ca8:	e02e      	b.n	8009d08 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cae:	4013      	ands	r3, r2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d128      	bne.n	8009d06 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8009cba:	f06f 0302 	mvn.w	r3, #2
 8009cbe:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8009cc0:	e022      	b.n	8009d08 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009cc2:	f002 fb31 	bl	800c328 <xTaskGetTickCount>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8009cce:	6a3a      	ldr	r2, [r7, #32]
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d902      	bls.n	8009cdc <osThreadFlagsWait+0xec>
          tout  = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cda:	e00e      	b.n	8009cfa <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8009cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ce4:	e009      	b.n	8009cfa <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d103      	bne.n	8009cf4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8009cec:	f06f 0302 	mvn.w	r3, #2
 8009cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf2:	e002      	b.n	8009cfa <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009cf4:	f06f 0301 	mvn.w	r3, #1
 8009cf8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1af      	bne.n	8009c60 <osThreadFlagsWait+0x70>
 8009d00:	e002      	b.n	8009d08 <osThreadFlagsWait+0x118>
            break;
 8009d02:	bf00      	nop
 8009d04:	e000      	b.n	8009d08 <osThreadFlagsWait+0x118>
            break;
 8009d06:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3738      	adds	r7, #56	; 0x38
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	2000045c 	.word	0x2000045c

08009d18 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08a      	sub	sp, #40	; 0x28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d24:	f3ef 8305 	mrs	r3, IPSR
 8009d28:	613b      	str	r3, [r7, #16]
  return(result);
 8009d2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 8085 	bne.w	8009e3c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d32:	f3ef 8310 	mrs	r3, PRIMASK
 8009d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d105      	bne.n	8009d4a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8009d42:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <osMutexNew+0x3a>
 8009d4a:	4b3f      	ldr	r3, [pc, #252]	; (8009e48 <osMutexNew+0x130>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d074      	beq.n	8009e3c <osMutexNew+0x124>
    if (attr != NULL) {
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	623b      	str	r3, [r7, #32]
 8009d5e:	e001      	b.n	8009d64 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <osMutexNew+0x5c>
      rmtx = 1U;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	61fb      	str	r3, [r7, #28]
 8009d72:	e001      	b.n	8009d78 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d15c      	bne.n	8009e3c <osMutexNew+0x124>
      mem = -1;
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295
 8009d86:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d015      	beq.n	8009dba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d006      	beq.n	8009da4 <osMutexNew+0x8c>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	2b4f      	cmp	r3, #79	; 0x4f
 8009d9c:	d902      	bls.n	8009da4 <osMutexNew+0x8c>
          mem = 1;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	61bb      	str	r3, [r7, #24]
 8009da2:	e00c      	b.n	8009dbe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d108      	bne.n	8009dbe <osMutexNew+0xa6>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d104      	bne.n	8009dbe <osMutexNew+0xa6>
            mem = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	e001      	b.n	8009dbe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d112      	bne.n	8009dea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d007      	beq.n	8009dda <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	2004      	movs	r0, #4
 8009dd2:	f001 f892 	bl	800aefa <xQueueCreateMutexStatic>
 8009dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8009dd8:	e016      	b.n	8009e08 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	4619      	mov	r1, r3
 8009de0:	2001      	movs	r0, #1
 8009de2:	f001 f88a 	bl	800aefa <xQueueCreateMutexStatic>
 8009de6:	6278      	str	r0, [r7, #36]	; 0x24
 8009de8:	e00e      	b.n	8009e08 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10b      	bne.n	8009e08 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d004      	beq.n	8009e00 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009df6:	2004      	movs	r0, #4
 8009df8:	f001 f867 	bl	800aeca <xQueueCreateMutex>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24
 8009dfe:	e003      	b.n	8009e08 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009e00:	2001      	movs	r0, #1
 8009e02:	f001 f862 	bl	800aeca <xQueueCreateMutex>
 8009e06:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00c      	beq.n	8009e28 <osMutexNew+0x110>
        if (attr != NULL) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <osMutexNew+0x104>
          name = attr->name;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	617b      	str	r3, [r7, #20]
 8009e1a:	e001      	b.n	8009e20 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009e20:	6979      	ldr	r1, [r7, #20]
 8009e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e24:	f001 ff16 	bl	800bc54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d006      	beq.n	8009e3c <osMutexNew+0x124>
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	f043 0301 	orr.w	r3, r3, #1
 8009e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3728      	adds	r7, #40	; 0x28
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	2000045c 	.word	0x2000045c

08009e4c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f023 0301 	bic.w	r3, r3, #1
 8009e5c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e6a:	f3ef 8305 	mrs	r3, IPSR
 8009e6e:	613b      	str	r3, [r7, #16]
  return(result);
 8009e70:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10f      	bne.n	8009e96 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e76:	f3ef 8310 	mrs	r3, PRIMASK
 8009e7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d105      	bne.n	8009e8e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e82:	f3ef 8311 	mrs	r3, BASEPRI
 8009e86:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <osMutexAcquire+0x52>
 8009e8e:	4b1d      	ldr	r3, [pc, #116]	; (8009f04 <osMutexAcquire+0xb8>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d103      	bne.n	8009e9e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009e96:	f06f 0305 	mvn.w	r3, #5
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	e02c      	b.n	8009ef8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009ea4:	f06f 0303 	mvn.w	r3, #3
 8009ea8:	61fb      	str	r3, [r7, #28]
 8009eaa:	e025      	b.n	8009ef8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d011      	beq.n	8009ed6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	69b8      	ldr	r0, [r7, #24]
 8009eb6:	f001 f86e 	bl	800af96 <xQueueTakeMutexRecursive>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d01b      	beq.n	8009ef8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009ec6:	f06f 0301 	mvn.w	r3, #1
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	e014      	b.n	8009ef8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009ece:	f06f 0302 	mvn.w	r3, #2
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e010      	b.n	8009ef8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	69b8      	ldr	r0, [r7, #24]
 8009eda:	f001 fbeb 	bl	800b6b4 <xQueueSemaphoreTake>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d009      	beq.n	8009ef8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009eea:	f06f 0301 	mvn.w	r3, #1
 8009eee:	61fb      	str	r3, [r7, #28]
 8009ef0:	e002      	b.n	8009ef8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009ef2:	f06f 0302 	mvn.w	r3, #2
 8009ef6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009ef8:	69fb      	ldr	r3, [r7, #28]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	2000045c 	.word	0x2000045c

08009f08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f023 0301 	bic.w	r3, r3, #1
 8009f16:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f24:	f3ef 8305 	mrs	r3, IPSR
 8009f28:	613b      	str	r3, [r7, #16]
  return(result);
 8009f2a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10f      	bne.n	8009f50 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f30:	f3ef 8310 	mrs	r3, PRIMASK
 8009f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d105      	bne.n	8009f48 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8009f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d007      	beq.n	8009f58 <osMutexRelease+0x50>
 8009f48:	4b16      	ldr	r3, [pc, #88]	; (8009fa4 <osMutexRelease+0x9c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d103      	bne.n	8009f58 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009f50:	f06f 0305 	mvn.w	r3, #5
 8009f54:	61fb      	str	r3, [r7, #28]
 8009f56:	e01f      	b.n	8009f98 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d103      	bne.n	8009f66 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009f5e:	f06f 0303 	mvn.w	r3, #3
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e018      	b.n	8009f98 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d009      	beq.n	8009f80 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009f6c:	69b8      	ldr	r0, [r7, #24]
 8009f6e:	f000 ffdf 	bl	800af30 <xQueueGiveMutexRecursive>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d00f      	beq.n	8009f98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009f78:	f06f 0302 	mvn.w	r3, #2
 8009f7c:	61fb      	str	r3, [r7, #28]
 8009f7e:	e00b      	b.n	8009f98 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009f80:	2300      	movs	r3, #0
 8009f82:	2200      	movs	r2, #0
 8009f84:	2100      	movs	r1, #0
 8009f86:	69b8      	ldr	r0, [r7, #24]
 8009f88:	f001 f8a0 	bl	800b0cc <xQueueGenericSend>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d002      	beq.n	8009f98 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009f92:	f06f 0302 	mvn.w	r3, #2
 8009f96:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009f98:	69fb      	ldr	r3, [r7, #28]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3720      	adds	r7, #32
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	2000045c 	.word	0x2000045c

08009fa8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08c      	sub	sp, #48	; 0x30
 8009fac:	af02      	add	r7, sp, #8
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fb8:	f3ef 8305 	mrs	r3, IPSR
 8009fbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8009fbe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f040 8087 	bne.w	800a0d4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8009fca:	617b      	str	r3, [r7, #20]
  return(result);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009fd6:	613b      	str	r3, [r7, #16]
  return(result);
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <osSemaphoreNew+0x3e>
 8009fde:	4b40      	ldr	r3, [pc, #256]	; (800a0e0 <osSemaphoreNew+0x138>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d076      	beq.n	800a0d4 <osSemaphoreNew+0x12c>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d073      	beq.n	800a0d4 <osSemaphoreNew+0x12c>
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d86f      	bhi.n	800a0d4 <osSemaphoreNew+0x12c>
    mem = -1;
 8009ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d015      	beq.n	800a02c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d006      	beq.n	800a016 <osSemaphoreNew+0x6e>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b4f      	cmp	r3, #79	; 0x4f
 800a00e:	d902      	bls.n	800a016 <osSemaphoreNew+0x6e>
        mem = 1;
 800a010:	2301      	movs	r3, #1
 800a012:	623b      	str	r3, [r7, #32]
 800a014:	e00c      	b.n	800a030 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d108      	bne.n	800a030 <osSemaphoreNew+0x88>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d104      	bne.n	800a030 <osSemaphoreNew+0x88>
          mem = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	623b      	str	r3, [r7, #32]
 800a02a:	e001      	b.n	800a030 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d04d      	beq.n	800a0d4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d129      	bne.n	800a092 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d10b      	bne.n	800a05c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	2303      	movs	r3, #3
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	2001      	movs	r0, #1
 800a054:	f000 fe4a 	bl	800acec <xQueueGenericCreateStatic>
 800a058:	6278      	str	r0, [r7, #36]	; 0x24
 800a05a:	e005      	b.n	800a068 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a05c:	2203      	movs	r2, #3
 800a05e:	2100      	movs	r1, #0
 800a060:	2001      	movs	r0, #1
 800a062:	f000 feb6 	bl	800add2 <xQueueGenericCreate>
 800a066:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d022      	beq.n	800a0b4 <osSemaphoreNew+0x10c>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01f      	beq.n	800a0b4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a074:	2300      	movs	r3, #0
 800a076:	2200      	movs	r2, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a07c:	f001 f826 	bl	800b0cc <xQueueGenericSend>
 800a080:	4603      	mov	r3, r0
 800a082:	2b01      	cmp	r3, #1
 800a084:	d016      	beq.n	800a0b4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800a086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a088:	f001 fc99 	bl	800b9be <vQueueDelete>
            hSemaphore = NULL;
 800a08c:	2300      	movs	r3, #0
 800a08e:	627b      	str	r3, [r7, #36]	; 0x24
 800a090:	e010      	b.n	800a0b4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d108      	bne.n	800a0aa <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	461a      	mov	r2, r3
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 ffad 	bl	800b000 <xQueueCreateCountingSemaphoreStatic>
 800a0a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a0a8:	e004      	b.n	800a0b4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a0aa:	68b9      	ldr	r1, [r7, #8]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 ffdc 	bl	800b06a <xQueueCreateCountingSemaphore>
 800a0b2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00c      	beq.n	800a0d4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <osSemaphoreNew+0x120>
          name = attr->name;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	61fb      	str	r3, [r7, #28]
 800a0c6:	e001      	b.n	800a0cc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a0cc:	69f9      	ldr	r1, [r7, #28]
 800a0ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0d0:	f001 fdc0 	bl	800bc54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3728      	adds	r7, #40	; 0x28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	2000045c 	.word	0x2000045c

0800a0e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a0fc:	f06f 0303 	mvn.w	r3, #3
 800a100:	61fb      	str	r3, [r7, #28]
 800a102:	e04b      	b.n	800a19c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a104:	f3ef 8305 	mrs	r3, IPSR
 800a108:	617b      	str	r3, [r7, #20]
  return(result);
 800a10a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10f      	bne.n	800a130 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a110:	f3ef 8310 	mrs	r3, PRIMASK
 800a114:	613b      	str	r3, [r7, #16]
  return(result);
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d105      	bne.n	800a128 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a11c:	f3ef 8311 	mrs	r3, BASEPRI
 800a120:	60fb      	str	r3, [r7, #12]
  return(result);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d026      	beq.n	800a176 <osSemaphoreAcquire+0x92>
 800a128:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <osSemaphoreAcquire+0xc4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d122      	bne.n	800a176 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a136:	f06f 0303 	mvn.w	r3, #3
 800a13a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a13c:	e02d      	b.n	800a19a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a13e:	2300      	movs	r3, #0
 800a140:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a142:	f107 0308 	add.w	r3, r7, #8
 800a146:	461a      	mov	r2, r3
 800a148:	2100      	movs	r1, #0
 800a14a:	69b8      	ldr	r0, [r7, #24]
 800a14c:	f001 fbba 	bl	800b8c4 <xQueueReceiveFromISR>
 800a150:	4603      	mov	r3, r0
 800a152:	2b01      	cmp	r3, #1
 800a154:	d003      	beq.n	800a15e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a156:	f06f 0302 	mvn.w	r3, #2
 800a15a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a15c:	e01d      	b.n	800a19a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01a      	beq.n	800a19a <osSemaphoreAcquire+0xb6>
 800a164:	4b11      	ldr	r3, [pc, #68]	; (800a1ac <osSemaphoreAcquire+0xc8>)
 800a166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a174:	e011      	b.n	800a19a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	69b8      	ldr	r0, [r7, #24]
 800a17a:	f001 fa9b 	bl	800b6b4 <xQueueSemaphoreTake>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b01      	cmp	r3, #1
 800a182:	d00b      	beq.n	800a19c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a18a:	f06f 0301 	mvn.w	r3, #1
 800a18e:	61fb      	str	r3, [r7, #28]
 800a190:	e004      	b.n	800a19c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a192:	f06f 0302 	mvn.w	r3, #2
 800a196:	61fb      	str	r3, [r7, #28]
 800a198:	e000      	b.n	800a19c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a19a:	bf00      	nop
      }
    }
  }

  return (stat);
 800a19c:	69fb      	ldr	r3, [r7, #28]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3720      	adds	r7, #32
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	2000045c 	.word	0x2000045c
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b088      	sub	sp, #32
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d103      	bne.n	800a1ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a1c6:	f06f 0303 	mvn.w	r3, #3
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	e03e      	b.n	800a24c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ce:	f3ef 8305 	mrs	r3, IPSR
 800a1d2:	617b      	str	r3, [r7, #20]
  return(result);
 800a1d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10f      	bne.n	800a1fa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1da:	f3ef 8310 	mrs	r3, PRIMASK
 800a1de:	613b      	str	r3, [r7, #16]
  return(result);
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d105      	bne.n	800a1f2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1e6:	f3ef 8311 	mrs	r3, BASEPRI
 800a1ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d01e      	beq.n	800a230 <osSemaphoreRelease+0x80>
 800a1f2:	4b19      	ldr	r3, [pc, #100]	; (800a258 <osSemaphoreRelease+0xa8>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d11a      	bne.n	800a230 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1fe:	f107 0308 	add.w	r3, r7, #8
 800a202:	4619      	mov	r1, r3
 800a204:	69b8      	ldr	r0, [r7, #24]
 800a206:	f001 f8ef 	bl	800b3e8 <xQueueGiveFromISR>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d003      	beq.n	800a218 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a210:	f06f 0302 	mvn.w	r3, #2
 800a214:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a216:	e018      	b.n	800a24a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d015      	beq.n	800a24a <osSemaphoreRelease+0x9a>
 800a21e:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <osSemaphoreRelease+0xac>)
 800a220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a22e:	e00c      	b.n	800a24a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a230:	2300      	movs	r3, #0
 800a232:	2200      	movs	r2, #0
 800a234:	2100      	movs	r1, #0
 800a236:	69b8      	ldr	r0, [r7, #24]
 800a238:	f000 ff48 	bl	800b0cc <xQueueGenericSend>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d004      	beq.n	800a24c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a242:	f06f 0302 	mvn.w	r3, #2
 800a246:	61fb      	str	r3, [r7, #28]
 800a248:	e000      	b.n	800a24c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a24a:	bf00      	nop
    }
  }

  return (stat);
 800a24c:	69fb      	ldr	r3, [r7, #28]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3720      	adds	r7, #32
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	2000045c 	.word	0x2000045c
 800a25c:	e000ed04 	.word	0xe000ed04

0800a260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4a07      	ldr	r2, [pc, #28]	; (800a28c <vApplicationGetIdleTaskMemory+0x2c>)
 800a270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	4a06      	ldr	r2, [pc, #24]	; (800a290 <vApplicationGetIdleTaskMemory+0x30>)
 800a276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2280      	movs	r2, #128	; 0x80
 800a27c:	601a      	str	r2, [r3, #0]
}
 800a27e:	bf00      	nop
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000460 	.word	0x20000460
 800a290:	200004bc 	.word	0x200004bc

0800a294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <vApplicationGetTimerTaskMemory+0x30>)
 800a2aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	200006bc 	.word	0x200006bc
 800a2c4:	20000718 	.word	0x20000718

0800a2c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3b04      	subs	r3, #4
 800a2d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	3b04      	subs	r3, #4
 800a2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f023 0201 	bic.w	r2, r3, #1
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3b04      	subs	r3, #4
 800a2f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2f8:	4a0c      	ldr	r2, [pc, #48]	; (800a32c <pxPortInitialiseStack+0x64>)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3b14      	subs	r3, #20
 800a302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	3b04      	subs	r3, #4
 800a30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f06f 0202 	mvn.w	r2, #2
 800a316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3b20      	subs	r3, #32
 800a31c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a31e:	68fb      	ldr	r3, [r7, #12]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	0800a331 	.word	0x0800a331

0800a330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a33a:	4b11      	ldr	r3, [pc, #68]	; (800a380 <prvTaskExitError+0x50>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a342:	d009      	beq.n	800a358 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	e7fe      	b.n	800a356 <prvTaskExitError+0x26>
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a36a:	bf00      	nop
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0fc      	beq.n	800a36c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a372:	bf00      	nop
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	20000020 	.word	0x20000020
	...

0800a390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a390:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <pxCurrentTCBConst2>)
 800a392:	6819      	ldr	r1, [r3, #0]
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	f380 8809 	msr	PSP, r0
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	f380 8811 	msr	BASEPRI, r0
 800a3aa:	4770      	bx	lr
 800a3ac:	f3af 8000 	nop.w

0800a3b0 <pxCurrentTCBConst2>:
 800a3b0:	200022a8 	.word	0x200022a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3b8:	4808      	ldr	r0, [pc, #32]	; (800a3dc <prvPortStartFirstTask+0x24>)
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	6800      	ldr	r0, [r0, #0]
 800a3be:	f380 8808 	msr	MSP, r0
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8814 	msr	CONTROL, r0
 800a3ca:	b662      	cpsie	i
 800a3cc:	b661      	cpsie	f
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	df00      	svc	0
 800a3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3da:	bf00      	nop
 800a3dc:	e000ed08 	.word	0xe000ed08

0800a3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3e6:	4b44      	ldr	r3, [pc, #272]	; (800a4f8 <xPortStartScheduler+0x118>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a44      	ldr	r2, [pc, #272]	; (800a4fc <xPortStartScheduler+0x11c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d109      	bne.n	800a404 <xPortStartScheduler+0x24>
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	e7fe      	b.n	800a402 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a404:	4b3c      	ldr	r3, [pc, #240]	; (800a4f8 <xPortStartScheduler+0x118>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a3d      	ldr	r2, [pc, #244]	; (800a500 <xPortStartScheduler+0x120>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d109      	bne.n	800a422 <xPortStartScheduler+0x42>
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e7fe      	b.n	800a420 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a422:	4b38      	ldr	r3, [pc, #224]	; (800a504 <xPortStartScheduler+0x124>)
 800a424:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	22ff      	movs	r2, #255	; 0xff
 800a432:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a444:	b2da      	uxtb	r2, r3
 800a446:	4b30      	ldr	r3, [pc, #192]	; (800a508 <xPortStartScheduler+0x128>)
 800a448:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a44a:	4b30      	ldr	r3, [pc, #192]	; (800a50c <xPortStartScheduler+0x12c>)
 800a44c:	2207      	movs	r2, #7
 800a44e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a450:	e009      	b.n	800a466 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a452:	4b2e      	ldr	r3, [pc, #184]	; (800a50c <xPortStartScheduler+0x12c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3b01      	subs	r3, #1
 800a458:	4a2c      	ldr	r2, [pc, #176]	; (800a50c <xPortStartScheduler+0x12c>)
 800a45a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	b2db      	uxtb	r3, r3
 800a464:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46e:	2b80      	cmp	r3, #128	; 0x80
 800a470:	d0ef      	beq.n	800a452 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a472:	4b26      	ldr	r3, [pc, #152]	; (800a50c <xPortStartScheduler+0x12c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f1c3 0307 	rsb	r3, r3, #7
 800a47a:	2b04      	cmp	r3, #4
 800a47c:	d009      	beq.n	800a492 <xPortStartScheduler+0xb2>
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	60bb      	str	r3, [r7, #8]
 800a490:	e7fe      	b.n	800a490 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a492:	4b1e      	ldr	r3, [pc, #120]	; (800a50c <xPortStartScheduler+0x12c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	4a1c      	ldr	r2, [pc, #112]	; (800a50c <xPortStartScheduler+0x12c>)
 800a49a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a49c:	4b1b      	ldr	r3, [pc, #108]	; (800a50c <xPortStartScheduler+0x12c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4a4:	4a19      	ldr	r2, [pc, #100]	; (800a50c <xPortStartScheduler+0x12c>)
 800a4a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4b0:	4b17      	ldr	r3, [pc, #92]	; (800a510 <xPortStartScheduler+0x130>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a16      	ldr	r2, [pc, #88]	; (800a510 <xPortStartScheduler+0x130>)
 800a4b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4bc:	4b14      	ldr	r3, [pc, #80]	; (800a510 <xPortStartScheduler+0x130>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a13      	ldr	r2, [pc, #76]	; (800a510 <xPortStartScheduler+0x130>)
 800a4c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4c8:	f7f8 f8e8 	bl	800269c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4cc:	4b11      	ldr	r3, [pc, #68]	; (800a514 <xPortStartScheduler+0x134>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4d2:	f000 f8d1 	bl	800a678 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4d6:	4b10      	ldr	r3, [pc, #64]	; (800a518 <xPortStartScheduler+0x138>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a0f      	ldr	r2, [pc, #60]	; (800a518 <xPortStartScheduler+0x138>)
 800a4dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4e2:	f7ff ff69 	bl	800a3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4e6:	f002 f80d 	bl	800c504 <vTaskSwitchContext>
	prvTaskExitError();
 800a4ea:	f7ff ff21 	bl	800a330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000ed00 	.word	0xe000ed00
 800a4fc:	410fc271 	.word	0x410fc271
 800a500:	410fc270 	.word	0x410fc270
 800a504:	e000e400 	.word	0xe000e400
 800a508:	20000b18 	.word	0x20000b18
 800a50c:	20000b1c 	.word	0x20000b1c
 800a510:	e000ed20 	.word	0xe000ed20
 800a514:	20000020 	.word	0x20000020
 800a518:	e000ef34 	.word	0xe000ef34

0800a51c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a534:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <vPortEnterCritical+0x54>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	4a0d      	ldr	r2, [pc, #52]	; (800a570 <vPortEnterCritical+0x54>)
 800a53c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a53e:	4b0c      	ldr	r3, [pc, #48]	; (800a570 <vPortEnterCritical+0x54>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d10e      	bne.n	800a564 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a546:	4b0b      	ldr	r3, [pc, #44]	; (800a574 <vPortEnterCritical+0x58>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d009      	beq.n	800a564 <vPortEnterCritical+0x48>
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	603b      	str	r3, [r7, #0]
 800a562:	e7fe      	b.n	800a562 <vPortEnterCritical+0x46>
	}
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	20000020 	.word	0x20000020
 800a574:	e000ed04 	.word	0xe000ed04

0800a578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a57e:	4b11      	ldr	r3, [pc, #68]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d109      	bne.n	800a59a <vPortExitCritical+0x22>
 800a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	607b      	str	r3, [r7, #4]
 800a598:	e7fe      	b.n	800a598 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a59a:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	4a08      	ldr	r2, [pc, #32]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a5a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5a4:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d104      	bne.n	800a5b6 <vPortExitCritical+0x3e>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20000020 	.word	0x20000020
	...

0800a5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5d0:	f3ef 8009 	mrs	r0, PSP
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	4b15      	ldr	r3, [pc, #84]	; (800a630 <pxCurrentTCBConst>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	f01e 0f10 	tst.w	lr, #16
 800a5e0:	bf08      	it	eq
 800a5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ea:	6010      	str	r0, [r2, #0]
 800a5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5f4:	f380 8811 	msr	BASEPRI, r0
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f001 ff80 	bl	800c504 <vTaskSwitchContext>
 800a604:	f04f 0000 	mov.w	r0, #0
 800a608:	f380 8811 	msr	BASEPRI, r0
 800a60c:	bc09      	pop	{r0, r3}
 800a60e:	6819      	ldr	r1, [r3, #0]
 800a610:	6808      	ldr	r0, [r1, #0]
 800a612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a616:	f01e 0f10 	tst.w	lr, #16
 800a61a:	bf08      	it	eq
 800a61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a620:	f380 8809 	msr	PSP, r0
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	f3af 8000 	nop.w

0800a630 <pxCurrentTCBConst>:
 800a630:	200022a8 	.word	0x200022a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop

0800a638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a650:	f001 fea0 	bl	800c394 <xTaskIncrementTick>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a65a:	4b06      	ldr	r3, [pc, #24]	; (800a674 <SysTick_Handler+0x3c>)
 800a65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a678:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a688 <vPortEnableVFP+0x10>
 800a67c:	6801      	ldr	r1, [r0, #0]
 800a67e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a682:	6001      	str	r1, [r0, #0]
 800a684:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a686:	bf00      	nop
 800a688:	e000ed88 	.word	0xe000ed88

0800a68c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a692:	f3ef 8305 	mrs	r3, IPSR
 800a696:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b0f      	cmp	r3, #15
 800a69c:	d913      	bls.n	800a6c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a69e:	4a16      	ldr	r2, [pc, #88]	; (800a6f8 <vPortValidateInterruptPriority+0x6c>)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6a8:	4b14      	ldr	r3, [pc, #80]	; (800a6fc <vPortValidateInterruptPriority+0x70>)
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	7afa      	ldrb	r2, [r7, #11]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d209      	bcs.n	800a6c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	607b      	str	r3, [r7, #4]
 800a6c4:	e7fe      	b.n	800a6c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6c6:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <vPortValidateInterruptPriority+0x74>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	; (800a704 <vPortValidateInterruptPriority+0x78>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d909      	bls.n	800a6ea <vPortValidateInterruptPriority+0x5e>
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	e7fe      	b.n	800a6e8 <vPortValidateInterruptPriority+0x5c>
	}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	e000e3f0 	.word	0xe000e3f0
 800a6fc:	20000b18 	.word	0x20000b18
 800a700:	e000ed0c 	.word	0xe000ed0c
 800a704:	20000b1c 	.word	0x20000b1c

0800a708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a710:	2300      	movs	r3, #0
 800a712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a714:	f001 fd26 	bl	800c164 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a718:	4b57      	ldr	r3, [pc, #348]	; (800a878 <pvPortMalloc+0x170>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a720:	f000 f90c 	bl	800a93c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a724:	4b55      	ldr	r3, [pc, #340]	; (800a87c <pvPortMalloc+0x174>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4013      	ands	r3, r2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 808c 	bne.w	800a84a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01c      	beq.n	800a772 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a738:	2208      	movs	r2, #8
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4413      	add	r3, r2
 800a73e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f003 0307 	and.w	r3, r3, #7
 800a746:	2b00      	cmp	r3, #0
 800a748:	d013      	beq.n	800a772 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f023 0307 	bic.w	r3, r3, #7
 800a750:	3308      	adds	r3, #8
 800a752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d009      	beq.n	800a772 <pvPortMalloc+0x6a>
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e7fe      	b.n	800a770 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d068      	beq.n	800a84a <pvPortMalloc+0x142>
 800a778:	4b41      	ldr	r3, [pc, #260]	; (800a880 <pvPortMalloc+0x178>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d863      	bhi.n	800a84a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a782:	4b40      	ldr	r3, [pc, #256]	; (800a884 <pvPortMalloc+0x17c>)
 800a784:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a786:	4b3f      	ldr	r3, [pc, #252]	; (800a884 <pvPortMalloc+0x17c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a78c:	e004      	b.n	800a798 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d903      	bls.n	800a7aa <pvPortMalloc+0xa2>
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1f1      	bne.n	800a78e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7aa:	4b33      	ldr	r3, [pc, #204]	; (800a878 <pvPortMalloc+0x170>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d04a      	beq.n	800a84a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	4413      	add	r3, r2
 800a7bc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	1ad2      	subs	r2, r2, r3
 800a7ce:	2308      	movs	r3, #8
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d91e      	bls.n	800a814 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4413      	add	r3, r2
 800a7dc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f003 0307 	and.w	r3, r3, #7
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d009      	beq.n	800a7fc <pvPortMalloc+0xf4>
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	613b      	str	r3, [r7, #16]
 800a7fa:	e7fe      	b.n	800a7fa <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	1ad2      	subs	r2, r2, r3
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a80e:	69b8      	ldr	r0, [r7, #24]
 800a810:	f000 f8f6 	bl	800aa00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a814:	4b1a      	ldr	r3, [pc, #104]	; (800a880 <pvPortMalloc+0x178>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	4a18      	ldr	r2, [pc, #96]	; (800a880 <pvPortMalloc+0x178>)
 800a820:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a822:	4b17      	ldr	r3, [pc, #92]	; (800a880 <pvPortMalloc+0x178>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4b18      	ldr	r3, [pc, #96]	; (800a888 <pvPortMalloc+0x180>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d203      	bcs.n	800a836 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a82e:	4b14      	ldr	r3, [pc, #80]	; (800a880 <pvPortMalloc+0x178>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a15      	ldr	r2, [pc, #84]	; (800a888 <pvPortMalloc+0x180>)
 800a834:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	4b10      	ldr	r3, [pc, #64]	; (800a87c <pvPortMalloc+0x174>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	431a      	orrs	r2, r3
 800a840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a842:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	2200      	movs	r2, #0
 800a848:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a84a:	f001 fcd1 	bl	800c1f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <pvPortMalloc+0x164>
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	e7fe      	b.n	800a86a <pvPortMalloc+0x162>
	return pvReturn;
 800a86c:	69fb      	ldr	r3, [r7, #28]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3728      	adds	r7, #40	; 0x28
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20002298 	.word	0x20002298
 800a87c:	200022a4 	.word	0x200022a4
 800a880:	2000229c 	.word	0x2000229c
 800a884:	20002290 	.word	0x20002290
 800a888:	200022a0 	.word	0x200022a0

0800a88c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d046      	beq.n	800a92c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a89e:	2308      	movs	r3, #8
 800a8a0:	425b      	negs	r3, r3
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	4b20      	ldr	r3, [pc, #128]	; (800a934 <vPortFree+0xa8>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d109      	bne.n	800a8ce <vPortFree+0x42>
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	e7fe      	b.n	800a8cc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d009      	beq.n	800a8ea <vPortFree+0x5e>
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	60bb      	str	r3, [r7, #8]
 800a8e8:	e7fe      	b.n	800a8e8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <vPortFree+0xa8>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d019      	beq.n	800a92c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d115      	bne.n	800a92c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <vPortFree+0xa8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	43db      	mvns	r3, r3
 800a90a:	401a      	ands	r2, r3
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a910:	f001 fc28 	bl	800c164 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	685a      	ldr	r2, [r3, #4]
 800a918:	4b07      	ldr	r3, [pc, #28]	; (800a938 <vPortFree+0xac>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4413      	add	r3, r2
 800a91e:	4a06      	ldr	r2, [pc, #24]	; (800a938 <vPortFree+0xac>)
 800a920:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a922:	6938      	ldr	r0, [r7, #16]
 800a924:	f000 f86c 	bl	800aa00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a928:	f001 fc62 	bl	800c1f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a92c:	bf00      	nop
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	200022a4 	.word	0x200022a4
 800a938:	2000229c 	.word	0x2000229c

0800a93c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a942:	f241 7370 	movw	r3, #6000	; 0x1770
 800a946:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a948:	4b27      	ldr	r3, [pc, #156]	; (800a9e8 <prvHeapInit+0xac>)
 800a94a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f003 0307 	and.w	r3, r3, #7
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00c      	beq.n	800a970 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3307      	adds	r3, #7
 800a95a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f023 0307 	bic.w	r3, r3, #7
 800a962:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	4a1f      	ldr	r2, [pc, #124]	; (800a9e8 <prvHeapInit+0xac>)
 800a96c:	4413      	add	r3, r2
 800a96e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a974:	4a1d      	ldr	r2, [pc, #116]	; (800a9ec <prvHeapInit+0xb0>)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a97a:	4b1c      	ldr	r3, [pc, #112]	; (800a9ec <prvHeapInit+0xb0>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	4413      	add	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a988:	2208      	movs	r2, #8
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f023 0307 	bic.w	r3, r3, #7
 800a996:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4a15      	ldr	r2, [pc, #84]	; (800a9f0 <prvHeapInit+0xb4>)
 800a99c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a99e:	4b14      	ldr	r3, [pc, #80]	; (800a9f0 <prvHeapInit+0xb4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9a6:	4b12      	ldr	r3, [pc, #72]	; (800a9f0 <prvHeapInit+0xb4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	1ad2      	subs	r2, r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9bc:	4b0c      	ldr	r3, [pc, #48]	; (800a9f0 <prvHeapInit+0xb4>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	4a0a      	ldr	r2, [pc, #40]	; (800a9f4 <prvHeapInit+0xb8>)
 800a9ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4a09      	ldr	r2, [pc, #36]	; (800a9f8 <prvHeapInit+0xbc>)
 800a9d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9d4:	4b09      	ldr	r3, [pc, #36]	; (800a9fc <prvHeapInit+0xc0>)
 800a9d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9da:	601a      	str	r2, [r3, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	20000b20 	.word	0x20000b20
 800a9ec:	20002290 	.word	0x20002290
 800a9f0:	20002298 	.word	0x20002298
 800a9f4:	200022a0 	.word	0x200022a0
 800a9f8:	2000229c 	.word	0x2000229c
 800a9fc:	200022a4 	.word	0x200022a4

0800aa00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa08:	4b28      	ldr	r3, [pc, #160]	; (800aaac <prvInsertBlockIntoFreeList+0xac>)
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	e002      	b.n	800aa14 <prvInsertBlockIntoFreeList+0x14>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d8f7      	bhi.n	800aa0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	4413      	add	r3, r2
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d108      	bne.n	800aa42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	685a      	ldr	r2, [r3, #4]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	441a      	add	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	441a      	add	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d118      	bne.n	800aa88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <prvInsertBlockIntoFreeList+0xb0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d00d      	beq.n	800aa7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	441a      	add	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	e008      	b.n	800aa90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa7e:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <prvInsertBlockIntoFreeList+0xb0>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	e003      	b.n	800aa90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d002      	beq.n	800aa9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20002290 	.word	0x20002290
 800aab0:	20002298 	.word	0x20002298

0800aab4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f103 0208 	add.w	r2, r3, #8
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f04f 32ff 	mov.w	r2, #4294967295
 800aacc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f103 0208 	add.w	r2, r3, #8
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f103 0208 	add.w	r2, r3, #8
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b085      	sub	sp, #20
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	1c5a      	adds	r2, r3, #1
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	601a      	str	r2, [r3, #0]
}
 800ab4a:	bf00      	nop
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab56:	b480      	push	{r7}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6c:	d103      	bne.n	800ab76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	e00c      	b.n	800ab90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3308      	adds	r3, #8
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	e002      	b.n	800ab84 <vListInsert+0x2e>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d2f6      	bcs.n	800ab7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	601a      	str	r2, [r3, #0]
}
 800abbc:	bf00      	nop
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	6892      	ldr	r2, [r2, #8]
 800abde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6852      	ldr	r2, [r2, #4]
 800abe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d103      	bne.n	800abfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	1e5a      	subs	r2, r3, #1
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d109      	bne.n	800ac44 <xQueueGenericReset+0x28>
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	60bb      	str	r3, [r7, #8]
 800ac42:	e7fe      	b.n	800ac42 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ac44:	f7ff fc6a 	bl	800a51c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac50:	68f9      	ldr	r1, [r7, #12]
 800ac52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac54:	fb01 f303 	mul.w	r3, r1, r3
 800ac58:	441a      	add	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac74:	3b01      	subs	r3, #1
 800ac76:	68f9      	ldr	r1, [r7, #12]
 800ac78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac7a:	fb01 f303 	mul.w	r3, r1, r3
 800ac7e:	441a      	add	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	22ff      	movs	r2, #255	; 0xff
 800ac88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	22ff      	movs	r2, #255	; 0xff
 800ac90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d114      	bne.n	800acc4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d01a      	beq.n	800acd8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3310      	adds	r3, #16
 800aca6:	4618      	mov	r0, r3
 800aca8:	f001 fcd6 	bl	800c658 <xTaskRemoveFromEventList>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d012      	beq.n	800acd8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acb2:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <xQueueGenericReset+0xcc>)
 800acb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	e009      	b.n	800acd8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3310      	adds	r3, #16
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff fef3 	bl	800aab4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3324      	adds	r3, #36	; 0x24
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7ff feee 	bl	800aab4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acd8:	f7ff fc4e 	bl	800a578 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acdc:	2301      	movs	r3, #1
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08e      	sub	sp, #56	; 0x38
 800acf0:	af02      	add	r7, sp, #8
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d109      	bne.n	800ad14 <xQueueGenericCreateStatic+0x28>
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad12:	e7fe      	b.n	800ad12 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d109      	bne.n	800ad2e <xQueueGenericCreateStatic+0x42>
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad2c:	e7fe      	b.n	800ad2c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <xQueueGenericCreateStatic+0x4e>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <xQueueGenericCreateStatic+0x52>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e000      	b.n	800ad40 <xQueueGenericCreateStatic+0x54>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d109      	bne.n	800ad58 <xQueueGenericCreateStatic+0x6c>
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	623b      	str	r3, [r7, #32]
 800ad56:	e7fe      	b.n	800ad56 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d102      	bne.n	800ad64 <xQueueGenericCreateStatic+0x78>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <xQueueGenericCreateStatic+0x7c>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e000      	b.n	800ad6a <xQueueGenericCreateStatic+0x7e>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d109      	bne.n	800ad82 <xQueueGenericCreateStatic+0x96>
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	e7fe      	b.n	800ad80 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad82:	2350      	movs	r3, #80	; 0x50
 800ad84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b50      	cmp	r3, #80	; 0x50
 800ad8a:	d009      	beq.n	800ada0 <xQueueGenericCreateStatic+0xb4>
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	61bb      	str	r3, [r7, #24]
 800ad9e:	e7fe      	b.n	800ad9e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ada0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00d      	beq.n	800adc8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adb4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800adb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	4613      	mov	r3, r2
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	68b9      	ldr	r1, [r7, #8]
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 f844 	bl	800ae50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800adca:	4618      	mov	r0, r3
 800adcc:	3730      	adds	r7, #48	; 0x30
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800add2:	b580      	push	{r7, lr}
 800add4:	b08a      	sub	sp, #40	; 0x28
 800add6:	af02      	add	r7, sp, #8
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	4613      	mov	r3, r2
 800adde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <xQueueGenericCreate+0x28>
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	613b      	str	r3, [r7, #16]
 800adf8:	e7fe      	b.n	800adf8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61fb      	str	r3, [r7, #28]
 800ae04:	e004      	b.n	800ae10 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
 800ae0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	3350      	adds	r3, #80	; 0x50
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff fc77 	bl	800a708 <pvPortMalloc>
 800ae1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d011      	beq.n	800ae46 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	3350      	adds	r3, #80	; 0x50
 800ae2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae34:	79fa      	ldrb	r2, [r7, #7]
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f805 	bl	800ae50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae46:	69bb      	ldr	r3, [r7, #24]
	}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d103      	bne.n	800ae6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	69ba      	ldr	r2, [r7, #24]
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	e002      	b.n	800ae72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae7e:	2101      	movs	r1, #1
 800ae80:	69b8      	ldr	r0, [r7, #24]
 800ae82:	f7ff fecb 	bl	800ac1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae8e:	bf00      	nop
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00e      	beq.n	800aec2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2100      	movs	r1, #0
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f905 	bl	800b0cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b086      	sub	sp, #24
 800aece:	af00      	add	r7, sp, #0
 800aed0:	4603      	mov	r3, r0
 800aed2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aed4:	2301      	movs	r3, #1
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	2300      	movs	r3, #0
 800aeda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	461a      	mov	r2, r3
 800aee0:	6939      	ldr	r1, [r7, #16]
 800aee2:	6978      	ldr	r0, [r7, #20]
 800aee4:	f7ff ff75 	bl	800add2 <xQueueGenericCreate>
 800aee8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff ffd3 	bl	800ae96 <prvInitialiseMutex>

		return xNewQueue;
 800aef0:	68fb      	ldr	r3, [r7, #12]
	}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b088      	sub	sp, #32
 800aefe:	af02      	add	r7, sp, #8
 800af00:	4603      	mov	r3, r0
 800af02:	6039      	str	r1, [r7, #0]
 800af04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af06:	2301      	movs	r3, #1
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	2300      	movs	r3, #0
 800af0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800af0e:	79fb      	ldrb	r3, [r7, #7]
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2200      	movs	r2, #0
 800af16:	6939      	ldr	r1, [r7, #16]
 800af18:	6978      	ldr	r0, [r7, #20]
 800af1a:	f7ff fee7 	bl	800acec <xQueueGenericCreateStatic>
 800af1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f7ff ffb8 	bl	800ae96 <prvInitialiseMutex>

		return xNewQueue;
 800af26:	68fb      	ldr	r3, [r7, #12]
	}
 800af28:	4618      	mov	r0, r3
 800af2a:	3718      	adds	r7, #24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800af30:	b590      	push	{r4, r7, lr}
 800af32:	b087      	sub	sp, #28
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d109      	bne.n	800af56 <xQueueGiveMutexRecursive+0x26>
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	e7fe      	b.n	800af54 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	689c      	ldr	r4, [r3, #8]
 800af5a:	f001 fd89 	bl	800ca70 <xTaskGetCurrentTaskHandle>
 800af5e:	4603      	mov	r3, r0
 800af60:	429c      	cmp	r4, r3
 800af62:	d111      	bne.n	800af88 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	1e5a      	subs	r2, r3, #1
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d105      	bne.n	800af82 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800af76:	2300      	movs	r3, #0
 800af78:	2200      	movs	r2, #0
 800af7a:	2100      	movs	r1, #0
 800af7c:	6938      	ldr	r0, [r7, #16]
 800af7e:	f000 f8a5 	bl	800b0cc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800af82:	2301      	movs	r3, #1
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	e001      	b.n	800af8c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800af88:	2300      	movs	r3, #0
 800af8a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800af8c:	697b      	ldr	r3, [r7, #20]
	}
 800af8e:	4618      	mov	r0, r3
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	bd90      	pop	{r4, r7, pc}

0800af96 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800af96:	b590      	push	{r4, r7, lr}
 800af98:	b087      	sub	sp, #28
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d109      	bne.n	800afbe <xQueueTakeMutexRecursive+0x28>
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	e7fe      	b.n	800afbc <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	689c      	ldr	r4, [r3, #8]
 800afc2:	f001 fd55 	bl	800ca70 <xTaskGetCurrentTaskHandle>
 800afc6:	4603      	mov	r3, r0
 800afc8:	429c      	cmp	r4, r3
 800afca:	d107      	bne.n	800afdc <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	1c5a      	adds	r2, r3, #1
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800afd6:	2301      	movs	r3, #1
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	e00c      	b.n	800aff6 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6938      	ldr	r0, [r7, #16]
 800afe0:	f000 fb68 	bl	800b6b4 <xQueueSemaphoreTake>
 800afe4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d004      	beq.n	800aff6 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800aff6:	697b      	ldr	r3, [r7, #20]
	}
 800aff8:	4618      	mov	r0, r3
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	bd90      	pop	{r4, r7, pc}

0800b000 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08a      	sub	sp, #40	; 0x28
 800b004:	af02      	add	r7, sp, #8
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d109      	bne.n	800b026 <xQueueCreateCountingSemaphoreStatic+0x26>
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	e7fe      	b.n	800b024 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d909      	bls.n	800b042 <xQueueCreateCountingSemaphoreStatic+0x42>
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	617b      	str	r3, [r7, #20]
 800b040:	e7fe      	b.n	800b040 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b042:	2302      	movs	r3, #2
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	2100      	movs	r1, #0
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f7ff fe4d 	bl	800acec <xQueueGenericCreateStatic>
 800b052:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d002      	beq.n	800b060 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b060:	69fb      	ldr	r3, [r7, #28]
	}
 800b062:	4618      	mov	r0, r3
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b086      	sub	sp, #24
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d109      	bne.n	800b08e <xQueueCreateCountingSemaphore+0x24>
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	e7fe      	b.n	800b08c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d909      	bls.n	800b0aa <xQueueCreateCountingSemaphore+0x40>
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	e7fe      	b.n	800b0a8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff fe8f 	bl	800add2 <xQueueGenericCreate>
 800b0b4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b0c2:	697b      	ldr	r3, [r7, #20]
	}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08e      	sub	sp, #56	; 0x38
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d109      	bne.n	800b0fc <xQueueGenericSend+0x30>
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0fa:	e7fe      	b.n	800b0fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d103      	bne.n	800b10a <xQueueGenericSend+0x3e>
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <xQueueGenericSend+0x42>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e000      	b.n	800b110 <xQueueGenericSend+0x44>
 800b10e:	2300      	movs	r3, #0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d109      	bne.n	800b128 <xQueueGenericSend+0x5c>
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	627b      	str	r3, [r7, #36]	; 0x24
 800b126:	e7fe      	b.n	800b126 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d103      	bne.n	800b136 <xQueueGenericSend+0x6a>
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b132:	2b01      	cmp	r3, #1
 800b134:	d101      	bne.n	800b13a <xQueueGenericSend+0x6e>
 800b136:	2301      	movs	r3, #1
 800b138:	e000      	b.n	800b13c <xQueueGenericSend+0x70>
 800b13a:	2300      	movs	r3, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d109      	bne.n	800b154 <xQueueGenericSend+0x88>
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	623b      	str	r3, [r7, #32]
 800b152:	e7fe      	b.n	800b152 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b154:	f001 fc9c 	bl	800ca90 <xTaskGetSchedulerState>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <xQueueGenericSend+0x98>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <xQueueGenericSend+0x9c>
 800b164:	2301      	movs	r3, #1
 800b166:	e000      	b.n	800b16a <xQueueGenericSend+0x9e>
 800b168:	2300      	movs	r3, #0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d109      	bne.n	800b182 <xQueueGenericSend+0xb6>
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	61fb      	str	r3, [r7, #28]
 800b180:	e7fe      	b.n	800b180 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b182:	f7ff f9cb 	bl	800a51c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18e:	429a      	cmp	r2, r3
 800b190:	d302      	bcc.n	800b198 <xQueueGenericSend+0xcc>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b02      	cmp	r3, #2
 800b196:	d129      	bne.n	800b1ec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b19e:	f000 fc48 	bl	800ba32 <prvCopyDataToQueue>
 800b1a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d010      	beq.n	800b1ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	3324      	adds	r3, #36	; 0x24
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f001 fa51 	bl	800c658 <xTaskRemoveFromEventList>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d013      	beq.n	800b1e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1bc:	4b3f      	ldr	r3, [pc, #252]	; (800b2bc <xQueueGenericSend+0x1f0>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	e00a      	b.n	800b1e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d007      	beq.n	800b1e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1d4:	4b39      	ldr	r3, [pc, #228]	; (800b2bc <xQueueGenericSend+0x1f0>)
 800b1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1e4:	f7ff f9c8 	bl	800a578 <vPortExitCritical>
				return pdPASS;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e063      	b.n	800b2b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d103      	bne.n	800b1fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1f2:	f7ff f9c1 	bl	800a578 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e05c      	b.n	800b2b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b200:	f107 0314 	add.w	r3, r7, #20
 800b204:	4618      	mov	r0, r3
 800b206:	f001 fa8b 	bl	800c720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b20a:	2301      	movs	r3, #1
 800b20c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b20e:	f7ff f9b3 	bl	800a578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b212:	f000 ffa7 	bl	800c164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b216:	f7ff f981 	bl	800a51c <vPortEnterCritical>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b220:	b25b      	sxtb	r3, r3
 800b222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b226:	d103      	bne.n	800b230 <xQueueGenericSend+0x164>
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b236:	b25b      	sxtb	r3, r3
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23c:	d103      	bne.n	800b246 <xQueueGenericSend+0x17a>
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b246:	f7ff f997 	bl	800a578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b24a:	1d3a      	adds	r2, r7, #4
 800b24c:	f107 0314 	add.w	r3, r7, #20
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f001 fa7a 	bl	800c74c <xTaskCheckForTimeOut>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d124      	bne.n	800b2a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b25e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b260:	f000 fcdf 	bl	800bc22 <prvIsQueueFull>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d018      	beq.n	800b29c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	3310      	adds	r3, #16
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f001 f9a2 	bl	800c5bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b27a:	f000 fc6a 	bl	800bb52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b27e:	f000 ffb7 	bl	800c1f0 <xTaskResumeAll>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	f47f af7c 	bne.w	800b182 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b28a:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <xQueueGenericSend+0x1f0>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	e772      	b.n	800b182 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b29e:	f000 fc58 	bl	800bb52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2a2:	f000 ffa5 	bl	800c1f0 <xTaskResumeAll>
 800b2a6:	e76c      	b.n	800b182 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2aa:	f000 fc52 	bl	800bb52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ae:	f000 ff9f 	bl	800c1f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3738      	adds	r7, #56	; 0x38
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	e000ed04 	.word	0xe000ed04

0800b2c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08e      	sub	sp, #56	; 0x38
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d109      	bne.n	800b2ec <xQueueGenericSendFromISR+0x2c>
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b2ea:	e7fe      	b.n	800b2ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d103      	bne.n	800b2fa <xQueueGenericSendFromISR+0x3a>
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <xQueueGenericSendFromISR+0x3e>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e000      	b.n	800b300 <xQueueGenericSendFromISR+0x40>
 800b2fe:	2300      	movs	r3, #0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d109      	bne.n	800b318 <xQueueGenericSendFromISR+0x58>
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	623b      	str	r3, [r7, #32]
 800b316:	e7fe      	b.n	800b316 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d103      	bne.n	800b326 <xQueueGenericSendFromISR+0x66>
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b322:	2b01      	cmp	r3, #1
 800b324:	d101      	bne.n	800b32a <xQueueGenericSendFromISR+0x6a>
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <xQueueGenericSendFromISR+0x6c>
 800b32a:	2300      	movs	r3, #0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d109      	bne.n	800b344 <xQueueGenericSendFromISR+0x84>
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	e7fe      	b.n	800b342 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b344:	f7ff f9a2 	bl	800a68c <vPortValidateInterruptPriority>
	__asm volatile
 800b348:	f3ef 8211 	mrs	r2, BASEPRI
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	61ba      	str	r2, [r7, #24]
 800b35e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b360:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b362:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d302      	bcc.n	800b376 <xQueueGenericSendFromISR+0xb6>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b02      	cmp	r3, #2
 800b374:	d12c      	bne.n	800b3d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b37c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b386:	f000 fb54 	bl	800ba32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b38a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d112      	bne.n	800b3ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d016      	beq.n	800b3ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	3324      	adds	r3, #36	; 0x24
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 f959 	bl	800c658 <xTaskRemoveFromEventList>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00e      	beq.n	800b3ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00b      	beq.n	800b3ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	e007      	b.n	800b3ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3be:	3301      	adds	r3, #1
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	b25a      	sxtb	r2, r3
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b3ce:	e001      	b.n	800b3d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3738      	adds	r7, #56	; 0x38
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08e      	sub	sp, #56	; 0x38
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d109      	bne.n	800b410 <xQueueGiveFromISR+0x28>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	623b      	str	r3, [r7, #32]
 800b40e:	e7fe      	b.n	800b40e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b414:	2b00      	cmp	r3, #0
 800b416:	d009      	beq.n	800b42c <xQueueGiveFromISR+0x44>
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	61fb      	str	r3, [r7, #28]
 800b42a:	e7fe      	b.n	800b42a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d103      	bne.n	800b43c <xQueueGiveFromISR+0x54>
 800b434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <xQueueGiveFromISR+0x58>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e000      	b.n	800b442 <xQueueGiveFromISR+0x5a>
 800b440:	2300      	movs	r3, #0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d109      	bne.n	800b45a <xQueueGiveFromISR+0x72>
 800b446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44a:	f383 8811 	msr	BASEPRI, r3
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	61bb      	str	r3, [r7, #24]
 800b458:	e7fe      	b.n	800b458 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b45a:	f7ff f917 	bl	800a68c <vPortValidateInterruptPriority>
	__asm volatile
 800b45e:	f3ef 8211 	mrs	r2, BASEPRI
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	617a      	str	r2, [r7, #20]
 800b474:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b476:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b486:	429a      	cmp	r2, r3
 800b488:	d22b      	bcs.n	800b4e2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b49c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a4:	d112      	bne.n	800b4cc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d016      	beq.n	800b4dc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	3324      	adds	r3, #36	; 0x24
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f001 f8d0 	bl	800c658 <xTaskRemoveFromEventList>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00e      	beq.n	800b4dc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	e007      	b.n	800b4dc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	b25a      	sxtb	r2, r3
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e0:	e001      	b.n	800b4e6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3738      	adds	r7, #56	; 0x38
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
	...

0800b4fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08c      	sub	sp, #48	; 0x30
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b508:	2300      	movs	r3, #0
 800b50a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <xQueueReceive+0x2e>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	623b      	str	r3, [r7, #32]
 800b528:	e7fe      	b.n	800b528 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d103      	bne.n	800b538 <xQueueReceive+0x3c>
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <xQueueReceive+0x40>
 800b538:	2301      	movs	r3, #1
 800b53a:	e000      	b.n	800b53e <xQueueReceive+0x42>
 800b53c:	2300      	movs	r3, #0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d109      	bne.n	800b556 <xQueueReceive+0x5a>
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	61fb      	str	r3, [r7, #28]
 800b554:	e7fe      	b.n	800b554 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b556:	f001 fa9b 	bl	800ca90 <xTaskGetSchedulerState>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d102      	bne.n	800b566 <xQueueReceive+0x6a>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <xQueueReceive+0x6e>
 800b566:	2301      	movs	r3, #1
 800b568:	e000      	b.n	800b56c <xQueueReceive+0x70>
 800b56a:	2300      	movs	r3, #0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d109      	bne.n	800b584 <xQueueReceive+0x88>
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	61bb      	str	r3, [r7, #24]
 800b582:	e7fe      	b.n	800b582 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b584:	f7fe ffca 	bl	800a51c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	2b00      	cmp	r3, #0
 800b592:	d01f      	beq.n	800b5d4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b594:	68b9      	ldr	r1, [r7, #8]
 800b596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b598:	f000 fab5 	bl	800bb06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	1e5a      	subs	r2, r3, #1
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00f      	beq.n	800b5cc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 f851 	bl	800c658 <xTaskRemoveFromEventList>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d007      	beq.n	800b5cc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b5bc:	4b3c      	ldr	r3, [pc, #240]	; (800b6b0 <xQueueReceive+0x1b4>)
 800b5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5cc:	f7fe ffd4 	bl	800a578 <vPortExitCritical>
				return pdPASS;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e069      	b.n	800b6a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d103      	bne.n	800b5e2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5da:	f7fe ffcd 	bl	800a578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	e062      	b.n	800b6a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d106      	bne.n	800b5f6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5e8:	f107 0310 	add.w	r3, r7, #16
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f001 f897 	bl	800c720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5f6:	f7fe ffbf 	bl	800a578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5fa:	f000 fdb3 	bl	800c164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5fe:	f7fe ff8d 	bl	800a51c <vPortEnterCritical>
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b608:	b25b      	sxtb	r3, r3
 800b60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b60e:	d103      	bne.n	800b618 <xQueueReceive+0x11c>
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b61e:	b25b      	sxtb	r3, r3
 800b620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b624:	d103      	bne.n	800b62e <xQueueReceive+0x132>
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b62e:	f7fe ffa3 	bl	800a578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b632:	1d3a      	adds	r2, r7, #4
 800b634:	f107 0310 	add.w	r3, r7, #16
 800b638:	4611      	mov	r1, r2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 f886 	bl	800c74c <xTaskCheckForTimeOut>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d123      	bne.n	800b68e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b648:	f000 fad5 	bl	800bbf6 <prvIsQueueEmpty>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d017      	beq.n	800b682 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	3324      	adds	r3, #36	; 0x24
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	4611      	mov	r1, r2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 ffae 	bl	800c5bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b662:	f000 fa76 	bl	800bb52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b666:	f000 fdc3 	bl	800c1f0 <xTaskResumeAll>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d189      	bne.n	800b584 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b670:	4b0f      	ldr	r3, [pc, #60]	; (800b6b0 <xQueueReceive+0x1b4>)
 800b672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	e780      	b.n	800b584 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b684:	f000 fa65 	bl	800bb52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b688:	f000 fdb2 	bl	800c1f0 <xTaskResumeAll>
 800b68c:	e77a      	b.n	800b584 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b690:	f000 fa5f 	bl	800bb52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b694:	f000 fdac 	bl	800c1f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b69a:	f000 faac 	bl	800bbf6 <prvIsQueueEmpty>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f43f af6f 	beq.w	800b584 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b6a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3730      	adds	r7, #48	; 0x30
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08e      	sub	sp, #56	; 0x38
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <xQueueSemaphoreTake+0x30>
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	623b      	str	r3, [r7, #32]
 800b6e2:	e7fe      	b.n	800b6e2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d009      	beq.n	800b700 <xQueueSemaphoreTake+0x4c>
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	61fb      	str	r3, [r7, #28]
 800b6fe:	e7fe      	b.n	800b6fe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b700:	f001 f9c6 	bl	800ca90 <xTaskGetSchedulerState>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d102      	bne.n	800b710 <xQueueSemaphoreTake+0x5c>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <xQueueSemaphoreTake+0x60>
 800b710:	2301      	movs	r3, #1
 800b712:	e000      	b.n	800b716 <xQueueSemaphoreTake+0x62>
 800b714:	2300      	movs	r3, #0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d109      	bne.n	800b72e <xQueueSemaphoreTake+0x7a>
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	61bb      	str	r3, [r7, #24]
 800b72c:	e7fe      	b.n	800b72c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b72e:	f7fe fef5 	bl	800a51c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b736:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d024      	beq.n	800b788 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	1e5a      	subs	r2, r3, #1
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b74e:	f001 fb11 	bl	800cd74 <pvTaskIncrementMutexHeldCount>
 800b752:	4602      	mov	r2, r0
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00f      	beq.n	800b780 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	3310      	adds	r3, #16
 800b764:	4618      	mov	r0, r3
 800b766:	f000 ff77 	bl	800c658 <xTaskRemoveFromEventList>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d007      	beq.n	800b780 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b770:	4b53      	ldr	r3, [pc, #332]	; (800b8c0 <xQueueSemaphoreTake+0x20c>)
 800b772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b780:	f7fe fefa 	bl	800a578 <vPortExitCritical>
				return pdPASS;
 800b784:	2301      	movs	r3, #1
 800b786:	e096      	b.n	800b8b6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d110      	bne.n	800b7b0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b790:	2b00      	cmp	r3, #0
 800b792:	d009      	beq.n	800b7a8 <xQueueSemaphoreTake+0xf4>
 800b794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	617b      	str	r3, [r7, #20]
 800b7a6:	e7fe      	b.n	800b7a6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b7a8:	f7fe fee6 	bl	800a578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e082      	b.n	800b8b6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d106      	bne.n	800b7c4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7b6:	f107 030c 	add.w	r3, r7, #12
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 ffb0 	bl	800c720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7c4:	f7fe fed8 	bl	800a578 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7c8:	f000 fccc 	bl	800c164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7cc:	f7fe fea6 	bl	800a51c <vPortEnterCritical>
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7d6:	b25b      	sxtb	r3, r3
 800b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7dc:	d103      	bne.n	800b7e6 <xQueueSemaphoreTake+0x132>
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7ec:	b25b      	sxtb	r3, r3
 800b7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f2:	d103      	bne.n	800b7fc <xQueueSemaphoreTake+0x148>
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7fc:	f7fe febc 	bl	800a578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b800:	463a      	mov	r2, r7
 800b802:	f107 030c 	add.w	r3, r7, #12
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 ff9f 	bl	800c74c <xTaskCheckForTimeOut>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d132      	bne.n	800b87a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b816:	f000 f9ee 	bl	800bbf6 <prvIsQueueEmpty>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d026      	beq.n	800b86e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d109      	bne.n	800b83c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b828:	f7fe fe78 	bl	800a51c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	4618      	mov	r0, r3
 800b832:	f001 f94b 	bl	800cacc <xTaskPriorityInherit>
 800b836:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b838:	f7fe fe9e 	bl	800a578 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83e:	3324      	adds	r3, #36	; 0x24
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	4611      	mov	r1, r2
 800b844:	4618      	mov	r0, r3
 800b846:	f000 feb9 	bl	800c5bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b84a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b84c:	f000 f981 	bl	800bb52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b850:	f000 fcce 	bl	800c1f0 <xTaskResumeAll>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	f47f af69 	bne.w	800b72e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b85c:	4b18      	ldr	r3, [pc, #96]	; (800b8c0 <xQueueSemaphoreTake+0x20c>)
 800b85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	e75f      	b.n	800b72e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b86e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b870:	f000 f96f 	bl	800bb52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b874:	f000 fcbc 	bl	800c1f0 <xTaskResumeAll>
 800b878:	e759      	b.n	800b72e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b87a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b87c:	f000 f969 	bl	800bb52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b880:	f000 fcb6 	bl	800c1f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b886:	f000 f9b6 	bl	800bbf6 <prvIsQueueEmpty>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f43f af4e 	beq.w	800b72e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00d      	beq.n	800b8b4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b898:	f7fe fe40 	bl	800a51c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b89e:	f000 f8b0 	bl	800ba02 <prvGetDisinheritPriorityAfterTimeout>
 800b8a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f001 f9e2 	bl	800cc74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b8b0:	f7fe fe62 	bl	800a578 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3738      	adds	r7, #56	; 0x38
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	e000ed04 	.word	0xe000ed04

0800b8c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08e      	sub	sp, #56	; 0x38
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d109      	bne.n	800b8ee <xQueueReceiveFromISR+0x2a>
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	623b      	str	r3, [r7, #32]
 800b8ec:	e7fe      	b.n	800b8ec <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d103      	bne.n	800b8fc <xQueueReceiveFromISR+0x38>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <xQueueReceiveFromISR+0x3c>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <xQueueReceiveFromISR+0x3e>
 800b900:	2300      	movs	r3, #0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d109      	bne.n	800b91a <xQueueReceiveFromISR+0x56>
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	61fb      	str	r3, [r7, #28]
 800b918:	e7fe      	b.n	800b918 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b91a:	f7fe feb7 	bl	800a68c <vPortValidateInterruptPriority>
	__asm volatile
 800b91e:	f3ef 8211 	mrs	r2, BASEPRI
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	61ba      	str	r2, [r7, #24]
 800b934:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b936:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b938:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	2b00      	cmp	r3, #0
 800b944:	d02f      	beq.n	800b9a6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b950:	68b9      	ldr	r1, [r7, #8]
 800b952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b954:	f000 f8d7 	bl	800bb06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	1e5a      	subs	r2, r3, #1
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b968:	d112      	bne.n	800b990 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d016      	beq.n	800b9a0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	3310      	adds	r3, #16
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fe6e 	bl	800c658 <xTaskRemoveFromEventList>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00e      	beq.n	800b9a0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00b      	beq.n	800b9a0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e007      	b.n	800b9a0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b994:	3301      	adds	r3, #1
 800b996:	b2db      	uxtb	r3, r3
 800b998:	b25a      	sxtb	r2, r3
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9a4:	e001      	b.n	800b9aa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3738      	adds	r7, #56	; 0x38
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d109      	bne.n	800b9e4 <vQueueDelete+0x26>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	60bb      	str	r3, [r7, #8]
 800b9e2:	e7fe      	b.n	800b9e2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 f95d 	bl	800bca4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d102      	bne.n	800b9fa <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7fe ff49 	bl	800a88c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b9fa:	bf00      	nop
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ba02:	b480      	push	{r7}
 800ba04:	b085      	sub	sp, #20
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d006      	beq.n	800ba20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e001      	b.n	800ba24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba20:	2300      	movs	r3, #0
 800ba22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ba24:	68fb      	ldr	r3, [r7, #12]
	}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b086      	sub	sp, #24
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10d      	bne.n	800ba6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d14d      	bne.n	800baf4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f001 f89d 	bl	800cb9c <xTaskPriorityDisinherit>
 800ba62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	609a      	str	r2, [r3, #8]
 800ba6a:	e043      	b.n	800baf4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d119      	bne.n	800baa6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6858      	ldr	r0, [r3, #4]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	68b9      	ldr	r1, [r7, #8]
 800ba7e:	f001 ffad 	bl	800d9dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d32b      	bcc.n	800baf4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	605a      	str	r2, [r3, #4]
 800baa4:	e026      	b.n	800baf4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	68d8      	ldr	r0, [r3, #12]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	461a      	mov	r2, r3
 800bab0:	68b9      	ldr	r1, [r7, #8]
 800bab2:	f001 ff93 	bl	800d9dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	68da      	ldr	r2, [r3, #12]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	425b      	negs	r3, r3
 800bac0:	441a      	add	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	68da      	ldr	r2, [r3, #12]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d207      	bcs.n	800bae2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	689a      	ldr	r2, [r3, #8]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	425b      	negs	r3, r3
 800badc:	441a      	add	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d105      	bne.n	800baf4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bafc:	697b      	ldr	r3, [r7, #20]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b082      	sub	sp, #8
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d018      	beq.n	800bb4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	68da      	ldr	r2, [r3, #12]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb20:	441a      	add	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68da      	ldr	r2, [r3, #12]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d303      	bcc.n	800bb3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68d9      	ldr	r1, [r3, #12]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb42:	461a      	mov	r2, r3
 800bb44:	6838      	ldr	r0, [r7, #0]
 800bb46:	f001 ff49 	bl	800d9dc <memcpy>
	}
}
 800bb4a:	bf00      	nop
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b084      	sub	sp, #16
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb5a:	f7fe fcdf 	bl	800a51c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb66:	e011      	b.n	800bb8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d012      	beq.n	800bb96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3324      	adds	r3, #36	; 0x24
 800bb74:	4618      	mov	r0, r3
 800bb76:	f000 fd6f 	bl	800c658 <xTaskRemoveFromEventList>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb80:	f000 fe44 	bl	800c80c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	dce9      	bgt.n	800bb68 <prvUnlockQueue+0x16>
 800bb94:	e000      	b.n	800bb98 <prvUnlockQueue+0x46>
					break;
 800bb96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	22ff      	movs	r2, #255	; 0xff
 800bb9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bba0:	f7fe fcea 	bl	800a578 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bba4:	f7fe fcba 	bl	800a51c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbb0:	e011      	b.n	800bbd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d012      	beq.n	800bbe0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3310      	adds	r3, #16
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 fd4a 	bl	800c658 <xTaskRemoveFromEventList>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bbca:	f000 fe1f 	bl	800c80c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dce9      	bgt.n	800bbb2 <prvUnlockQueue+0x60>
 800bbde:	e000      	b.n	800bbe2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bbe0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bbea:	f7fe fcc5 	bl	800a578 <vPortExitCritical>
}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbfe:	f7fe fc8d 	bl	800a51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	e001      	b.n	800bc14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc10:	2300      	movs	r3, #0
 800bc12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc14:	f7fe fcb0 	bl	800a578 <vPortExitCritical>

	return xReturn;
 800bc18:	68fb      	ldr	r3, [r7, #12]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b084      	sub	sp, #16
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc2a:	f7fe fc77 	bl	800a51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d102      	bne.n	800bc40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	e001      	b.n	800bc44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc40:	2300      	movs	r3, #0
 800bc42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc44:	f7fe fc98 	bl	800a578 <vPortExitCritical>

	return xReturn;
 800bc48:	68fb      	ldr	r3, [r7, #12]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	e014      	b.n	800bc8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc64:	4a0e      	ldr	r2, [pc, #56]	; (800bca0 <vQueueAddToRegistry+0x4c>)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10b      	bne.n	800bc88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc70:	490b      	ldr	r1, [pc, #44]	; (800bca0 <vQueueAddToRegistry+0x4c>)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc7a:	4a09      	ldr	r2, [pc, #36]	; (800bca0 <vQueueAddToRegistry+0x4c>)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	4413      	add	r3, r2
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc86:	e005      	b.n	800bc94 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b07      	cmp	r3, #7
 800bc92:	d9e7      	bls.n	800bc64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc94:	bf00      	nop
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	20002b60 	.word	0x20002b60

0800bca4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcac:	2300      	movs	r3, #0
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	e016      	b.n	800bce0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bcb2:	4a10      	ldr	r2, [pc, #64]	; (800bcf4 <vQueueUnregisterQueue+0x50>)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	4413      	add	r3, r2
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d10b      	bne.n	800bcda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bcc2:	4a0c      	ldr	r2, [pc, #48]	; (800bcf4 <vQueueUnregisterQueue+0x50>)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bccc:	4a09      	ldr	r2, [pc, #36]	; (800bcf4 <vQueueUnregisterQueue+0x50>)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	00db      	lsls	r3, r3, #3
 800bcd2:	4413      	add	r3, r2
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	605a      	str	r2, [r3, #4]
				break;
 800bcd8:	e005      	b.n	800bce6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	60fb      	str	r3, [r7, #12]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b07      	cmp	r3, #7
 800bce4:	d9e5      	bls.n	800bcb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20002b60 	.word	0x20002b60

0800bcf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd08:	f7fe fc08 	bl	800a51c <vPortEnterCritical>
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd12:	b25b      	sxtb	r3, r3
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d103      	bne.n	800bd22 <vQueueWaitForMessageRestricted+0x2a>
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd28:	b25b      	sxtb	r3, r3
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2e:	d103      	bne.n	800bd38 <vQueueWaitForMessageRestricted+0x40>
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd38:	f7fe fc1e 	bl	800a578 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d106      	bne.n	800bd52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	3324      	adds	r3, #36	; 0x24
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 fc59 	bl	800c604 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd52:	6978      	ldr	r0, [r7, #20]
 800bd54:	f7ff fefd 	bl	800bb52 <prvUnlockQueue>
	}
 800bd58:	bf00      	nop
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08e      	sub	sp, #56	; 0x38
 800bd64:	af04      	add	r7, sp, #16
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
 800bd6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d109      	bne.n	800bd88 <xTaskCreateStatic+0x28>
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	623b      	str	r3, [r7, #32]
 800bd86:	e7fe      	b.n	800bd86 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <xTaskCreateStatic+0x42>
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	61fb      	str	r3, [r7, #28]
 800bda0:	e7fe      	b.n	800bda0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bda2:	235c      	movs	r3, #92	; 0x5c
 800bda4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdaa:	d009      	beq.n	800bdc0 <xTaskCreateStatic+0x60>
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	61bb      	str	r3, [r7, #24]
 800bdbe:	e7fe      	b.n	800bdbe <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bdc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01e      	beq.n	800be06 <xTaskCreateStatic+0xa6>
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d01b      	beq.n	800be06 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	2202      	movs	r2, #2
 800bddc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bde0:	2300      	movs	r3, #0
 800bde2:	9303      	str	r3, [sp, #12]
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	9302      	str	r3, [sp, #8]
 800bde8:	f107 0314 	add.w	r3, r7, #20
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 f850 	bl	800be9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be00:	f000 f8dc 	bl	800bfbc <prvAddNewTaskToReadyList>
 800be04:	e001      	b.n	800be0a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be0a:	697b      	ldr	r3, [r7, #20]
	}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3728      	adds	r7, #40	; 0x28
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08c      	sub	sp, #48	; 0x30
 800be18:	af04      	add	r7, sp, #16
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	4613      	mov	r3, r2
 800be22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be24:	88fb      	ldrh	r3, [r7, #6]
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fc6d 	bl	800a708 <pvPortMalloc>
 800be2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00e      	beq.n	800be54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be36:	205c      	movs	r0, #92	; 0x5c
 800be38:	f7fe fc66 	bl	800a708 <pvPortMalloc>
 800be3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	631a      	str	r2, [r3, #48]	; 0x30
 800be4a:	e005      	b.n	800be58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be4c:	6978      	ldr	r0, [r7, #20]
 800be4e:	f7fe fd1d 	bl	800a88c <vPortFree>
 800be52:	e001      	b.n	800be58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be54:	2300      	movs	r3, #0
 800be56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d017      	beq.n	800be8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be66:	88fa      	ldrh	r2, [r7, #6]
 800be68:	2300      	movs	r3, #0
 800be6a:	9303      	str	r3, [sp, #12]
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	9302      	str	r3, [sp, #8]
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f80e 	bl	800be9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be82:	69f8      	ldr	r0, [r7, #28]
 800be84:	f000 f89a 	bl	800bfbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be88:	2301      	movs	r3, #1
 800be8a:	61bb      	str	r3, [r7, #24]
 800be8c:	e002      	b.n	800be94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be8e:	f04f 33ff 	mov.w	r3, #4294967295
 800be92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be94:	69bb      	ldr	r3, [r7, #24]
	}
 800be96:	4618      	mov	r0, r3
 800be98:	3720      	adds	r7, #32
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b088      	sub	sp, #32
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	60f8      	str	r0, [r7, #12]
 800bea6:	60b9      	str	r1, [r7, #8]
 800bea8:	607a      	str	r2, [r7, #4]
 800beaa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	461a      	mov	r2, r3
 800beb6:	21a5      	movs	r1, #165	; 0xa5
 800beb8:	f001 fd9b 	bl	800d9f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bec6:	3b01      	subs	r3, #1
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	f023 0307 	bic.w	r3, r3, #7
 800bed4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f003 0307 	and.w	r3, r3, #7
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d009      	beq.n	800bef4 <prvInitialiseNewTask+0x56>
 800bee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	e7fe      	b.n	800bef2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d01f      	beq.n	800bf3a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800befa:	2300      	movs	r3, #0
 800befc:	61fb      	str	r3, [r7, #28]
 800befe:	e012      	b.n	800bf26 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	4413      	add	r3, r2
 800bf06:	7819      	ldrb	r1, [r3, #0]
 800bf08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	3334      	adds	r3, #52	; 0x34
 800bf10:	460a      	mov	r2, r1
 800bf12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	4413      	add	r3, r2
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d006      	beq.n	800bf2e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	3301      	adds	r3, #1
 800bf24:	61fb      	str	r3, [r7, #28]
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	2b0f      	cmp	r3, #15
 800bf2a:	d9e9      	bls.n	800bf00 <prvInitialiseNewTask+0x62>
 800bf2c:	e000      	b.n	800bf30 <prvInitialiseNewTask+0x92>
			{
				break;
 800bf2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf38:	e003      	b.n	800bf42 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	2b37      	cmp	r3, #55	; 0x37
 800bf46:	d901      	bls.n	800bf4c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf48:	2337      	movs	r3, #55	; 0x37
 800bf4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	3304      	adds	r3, #4
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe fdc6 	bl	800aaf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	3318      	adds	r3, #24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fe fdc1 	bl	800aaf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	68f9      	ldr	r1, [r7, #12]
 800bf9a:	69b8      	ldr	r0, [r7, #24]
 800bf9c:	f7fe f994 	bl	800a2c8 <pxPortInitialiseStack>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfb2:	bf00      	nop
 800bfb4:	3720      	adds	r7, #32
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfc4:	f7fe faaa 	bl	800a51c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfc8:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <prvAddNewTaskToReadyList+0xc4>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	4a2c      	ldr	r2, [pc, #176]	; (800c080 <prvAddNewTaskToReadyList+0xc4>)
 800bfd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfd2:	4b2c      	ldr	r3, [pc, #176]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d109      	bne.n	800bfee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfda:	4a2a      	ldr	r2, [pc, #168]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bfe0:	4b27      	ldr	r3, [pc, #156]	; (800c080 <prvAddNewTaskToReadyList+0xc4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d110      	bne.n	800c00a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bfe8:	f000 fc88 	bl	800c8fc <prvInitialiseTaskLists>
 800bfec:	e00d      	b.n	800c00a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bfee:	4b26      	ldr	r3, [pc, #152]	; (800c088 <prvAddNewTaskToReadyList+0xcc>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d109      	bne.n	800c00a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bff6:	4b23      	ldr	r3, [pc, #140]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c000:	429a      	cmp	r2, r3
 800c002:	d802      	bhi.n	800c00a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c004:	4a1f      	ldr	r2, [pc, #124]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c00a:	4b20      	ldr	r3, [pc, #128]	; (800c08c <prvAddNewTaskToReadyList+0xd0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3301      	adds	r3, #1
 800c010:	4a1e      	ldr	r2, [pc, #120]	; (800c08c <prvAddNewTaskToReadyList+0xd0>)
 800c012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c014:	4b1d      	ldr	r3, [pc, #116]	; (800c08c <prvAddNewTaskToReadyList+0xd0>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c020:	4b1b      	ldr	r3, [pc, #108]	; (800c090 <prvAddNewTaskToReadyList+0xd4>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d903      	bls.n	800c030 <prvAddNewTaskToReadyList+0x74>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02c:	4a18      	ldr	r2, [pc, #96]	; (800c090 <prvAddNewTaskToReadyList+0xd4>)
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c034:	4613      	mov	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4a15      	ldr	r2, [pc, #84]	; (800c094 <prvAddNewTaskToReadyList+0xd8>)
 800c03e:	441a      	add	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3304      	adds	r3, #4
 800c044:	4619      	mov	r1, r3
 800c046:	4610      	mov	r0, r2
 800c048:	f7fe fd61 	bl	800ab0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c04c:	f7fe fa94 	bl	800a578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c050:	4b0d      	ldr	r3, [pc, #52]	; (800c088 <prvAddNewTaskToReadyList+0xcc>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00e      	beq.n	800c076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	429a      	cmp	r2, r3
 800c064:	d207      	bcs.n	800c076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c066:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <prvAddNewTaskToReadyList+0xdc>)
 800c068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	2000277c 	.word	0x2000277c
 800c084:	200022a8 	.word	0x200022a8
 800c088:	20002788 	.word	0x20002788
 800c08c:	20002798 	.word	0x20002798
 800c090:	20002784 	.word	0x20002784
 800c094:	200022ac 	.word	0x200022ac
 800c098:	e000ed04 	.word	0xe000ed04

0800c09c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08a      	sub	sp, #40	; 0x28
 800c0a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0aa:	463a      	mov	r2, r7
 800c0ac:	1d39      	adds	r1, r7, #4
 800c0ae:	f107 0308 	add.w	r3, r7, #8
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe f8d4 	bl	800a260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	9202      	str	r2, [sp, #8]
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	460a      	mov	r2, r1
 800c0ca:	4920      	ldr	r1, [pc, #128]	; (800c14c <vTaskStartScheduler+0xb0>)
 800c0cc:	4820      	ldr	r0, [pc, #128]	; (800c150 <vTaskStartScheduler+0xb4>)
 800c0ce:	f7ff fe47 	bl	800bd60 <xTaskCreateStatic>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	4b1f      	ldr	r3, [pc, #124]	; (800c154 <vTaskStartScheduler+0xb8>)
 800c0d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c0d8:	4b1e      	ldr	r3, [pc, #120]	; (800c154 <vTaskStartScheduler+0xb8>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	e001      	b.n	800c0ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d102      	bne.n	800c0f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c0f0:	f001 f890 	bl	800d214 <xTimerCreateTimerTask>
 800c0f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d115      	bne.n	800c128 <vTaskStartScheduler+0x8c>
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c10e:	4b12      	ldr	r3, [pc, #72]	; (800c158 <vTaskStartScheduler+0xbc>)
 800c110:	f04f 32ff 	mov.w	r2, #4294967295
 800c114:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c116:	4b11      	ldr	r3, [pc, #68]	; (800c15c <vTaskStartScheduler+0xc0>)
 800c118:	2201      	movs	r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c11c:	4b10      	ldr	r3, [pc, #64]	; (800c160 <vTaskStartScheduler+0xc4>)
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c122:	f7fe f95d 	bl	800a3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c126:	e00d      	b.n	800c144 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12e:	d109      	bne.n	800c144 <vTaskStartScheduler+0xa8>
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	e7fe      	b.n	800c142 <vTaskStartScheduler+0xa6>
}
 800c144:	bf00      	nop
 800c146:	3718      	adds	r7, #24
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	08010750 	.word	0x08010750
 800c150:	0800c825 	.word	0x0800c825
 800c154:	200027a0 	.word	0x200027a0
 800c158:	2000279c 	.word	0x2000279c
 800c15c:	20002788 	.word	0x20002788
 800c160:	20002780 	.word	0x20002780

0800c164 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c164:	b480      	push	{r7}
 800c166:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c168:	4b04      	ldr	r3, [pc, #16]	; (800c17c <vTaskSuspendAll+0x18>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3301      	adds	r3, #1
 800c16e:	4a03      	ldr	r2, [pc, #12]	; (800c17c <vTaskSuspendAll+0x18>)
 800c170:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c172:	bf00      	nop
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	200027a4 	.word	0x200027a4

0800c180 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800c186:	2300      	movs	r3, #0
 800c188:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800c18a:	4b14      	ldr	r3, [pc, #80]	; (800c1dc <prvGetExpectedIdleTime+0x5c>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d001      	beq.n	800c196 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800c192:	2301      	movs	r3, #1
 800c194:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800c196:	4b12      	ldr	r3, [pc, #72]	; (800c1e0 <prvGetExpectedIdleTime+0x60>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	607b      	str	r3, [r7, #4]
 800c1a4:	e012      	b.n	800c1cc <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800c1a6:	4b0f      	ldr	r3, [pc, #60]	; (800c1e4 <prvGetExpectedIdleTime+0x64>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d902      	bls.n	800c1b4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	607b      	str	r3, [r7, #4]
 800c1b2:	e00b      	b.n	800c1cc <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	607b      	str	r3, [r7, #4]
 800c1be:	e005      	b.n	800c1cc <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800c1c0:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <prvGetExpectedIdleTime+0x68>)
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <prvGetExpectedIdleTime+0x6c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800c1cc:	687b      	ldr	r3, [r7, #4]
	}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	20002784 	.word	0x20002784
 800c1e0:	200022a8 	.word	0x200022a8
 800c1e4:	200022ac 	.word	0x200022ac
 800c1e8:	2000279c 	.word	0x2000279c
 800c1ec:	20002780 	.word	0x20002780

0800c1f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1fe:	4b41      	ldr	r3, [pc, #260]	; (800c304 <xTaskResumeAll+0x114>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <xTaskResumeAll+0x2a>
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	e7fe      	b.n	800c218 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c21a:	f7fe f97f 	bl	800a51c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c21e:	4b39      	ldr	r3, [pc, #228]	; (800c304 <xTaskResumeAll+0x114>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3b01      	subs	r3, #1
 800c224:	4a37      	ldr	r2, [pc, #220]	; (800c304 <xTaskResumeAll+0x114>)
 800c226:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c228:	4b36      	ldr	r3, [pc, #216]	; (800c304 <xTaskResumeAll+0x114>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d162      	bne.n	800c2f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c230:	4b35      	ldr	r3, [pc, #212]	; (800c308 <xTaskResumeAll+0x118>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d05e      	beq.n	800c2f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c238:	e02f      	b.n	800c29a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c23a:	4b34      	ldr	r3, [pc, #208]	; (800c30c <xTaskResumeAll+0x11c>)
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	3318      	adds	r3, #24
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fcbe 	bl	800abc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3304      	adds	r3, #4
 800c250:	4618      	mov	r0, r3
 800c252:	f7fe fcb9 	bl	800abc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25a:	4b2d      	ldr	r3, [pc, #180]	; (800c310 <xTaskResumeAll+0x120>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d903      	bls.n	800c26a <xTaskResumeAll+0x7a>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c266:	4a2a      	ldr	r2, [pc, #168]	; (800c310 <xTaskResumeAll+0x120>)
 800c268:	6013      	str	r3, [r2, #0]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26e:	4613      	mov	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	4a27      	ldr	r2, [pc, #156]	; (800c314 <xTaskResumeAll+0x124>)
 800c278:	441a      	add	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	4610      	mov	r0, r2
 800c282:	f7fe fc44 	bl	800ab0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <xTaskResumeAll+0x128>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c290:	429a      	cmp	r2, r3
 800c292:	d302      	bcc.n	800c29a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c294:	4b21      	ldr	r3, [pc, #132]	; (800c31c <xTaskResumeAll+0x12c>)
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c29a:	4b1c      	ldr	r3, [pc, #112]	; (800c30c <xTaskResumeAll+0x11c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1cb      	bne.n	800c23a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2a8:	f000 fbc2 	bl	800ca30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c2ac:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <xTaskResumeAll+0x130>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d010      	beq.n	800c2da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2b8:	f000 f86c 	bl	800c394 <xTaskIncrementTick>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c2c2:	4b16      	ldr	r3, [pc, #88]	; (800c31c <xTaskResumeAll+0x12c>)
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1f1      	bne.n	800c2b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c2d4:	4b12      	ldr	r3, [pc, #72]	; (800c320 <xTaskResumeAll+0x130>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2da:	4b10      	ldr	r3, [pc, #64]	; (800c31c <xTaskResumeAll+0x12c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d009      	beq.n	800c2f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <xTaskResumeAll+0x134>)
 800c2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2f6:	f7fe f93f 	bl	800a578 <vPortExitCritical>

	return xAlreadyYielded;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	200027a4 	.word	0x200027a4
 800c308:	2000277c 	.word	0x2000277c
 800c30c:	2000273c 	.word	0x2000273c
 800c310:	20002784 	.word	0x20002784
 800c314:	200022ac 	.word	0x200022ac
 800c318:	200022a8 	.word	0x200022a8
 800c31c:	20002790 	.word	0x20002790
 800c320:	2000278c 	.word	0x2000278c
 800c324:	e000ed04 	.word	0xe000ed04

0800c328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c32e:	4b05      	ldr	r3, [pc, #20]	; (800c344 <xTaskGetTickCount+0x1c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c334:	687b      	ldr	r3, [r7, #4]
}
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	20002780 	.word	0x20002780

0800c348 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800c350:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <vTaskStepTick+0x44>)
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	441a      	add	r2, r3
 800c358:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <vTaskStepTick+0x48>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d909      	bls.n	800c374 <vTaskStepTick+0x2c>
 800c360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e7fe      	b.n	800c372 <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 800c374:	4b05      	ldr	r3, [pc, #20]	; (800c38c <vTaskStepTick+0x44>)
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4413      	add	r3, r2
 800c37c:	4a03      	ldr	r2, [pc, #12]	; (800c38c <vTaskStepTick+0x44>)
 800c37e:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800c380:	bf00      	nop
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	20002780 	.word	0x20002780
 800c390:	2000279c 	.word	0x2000279c

0800c394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c39a:	2300      	movs	r3, #0
 800c39c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c39e:	4b4e      	ldr	r3, [pc, #312]	; (800c4d8 <xTaskIncrementTick+0x144>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 8088 	bne.w	800c4b8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3a8:	4b4c      	ldr	r3, [pc, #304]	; (800c4dc <xTaskIncrementTick+0x148>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3b0:	4a4a      	ldr	r2, [pc, #296]	; (800c4dc <xTaskIncrementTick+0x148>)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d11f      	bne.n	800c3fc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3bc:	4b48      	ldr	r3, [pc, #288]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d009      	beq.n	800c3da <xTaskIncrementTick+0x46>
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	e7fe      	b.n	800c3d8 <xTaskIncrementTick+0x44>
 800c3da:	4b41      	ldr	r3, [pc, #260]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	4b40      	ldr	r3, [pc, #256]	; (800c4e4 <xTaskIncrementTick+0x150>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a3e      	ldr	r2, [pc, #248]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	4a3e      	ldr	r2, [pc, #248]	; (800c4e4 <xTaskIncrementTick+0x150>)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	4b3e      	ldr	r3, [pc, #248]	; (800c4e8 <xTaskIncrementTick+0x154>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a3c      	ldr	r2, [pc, #240]	; (800c4e8 <xTaskIncrementTick+0x154>)
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	f000 fb1a 	bl	800ca30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3fc:	4b3b      	ldr	r3, [pc, #236]	; (800c4ec <xTaskIncrementTick+0x158>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	429a      	cmp	r2, r3
 800c404:	d349      	bcc.n	800c49a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c406:	4b36      	ldr	r3, [pc, #216]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d104      	bne.n	800c41a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c410:	4b36      	ldr	r3, [pc, #216]	; (800c4ec <xTaskIncrementTick+0x158>)
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	601a      	str	r2, [r3, #0]
					break;
 800c418:	e03f      	b.n	800c49a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c41a:	4b31      	ldr	r3, [pc, #196]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d203      	bcs.n	800c43a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c432:	4a2e      	ldr	r2, [pc, #184]	; (800c4ec <xTaskIncrementTick+0x158>)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c438:	e02f      	b.n	800c49a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe fbc2 	bl	800abc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	3318      	adds	r3, #24
 800c450:	4618      	mov	r0, r3
 800c452:	f7fe fbb9 	bl	800abc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45a:	4b25      	ldr	r3, [pc, #148]	; (800c4f0 <xTaskIncrementTick+0x15c>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d903      	bls.n	800c46a <xTaskIncrementTick+0xd6>
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	4a22      	ldr	r2, [pc, #136]	; (800c4f0 <xTaskIncrementTick+0x15c>)
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46e:	4613      	mov	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4a1f      	ldr	r2, [pc, #124]	; (800c4f4 <xTaskIncrementTick+0x160>)
 800c478:	441a      	add	r2, r3
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	3304      	adds	r3, #4
 800c47e:	4619      	mov	r1, r3
 800c480:	4610      	mov	r0, r2
 800c482:	f7fe fb44 	bl	800ab0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48a:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <xTaskIncrementTick+0x164>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c490:	429a      	cmp	r2, r3
 800c492:	d3b8      	bcc.n	800c406 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c494:	2301      	movs	r3, #1
 800c496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c498:	e7b5      	b.n	800c406 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c49a:	4b17      	ldr	r3, [pc, #92]	; (800c4f8 <xTaskIncrementTick+0x164>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a0:	4914      	ldr	r1, [pc, #80]	; (800c4f4 <xTaskIncrementTick+0x160>)
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	440b      	add	r3, r1
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d907      	bls.n	800c4c2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	e004      	b.n	800c4c2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c4b8:	4b10      	ldr	r3, [pc, #64]	; (800c4fc <xTaskIncrementTick+0x168>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	4a0f      	ldr	r2, [pc, #60]	; (800c4fc <xTaskIncrementTick+0x168>)
 800c4c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c4c2:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <xTaskIncrementTick+0x16c>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c4ce:	697b      	ldr	r3, [r7, #20]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3718      	adds	r7, #24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	200027a4 	.word	0x200027a4
 800c4dc:	20002780 	.word	0x20002780
 800c4e0:	20002734 	.word	0x20002734
 800c4e4:	20002738 	.word	0x20002738
 800c4e8:	20002794 	.word	0x20002794
 800c4ec:	2000279c 	.word	0x2000279c
 800c4f0:	20002784 	.word	0x20002784
 800c4f4:	200022ac 	.word	0x200022ac
 800c4f8:	200022a8 	.word	0x200022a8
 800c4fc:	2000278c 	.word	0x2000278c
 800c500:	20002790 	.word	0x20002790

0800c504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c50a:	4b27      	ldr	r3, [pc, #156]	; (800c5a8 <vTaskSwitchContext+0xa4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c512:	4b26      	ldr	r3, [pc, #152]	; (800c5ac <vTaskSwitchContext+0xa8>)
 800c514:	2201      	movs	r2, #1
 800c516:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c518:	e040      	b.n	800c59c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c51a:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <vTaskSwitchContext+0xa8>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c520:	4b23      	ldr	r3, [pc, #140]	; (800c5b0 <vTaskSwitchContext+0xac>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e00f      	b.n	800c548 <vTaskSwitchContext+0x44>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d109      	bne.n	800c542 <vTaskSwitchContext+0x3e>
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	607b      	str	r3, [r7, #4]
 800c540:	e7fe      	b.n	800c540 <vTaskSwitchContext+0x3c>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3b01      	subs	r3, #1
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	491a      	ldr	r1, [pc, #104]	; (800c5b4 <vTaskSwitchContext+0xb0>)
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	4613      	mov	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	440b      	add	r3, r1
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0e5      	beq.n	800c528 <vTaskSwitchContext+0x24>
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	4613      	mov	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4413      	add	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4a13      	ldr	r2, [pc, #76]	; (800c5b4 <vTaskSwitchContext+0xb0>)
 800c568:	4413      	add	r3, r2
 800c56a:	60bb      	str	r3, [r7, #8]
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	605a      	str	r2, [r3, #4]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	685a      	ldr	r2, [r3, #4]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	3308      	adds	r3, #8
 800c57e:	429a      	cmp	r2, r3
 800c580:	d104      	bne.n	800c58c <vTaskSwitchContext+0x88>
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	605a      	str	r2, [r3, #4]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	4a09      	ldr	r2, [pc, #36]	; (800c5b8 <vTaskSwitchContext+0xb4>)
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	4a06      	ldr	r2, [pc, #24]	; (800c5b0 <vTaskSwitchContext+0xac>)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6013      	str	r3, [r2, #0]
}
 800c59c:	bf00      	nop
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	200027a4 	.word	0x200027a4
 800c5ac:	20002790 	.word	0x20002790
 800c5b0:	20002784 	.word	0x20002784
 800c5b4:	200022ac 	.word	0x200022ac
 800c5b8:	200022a8 	.word	0x200022a8

0800c5bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d109      	bne.n	800c5e0 <vTaskPlaceOnEventList+0x24>
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	60fb      	str	r3, [r7, #12]
 800c5de:	e7fe      	b.n	800c5de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5e0:	4b07      	ldr	r3, [pc, #28]	; (800c600 <vTaskPlaceOnEventList+0x44>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3318      	adds	r3, #24
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7fe fab4 	bl	800ab56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	6838      	ldr	r0, [r7, #0]
 800c5f2:	f000 fdbb 	bl	800d16c <prvAddCurrentTaskToDelayedList>
}
 800c5f6:	bf00      	nop
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	200022a8 	.word	0x200022a8

0800c604 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d109      	bne.n	800c62a <vTaskPlaceOnEventListRestricted+0x26>
 800c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e7fe      	b.n	800c628 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c62a:	4b0a      	ldr	r3, [pc, #40]	; (800c654 <vTaskPlaceOnEventListRestricted+0x50>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3318      	adds	r3, #24
 800c630:	4619      	mov	r1, r3
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7fe fa6b 	bl	800ab0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c63e:	f04f 33ff 	mov.w	r3, #4294967295
 800c642:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	68b8      	ldr	r0, [r7, #8]
 800c648:	f000 fd90 	bl	800d16c <prvAddCurrentTaskToDelayedList>
	}
 800c64c:	bf00      	nop
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	200022a8 	.word	0x200022a8

0800c658 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d109      	bne.n	800c682 <xTaskRemoveFromEventList+0x2a>
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	60fb      	str	r3, [r7, #12]
 800c680:	e7fe      	b.n	800c680 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	3318      	adds	r3, #24
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe fa9e 	bl	800abc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c68c:	4b1e      	ldr	r3, [pc, #120]	; (800c708 <xTaskRemoveFromEventList+0xb0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d11f      	bne.n	800c6d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	3304      	adds	r3, #4
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fe fa95 	bl	800abc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a2:	4b1a      	ldr	r3, [pc, #104]	; (800c70c <xTaskRemoveFromEventList+0xb4>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d903      	bls.n	800c6b2 <xTaskRemoveFromEventList+0x5a>
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	4a17      	ldr	r2, [pc, #92]	; (800c70c <xTaskRemoveFromEventList+0xb4>)
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4a14      	ldr	r2, [pc, #80]	; (800c710 <xTaskRemoveFromEventList+0xb8>)
 800c6c0:	441a      	add	r2, r3
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	f7fe fa20 	bl	800ab0e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800c6ce:	f000 f9af 	bl	800ca30 <prvResetNextTaskUnblockTime>
 800c6d2:	e005      	b.n	800c6e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	3318      	adds	r3, #24
 800c6d8:	4619      	mov	r1, r3
 800c6da:	480e      	ldr	r0, [pc, #56]	; (800c714 <xTaskRemoveFromEventList+0xbc>)
 800c6dc:	f7fe fa17 	bl	800ab0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <xTaskRemoveFromEventList+0xc0>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d905      	bls.n	800c6fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c6f2:	4b0a      	ldr	r3, [pc, #40]	; (800c71c <xTaskRemoveFromEventList+0xc4>)
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	e001      	b.n	800c6fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c6fe:	697b      	ldr	r3, [r7, #20]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	200027a4 	.word	0x200027a4
 800c70c:	20002784 	.word	0x20002784
 800c710:	200022ac 	.word	0x200022ac
 800c714:	2000273c 	.word	0x2000273c
 800c718:	200022a8 	.word	0x200022a8
 800c71c:	20002790 	.word	0x20002790

0800c720 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c728:	4b06      	ldr	r3, [pc, #24]	; (800c744 <vTaskInternalSetTimeOutState+0x24>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <vTaskInternalSetTimeOutState+0x28>)
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	605a      	str	r2, [r3, #4]
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr
 800c744:	20002794 	.word	0x20002794
 800c748:	20002780 	.word	0x20002780

0800c74c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b088      	sub	sp, #32
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d109      	bne.n	800c770 <xTaskCheckForTimeOut+0x24>
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	613b      	str	r3, [r7, #16]
 800c76e:	e7fe      	b.n	800c76e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d109      	bne.n	800c78a <xTaskCheckForTimeOut+0x3e>
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	e7fe      	b.n	800c788 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c78a:	f7fd fec7 	bl	800a51c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c78e:	4b1d      	ldr	r3, [pc, #116]	; (800c804 <xTaskCheckForTimeOut+0xb8>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a6:	d102      	bne.n	800c7ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	61fb      	str	r3, [r7, #28]
 800c7ac:	e023      	b.n	800c7f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4b15      	ldr	r3, [pc, #84]	; (800c808 <xTaskCheckForTimeOut+0xbc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d007      	beq.n	800c7ca <xTaskCheckForTimeOut+0x7e>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	69ba      	ldr	r2, [r7, #24]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d302      	bcc.n	800c7ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	61fb      	str	r3, [r7, #28]
 800c7c8:	e015      	b.n	800c7f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d20b      	bcs.n	800c7ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	1ad2      	subs	r2, r2, r3
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff ff9d 	bl	800c720 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61fb      	str	r3, [r7, #28]
 800c7ea:	e004      	b.n	800c7f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c7f6:	f7fd febf 	bl	800a578 <vPortExitCritical>

	return xReturn;
 800c7fa:	69fb      	ldr	r3, [r7, #28]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3720      	adds	r7, #32
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	20002780 	.word	0x20002780
 800c808:	20002794 	.word	0x20002794

0800c80c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c810:	4b03      	ldr	r3, [pc, #12]	; (800c820 <vTaskMissedYield+0x14>)
 800c812:	2201      	movs	r2, #1
 800c814:	601a      	str	r2, [r3, #0]
}
 800c816:	bf00      	nop
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr
 800c820:	20002790 	.word	0x20002790

0800c824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c82c:	f000 f8a6 	bl	800c97c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c830:	4b17      	ldr	r3, [pc, #92]	; (800c890 <prvIdleTask+0x6c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d907      	bls.n	800c848 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c838:	4b16      	ldr	r3, [pc, #88]	; (800c894 <prvIdleTask+0x70>)
 800c83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800c848:	f7ff fc9a 	bl	800c180 <prvGetExpectedIdleTime>
 800c84c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d9eb      	bls.n	800c82c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800c854:	f7ff fc86 	bl	800c164 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800c858:	4b0f      	ldr	r3, [pc, #60]	; (800c898 <prvIdleTask+0x74>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	4b0f      	ldr	r3, [pc, #60]	; (800c89c <prvIdleTask+0x78>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d209      	bcs.n	800c878 <prvIdleTask+0x54>
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	60bb      	str	r3, [r7, #8]
 800c876:	e7fe      	b.n	800c876 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800c878:	f7ff fc82 	bl	800c180 <prvGetExpectedIdleTime>
 800c87c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b01      	cmp	r3, #1
 800c882:	d902      	bls.n	800c88a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f7f5 febb 	bl	8002600 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800c88a:	f7ff fcb1 	bl	800c1f0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800c88e:	e7cd      	b.n	800c82c <prvIdleTask+0x8>
 800c890:	200022ac 	.word	0x200022ac
 800c894:	e000ed04 	.word	0xe000ed04
 800c898:	2000279c 	.word	0x2000279c
 800c89c:	20002780 	.word	0x20002780

0800c8a0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800c8ae:	4b0f      	ldr	r3, [pc, #60]	; (800c8ec <eTaskConfirmSleepModeStatus+0x4c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	71fb      	strb	r3, [r7, #7]
 800c8ba:	e010      	b.n	800c8de <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <eTaskConfirmSleepModeStatus+0x50>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	71fb      	strb	r3, [r7, #7]
 800c8c8:	e009      	b.n	800c8de <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800c8ca:	4b0a      	ldr	r3, [pc, #40]	; (800c8f4 <eTaskConfirmSleepModeStatus+0x54>)
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <eTaskConfirmSleepModeStatus+0x58>)
 800c8d0:	6819      	ldr	r1, [r3, #0]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	1acb      	subs	r3, r1, r3
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d101      	bne.n	800c8de <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800c8da:	2302      	movs	r3, #2
 800c8dc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800c8de:	79fb      	ldrb	r3, [r7, #7]
	}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	2000273c 	.word	0x2000273c
 800c8f0:	20002790 	.word	0x20002790
 800c8f4:	20002768 	.word	0x20002768
 800c8f8:	2000277c 	.word	0x2000277c

0800c8fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c902:	2300      	movs	r3, #0
 800c904:	607b      	str	r3, [r7, #4]
 800c906:	e00c      	b.n	800c922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4a12      	ldr	r2, [pc, #72]	; (800c95c <prvInitialiseTaskLists+0x60>)
 800c914:	4413      	add	r3, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe f8cc 	bl	800aab4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3301      	adds	r3, #1
 800c920:	607b      	str	r3, [r7, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b37      	cmp	r3, #55	; 0x37
 800c926:	d9ef      	bls.n	800c908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c928:	480d      	ldr	r0, [pc, #52]	; (800c960 <prvInitialiseTaskLists+0x64>)
 800c92a:	f7fe f8c3 	bl	800aab4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c92e:	480d      	ldr	r0, [pc, #52]	; (800c964 <prvInitialiseTaskLists+0x68>)
 800c930:	f7fe f8c0 	bl	800aab4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c934:	480c      	ldr	r0, [pc, #48]	; (800c968 <prvInitialiseTaskLists+0x6c>)
 800c936:	f7fe f8bd 	bl	800aab4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c93a:	480c      	ldr	r0, [pc, #48]	; (800c96c <prvInitialiseTaskLists+0x70>)
 800c93c:	f7fe f8ba 	bl	800aab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c940:	480b      	ldr	r0, [pc, #44]	; (800c970 <prvInitialiseTaskLists+0x74>)
 800c942:	f7fe f8b7 	bl	800aab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c946:	4b0b      	ldr	r3, [pc, #44]	; (800c974 <prvInitialiseTaskLists+0x78>)
 800c948:	4a05      	ldr	r2, [pc, #20]	; (800c960 <prvInitialiseTaskLists+0x64>)
 800c94a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c94c:	4b0a      	ldr	r3, [pc, #40]	; (800c978 <prvInitialiseTaskLists+0x7c>)
 800c94e:	4a05      	ldr	r2, [pc, #20]	; (800c964 <prvInitialiseTaskLists+0x68>)
 800c950:	601a      	str	r2, [r3, #0]
}
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200022ac 	.word	0x200022ac
 800c960:	2000270c 	.word	0x2000270c
 800c964:	20002720 	.word	0x20002720
 800c968:	2000273c 	.word	0x2000273c
 800c96c:	20002750 	.word	0x20002750
 800c970:	20002768 	.word	0x20002768
 800c974:	20002734 	.word	0x20002734
 800c978:	20002738 	.word	0x20002738

0800c97c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c982:	e019      	b.n	800c9b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c984:	f7fd fdca 	bl	800a51c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c988:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <prvCheckTasksWaitingTermination+0x4c>)
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	3304      	adds	r3, #4
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe f917 	bl	800abc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c99a:	4b0c      	ldr	r3, [pc, #48]	; (800c9cc <prvCheckTasksWaitingTermination+0x50>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	4a0a      	ldr	r2, [pc, #40]	; (800c9cc <prvCheckTasksWaitingTermination+0x50>)
 800c9a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c9a4:	4b0a      	ldr	r3, [pc, #40]	; (800c9d0 <prvCheckTasksWaitingTermination+0x54>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	4a09      	ldr	r2, [pc, #36]	; (800c9d0 <prvCheckTasksWaitingTermination+0x54>)
 800c9ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c9ae:	f7fd fde3 	bl	800a578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f80e 	bl	800c9d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9b8:	4b05      	ldr	r3, [pc, #20]	; (800c9d0 <prvCheckTasksWaitingTermination+0x54>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1e1      	bne.n	800c984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	20002750 	.word	0x20002750
 800c9cc:	2000277c 	.word	0x2000277c
 800c9d0:	20002764 	.word	0x20002764

0800c9d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d108      	bne.n	800c9f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fd ff4e 	bl	800a88c <vPortFree>
				vPortFree( pxTCB );
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7fd ff4b 	bl	800a88c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9f6:	e017      	b.n	800ca28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d103      	bne.n	800ca0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fd ff42 	bl	800a88c <vPortFree>
	}
 800ca08:	e00e      	b.n	800ca28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d009      	beq.n	800ca28 <prvDeleteTCB+0x54>
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	e7fe      	b.n	800ca26 <prvDeleteTCB+0x52>
	}
 800ca28:	bf00      	nop
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca36:	4b0c      	ldr	r3, [pc, #48]	; (800ca68 <prvResetNextTaskUnblockTime+0x38>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d104      	bne.n	800ca4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca40:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <prvResetNextTaskUnblockTime+0x3c>)
 800ca42:	f04f 32ff 	mov.w	r2, #4294967295
 800ca46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca48:	e008      	b.n	800ca5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca4a:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <prvResetNextTaskUnblockTime+0x38>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	4a04      	ldr	r2, [pc, #16]	; (800ca6c <prvResetNextTaskUnblockTime+0x3c>)
 800ca5a:	6013      	str	r3, [r2, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	20002734 	.word	0x20002734
 800ca6c:	2000279c 	.word	0x2000279c

0800ca70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ca76:	4b05      	ldr	r3, [pc, #20]	; (800ca8c <xTaskGetCurrentTaskHandle+0x1c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ca7c:	687b      	ldr	r3, [r7, #4]
	}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	200022a8 	.word	0x200022a8

0800ca90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca96:	4b0b      	ldr	r3, [pc, #44]	; (800cac4 <xTaskGetSchedulerState+0x34>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d102      	bne.n	800caa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	607b      	str	r3, [r7, #4]
 800caa2:	e008      	b.n	800cab6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caa4:	4b08      	ldr	r3, [pc, #32]	; (800cac8 <xTaskGetSchedulerState+0x38>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800caac:	2302      	movs	r3, #2
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	e001      	b.n	800cab6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cab2:	2300      	movs	r3, #0
 800cab4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cab6:	687b      	ldr	r3, [r7, #4]
	}
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	20002788 	.word	0x20002788
 800cac8:	200027a4 	.word	0x200027a4

0800cacc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cad8:	2300      	movs	r3, #0
 800cada:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d051      	beq.n	800cb86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae6:	4b2a      	ldr	r3, [pc, #168]	; (800cb90 <xTaskPriorityInherit+0xc4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	429a      	cmp	r2, r3
 800caee:	d241      	bcs.n	800cb74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	699b      	ldr	r3, [r3, #24]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	db06      	blt.n	800cb06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caf8:	4b25      	ldr	r3, [pc, #148]	; (800cb90 <xTaskPriorityInherit+0xc4>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	6959      	ldr	r1, [r3, #20]
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4a1f      	ldr	r2, [pc, #124]	; (800cb94 <xTaskPriorityInherit+0xc8>)
 800cb18:	4413      	add	r3, r2
 800cb1a:	4299      	cmp	r1, r3
 800cb1c:	d122      	bne.n	800cb64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	3304      	adds	r3, #4
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe f850 	bl	800abc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb28:	4b19      	ldr	r3, [pc, #100]	; (800cb90 <xTaskPriorityInherit+0xc4>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb36:	4b18      	ldr	r3, [pc, #96]	; (800cb98 <xTaskPriorityInherit+0xcc>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d903      	bls.n	800cb46 <xTaskPriorityInherit+0x7a>
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb42:	4a15      	ldr	r2, [pc, #84]	; (800cb98 <xTaskPriorityInherit+0xcc>)
 800cb44:	6013      	str	r3, [r2, #0]
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4a10      	ldr	r2, [pc, #64]	; (800cb94 <xTaskPriorityInherit+0xc8>)
 800cb54:	441a      	add	r2, r3
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	f7fd ffd6 	bl	800ab0e <vListInsertEnd>
 800cb62:	e004      	b.n	800cb6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb64:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <xTaskPriorityInherit+0xc4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	e008      	b.n	800cb86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb78:	4b05      	ldr	r3, [pc, #20]	; (800cb90 <xTaskPriorityInherit+0xc4>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d201      	bcs.n	800cb86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb82:	2301      	movs	r3, #1
 800cb84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb86:	68fb      	ldr	r3, [r7, #12]
	}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	200022a8 	.word	0x200022a8
 800cb94:	200022ac 	.word	0x200022ac
 800cb98:	20002784 	.word	0x20002784

0800cb9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d054      	beq.n	800cc5c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbb2:	4b2d      	ldr	r3, [pc, #180]	; (800cc68 <xTaskPriorityDisinherit+0xcc>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d009      	beq.n	800cbd0 <xTaskPriorityDisinherit+0x34>
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	60fb      	str	r3, [r7, #12]
 800cbce:	e7fe      	b.n	800cbce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d109      	bne.n	800cbec <xTaskPriorityDisinherit+0x50>
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	60bb      	str	r3, [r7, #8]
 800cbea:	e7fe      	b.n	800cbea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf0:	1e5a      	subs	r2, r3, #1
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d02c      	beq.n	800cc5c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d128      	bne.n	800cc5c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fd ffda 	bl	800abc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2c:	4b0f      	ldr	r3, [pc, #60]	; (800cc6c <xTaskPriorityDisinherit+0xd0>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d903      	bls.n	800cc3c <xTaskPriorityDisinherit+0xa0>
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	4a0c      	ldr	r2, [pc, #48]	; (800cc6c <xTaskPriorityDisinherit+0xd0>)
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <xTaskPriorityDisinherit+0xd4>)
 800cc4a:	441a      	add	r2, r3
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	3304      	adds	r3, #4
 800cc50:	4619      	mov	r1, r3
 800cc52:	4610      	mov	r0, r2
 800cc54:	f7fd ff5b 	bl	800ab0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc5c:	697b      	ldr	r3, [r7, #20]
	}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	200022a8 	.word	0x200022a8
 800cc6c:	20002784 	.word	0x20002784
 800cc70:	200022ac 	.word	0x200022ac

0800cc74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b088      	sub	sp, #32
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc82:	2301      	movs	r3, #1
 800cc84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d068      	beq.n	800cd5e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d109      	bne.n	800cca8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	60fb      	str	r3, [r7, #12]
 800cca6:	e7fe      	b.n	800cca6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d902      	bls.n	800ccb8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	61fb      	str	r3, [r7, #28]
 800ccb6:	e002      	b.n	800ccbe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc2:	69fa      	ldr	r2, [r7, #28]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d04a      	beq.n	800cd5e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d145      	bne.n	800cd5e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ccd2:	4b25      	ldr	r3, [pc, #148]	; (800cd68 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	69ba      	ldr	r2, [r7, #24]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d109      	bne.n	800ccf0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	60bb      	str	r3, [r7, #8]
 800ccee:	e7fe      	b.n	800ccee <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	69fa      	ldr	r2, [r7, #28]
 800ccfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	db04      	blt.n	800cd0e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	6959      	ldr	r1, [r3, #20]
 800cd12:	693a      	ldr	r2, [r7, #16]
 800cd14:	4613      	mov	r3, r2
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	4413      	add	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4a13      	ldr	r2, [pc, #76]	; (800cd6c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cd1e:	4413      	add	r3, r2
 800cd20:	4299      	cmp	r1, r3
 800cd22:	d11c      	bne.n	800cd5e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	3304      	adds	r3, #4
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fd ff4d 	bl	800abc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	4b0f      	ldr	r3, [pc, #60]	; (800cd70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d903      	bls.n	800cd42 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3e:	4a0c      	ldr	r2, [pc, #48]	; (800cd70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cd40:	6013      	str	r3, [r2, #0]
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd46:	4613      	mov	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4a07      	ldr	r2, [pc, #28]	; (800cd6c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cd50:	441a      	add	r2, r3
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	3304      	adds	r3, #4
 800cd56:	4619      	mov	r1, r3
 800cd58:	4610      	mov	r0, r2
 800cd5a:	f7fd fed8 	bl	800ab0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd5e:	bf00      	nop
 800cd60:	3720      	adds	r7, #32
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	200022a8 	.word	0x200022a8
 800cd6c:	200022ac 	.word	0x200022ac
 800cd70:	20002784 	.word	0x20002784

0800cd74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd74:	b480      	push	{r7}
 800cd76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd78:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d004      	beq.n	800cd8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd80:	4b05      	ldr	r3, [pc, #20]	; (800cd98 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd86:	3201      	adds	r2, #1
 800cd88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cd8a:	4b03      	ldr	r3, [pc, #12]	; (800cd98 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
	}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	200022a8 	.word	0x200022a8

0800cd9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
 800cda8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cdaa:	f7fd fbb7 	bl	800a51c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cdae:	4b26      	ldr	r3, [pc, #152]	; (800ce48 <xTaskNotifyWait+0xac>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d01a      	beq.n	800cdf2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cdbc:	4b22      	ldr	r3, [pc, #136]	; (800ce48 <xTaskNotifyWait+0xac>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	43d2      	mvns	r2, r2
 800cdc6:	400a      	ands	r2, r1
 800cdc8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cdca:	4b1f      	ldr	r3, [pc, #124]	; (800ce48 <xTaskNotifyWait+0xac>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00b      	beq.n	800cdf2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdda:	2101      	movs	r1, #1
 800cddc:	6838      	ldr	r0, [r7, #0]
 800cdde:	f000 f9c5 	bl	800d16c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cde2:	4b1a      	ldr	r3, [pc, #104]	; (800ce4c <xTaskNotifyWait+0xb0>)
 800cde4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cdf2:	f7fd fbc1 	bl	800a578 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cdf6:	f7fd fb91 	bl	800a51c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ce00:	4b11      	ldr	r3, [pc, #68]	; (800ce48 <xTaskNotifyWait+0xac>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ce0a:	4b0f      	ldr	r3, [pc, #60]	; (800ce48 <xTaskNotifyWait+0xac>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d002      	beq.n	800ce1e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	617b      	str	r3, [r7, #20]
 800ce1c:	e008      	b.n	800ce30 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ce1e:	4b0a      	ldr	r3, [pc, #40]	; (800ce48 <xTaskNotifyWait+0xac>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	43d2      	mvns	r2, r2
 800ce28:	400a      	ands	r2, r1
 800ce2a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce30:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <xTaskNotifyWait+0xac>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800ce3a:	f7fd fb9d 	bl	800a578 <vPortExitCritical>

		return xReturn;
 800ce3e:	697b      	ldr	r3, [r7, #20]
	}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	200022a8 	.word	0x200022a8
 800ce4c:	e000ed04 	.word	0xe000ed04

0800ce50 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08a      	sub	sp, #40	; 0x28
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	603b      	str	r3, [r7, #0]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ce60:	2301      	movs	r3, #1
 800ce62:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d109      	bne.n	800ce7e <xTaskGenericNotify+0x2e>
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	61bb      	str	r3, [r7, #24]
 800ce7c:	e7fe      	b.n	800ce7c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ce82:	f7fd fb4b 	bl	800a51c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ce9a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	2202      	movs	r2, #2
 800cea0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	2b04      	cmp	r3, #4
 800cea8:	d827      	bhi.n	800cefa <xTaskGenericNotify+0xaa>
 800ceaa:	a201      	add	r2, pc, #4	; (adr r2, 800ceb0 <xTaskGenericNotify+0x60>)
 800ceac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb0:	0800cf19 	.word	0x0800cf19
 800ceb4:	0800cec5 	.word	0x0800cec5
 800ceb8:	0800ced3 	.word	0x0800ced3
 800cebc:	0800cedf 	.word	0x0800cedf
 800cec0:	0800cee7 	.word	0x0800cee7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	431a      	orrs	r2, r3
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ced0:	e025      	b.n	800cf1e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ced2:	6a3b      	ldr	r3, [r7, #32]
 800ced4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	6a3b      	ldr	r3, [r7, #32]
 800ceda:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cedc:	e01f      	b.n	800cf1e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800cee4:	e01b      	b.n	800cf1e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cee6:	7ffb      	ldrb	r3, [r7, #31]
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d003      	beq.n	800cef4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cef2:	e014      	b.n	800cf1e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800cef4:	2300      	movs	r3, #0
 800cef6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cef8:	e011      	b.n	800cf1e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cefa:	6a3b      	ldr	r3, [r7, #32]
 800cefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf02:	d00b      	beq.n	800cf1c <xTaskGenericNotify+0xcc>
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	617b      	str	r3, [r7, #20]
 800cf16:	e7fe      	b.n	800cf16 <xTaskGenericNotify+0xc6>
					break;
 800cf18:	bf00      	nop
 800cf1a:	e000      	b.n	800cf1e <xTaskGenericNotify+0xce>

					break;
 800cf1c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cf1e:	7ffb      	ldrb	r3, [r7, #31]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d13b      	bne.n	800cf9c <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf24:	6a3b      	ldr	r3, [r7, #32]
 800cf26:	3304      	adds	r3, #4
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fd fe4d 	bl	800abc8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf32:	4b1e      	ldr	r3, [pc, #120]	; (800cfac <xTaskGenericNotify+0x15c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d903      	bls.n	800cf42 <xTaskGenericNotify+0xf2>
 800cf3a:	6a3b      	ldr	r3, [r7, #32]
 800cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3e:	4a1b      	ldr	r2, [pc, #108]	; (800cfac <xTaskGenericNotify+0x15c>)
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf46:	4613      	mov	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4413      	add	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4a18      	ldr	r2, [pc, #96]	; (800cfb0 <xTaskGenericNotify+0x160>)
 800cf50:	441a      	add	r2, r3
 800cf52:	6a3b      	ldr	r3, [r7, #32]
 800cf54:	3304      	adds	r3, #4
 800cf56:	4619      	mov	r1, r3
 800cf58:	4610      	mov	r0, r2
 800cf5a:	f7fd fdd8 	bl	800ab0e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <xTaskGenericNotify+0x12a>
 800cf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	613b      	str	r3, [r7, #16]
 800cf78:	e7fe      	b.n	800cf78 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800cf7a:	f7ff fd59 	bl	800ca30 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf82:	4b0c      	ldr	r3, [pc, #48]	; (800cfb4 <xTaskGenericNotify+0x164>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d907      	bls.n	800cf9c <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cf8c:	4b0a      	ldr	r3, [pc, #40]	; (800cfb8 <xTaskGenericNotify+0x168>)
 800cf8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cf9c:	f7fd faec 	bl	800a578 <vPortExitCritical>

		return xReturn;
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3728      	adds	r7, #40	; 0x28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	20002784 	.word	0x20002784
 800cfb0:	200022ac 	.word	0x200022ac
 800cfb4:	200022a8 	.word	0x200022a8
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08e      	sub	sp, #56	; 0x38
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d109      	bne.n	800cfea <xTaskGenericNotifyFromISR+0x2e>
 800cfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfda:	f383 8811 	msr	BASEPRI, r3
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	627b      	str	r3, [r7, #36]	; 0x24
 800cfe8:	e7fe      	b.n	800cfe8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfea:	f7fd fb4f 	bl	800a68c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cff2:	f3ef 8211 	mrs	r2, BASEPRI
 800cff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	623a      	str	r2, [r7, #32]
 800d008:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d00a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d00c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d003      	beq.n	800d01c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d016:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	2202      	movs	r2, #2
 800d02a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	2b04      	cmp	r3, #4
 800d032:	d829      	bhi.n	800d088 <xTaskGenericNotifyFromISR+0xcc>
 800d034:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <xTaskGenericNotifyFromISR+0x80>)
 800d036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03a:	bf00      	nop
 800d03c:	0800d0a7 	.word	0x0800d0a7
 800d040:	0800d051 	.word	0x0800d051
 800d044:	0800d05f 	.word	0x0800d05f
 800d048:	0800d06b 	.word	0x0800d06b
 800d04c:	0800d073 	.word	0x0800d073
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	431a      	orrs	r2, r3
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d05c:	e026      	b.n	800d0ac <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d062:	1c5a      	adds	r2, r3, #1
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d068:	e020      	b.n	800d0ac <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800d070:	e01c      	b.n	800d0ac <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d076:	2b02      	cmp	r3, #2
 800d078:	d003      	beq.n	800d082 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d080:	e014      	b.n	800d0ac <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800d082:	2300      	movs	r3, #0
 800d084:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d086:	e011      	b.n	800d0ac <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d090:	d00b      	beq.n	800d0aa <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	61bb      	str	r3, [r7, #24]
 800d0a4:	e7fe      	b.n	800d0a4 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800d0a6:	bf00      	nop
 800d0a8:	e000      	b.n	800d0ac <xTaskGenericNotifyFromISR+0xf0>
					break;
 800d0aa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d0ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d145      	bne.n	800d140 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d009      	beq.n	800d0d0 <xTaskGenericNotifyFromISR+0x114>
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	617b      	str	r3, [r7, #20]
 800d0ce:	e7fe      	b.n	800d0ce <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0d0:	4b20      	ldr	r3, [pc, #128]	; (800d154 <xTaskGenericNotifyFromISR+0x198>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d11d      	bne.n	800d114 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	3304      	adds	r3, #4
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fd fd73 	bl	800abc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e6:	4b1c      	ldr	r3, [pc, #112]	; (800d158 <xTaskGenericNotifyFromISR+0x19c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d903      	bls.n	800d0f6 <xTaskGenericNotifyFromISR+0x13a>
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f2:	4a19      	ldr	r2, [pc, #100]	; (800d158 <xTaskGenericNotifyFromISR+0x19c>)
 800d0f4:	6013      	str	r3, [r2, #0]
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4a16      	ldr	r2, [pc, #88]	; (800d15c <xTaskGenericNotifyFromISR+0x1a0>)
 800d104:	441a      	add	r2, r3
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	3304      	adds	r3, #4
 800d10a:	4619      	mov	r1, r3
 800d10c:	4610      	mov	r0, r2
 800d10e:	f7fd fcfe 	bl	800ab0e <vListInsertEnd>
 800d112:	e005      	b.n	800d120 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d116:	3318      	adds	r3, #24
 800d118:	4619      	mov	r1, r3
 800d11a:	4811      	ldr	r0, [pc, #68]	; (800d160 <xTaskGenericNotifyFromISR+0x1a4>)
 800d11c:	f7fd fcf7 	bl	800ab0e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d124:	4b0f      	ldr	r3, [pc, #60]	; (800d164 <xTaskGenericNotifyFromISR+0x1a8>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d908      	bls.n	800d140 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d136:	2201      	movs	r2, #1
 800d138:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d13a:	4b0b      	ldr	r3, [pc, #44]	; (800d168 <xTaskGenericNotifyFromISR+0x1ac>)
 800d13c:	2201      	movs	r2, #1
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3738      	adds	r7, #56	; 0x38
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	200027a4 	.word	0x200027a4
 800d158:	20002784 	.word	0x20002784
 800d15c:	200022ac 	.word	0x200022ac
 800d160:	2000273c 	.word	0x2000273c
 800d164:	200022a8 	.word	0x200022a8
 800d168:	20002790 	.word	0x20002790

0800d16c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d176:	4b21      	ldr	r3, [pc, #132]	; (800d1fc <prvAddCurrentTaskToDelayedList+0x90>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d17c:	4b20      	ldr	r3, [pc, #128]	; (800d200 <prvAddCurrentTaskToDelayedList+0x94>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	3304      	adds	r3, #4
 800d182:	4618      	mov	r0, r3
 800d184:	f7fd fd20 	bl	800abc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18e:	d10a      	bne.n	800d1a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d007      	beq.n	800d1a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d196:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <prvAddCurrentTaskToDelayedList+0x94>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3304      	adds	r3, #4
 800d19c:	4619      	mov	r1, r3
 800d19e:	4819      	ldr	r0, [pc, #100]	; (800d204 <prvAddCurrentTaskToDelayedList+0x98>)
 800d1a0:	f7fd fcb5 	bl	800ab0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d1a4:	e026      	b.n	800d1f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d1ae:	4b14      	ldr	r3, [pc, #80]	; (800d200 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d209      	bcs.n	800d1d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1be:	4b12      	ldr	r3, [pc, #72]	; (800d208 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	4b0f      	ldr	r3, [pc, #60]	; (800d200 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	f7fd fcc3 	bl	800ab56 <vListInsert>
}
 800d1d0:	e010      	b.n	800d1f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1d2:	4b0e      	ldr	r3, [pc, #56]	; (800d20c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	4b0a      	ldr	r3, [pc, #40]	; (800d200 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	4619      	mov	r1, r3
 800d1de:	4610      	mov	r0, r2
 800d1e0:	f7fd fcb9 	bl	800ab56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1e4:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d202      	bcs.n	800d1f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d1ee:	4a08      	ldr	r2, [pc, #32]	; (800d210 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	6013      	str	r3, [r2, #0]
}
 800d1f4:	bf00      	nop
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20002780 	.word	0x20002780
 800d200:	200022a8 	.word	0x200022a8
 800d204:	20002768 	.word	0x20002768
 800d208:	20002738 	.word	0x20002738
 800d20c:	20002734 	.word	0x20002734
 800d210:	2000279c 	.word	0x2000279c

0800d214 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08a      	sub	sp, #40	; 0x28
 800d218:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d21e:	f000 faff 	bl	800d820 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <xTimerCreateTimerTask+0x80>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d021      	beq.n	800d26e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d232:	1d3a      	adds	r2, r7, #4
 800d234:	f107 0108 	add.w	r1, r7, #8
 800d238:	f107 030c 	add.w	r3, r7, #12
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fd f829 	bl	800a294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d242:	6879      	ldr	r1, [r7, #4]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	9202      	str	r2, [sp, #8]
 800d24a:	9301      	str	r3, [sp, #4]
 800d24c:	2302      	movs	r3, #2
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	2300      	movs	r3, #0
 800d252:	460a      	mov	r2, r1
 800d254:	4910      	ldr	r1, [pc, #64]	; (800d298 <xTimerCreateTimerTask+0x84>)
 800d256:	4811      	ldr	r0, [pc, #68]	; (800d29c <xTimerCreateTimerTask+0x88>)
 800d258:	f7fe fd82 	bl	800bd60 <xTaskCreateStatic>
 800d25c:	4602      	mov	r2, r0
 800d25e:	4b10      	ldr	r3, [pc, #64]	; (800d2a0 <xTimerCreateTimerTask+0x8c>)
 800d260:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d262:	4b0f      	ldr	r3, [pc, #60]	; (800d2a0 <xTimerCreateTimerTask+0x8c>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d001      	beq.n	800d26e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d26a:	2301      	movs	r3, #1
 800d26c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d109      	bne.n	800d288 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	613b      	str	r3, [r7, #16]
 800d286:	e7fe      	b.n	800d286 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d288:	697b      	ldr	r3, [r7, #20]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	200027d8 	.word	0x200027d8
 800d298:	08010758 	.word	0x08010758
 800d29c:	0800d3d5 	.word	0x0800d3d5
 800d2a0:	200027dc 	.word	0x200027dc

0800d2a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08a      	sub	sp, #40	; 0x28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d109      	bne.n	800d2d0 <xTimerGenericCommand+0x2c>
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	623b      	str	r3, [r7, #32]
 800d2ce:	e7fe      	b.n	800d2ce <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d2d0:	4b19      	ldr	r3, [pc, #100]	; (800d338 <xTimerGenericCommand+0x94>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d02a      	beq.n	800d32e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	2b05      	cmp	r3, #5
 800d2e8:	dc18      	bgt.n	800d31c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d2ea:	f7ff fbd1 	bl	800ca90 <xTaskGetSchedulerState>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d109      	bne.n	800d308 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d2f4:	4b10      	ldr	r3, [pc, #64]	; (800d338 <xTimerGenericCommand+0x94>)
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	f107 0110 	add.w	r1, r7, #16
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d300:	f7fd fee4 	bl	800b0cc <xQueueGenericSend>
 800d304:	6278      	str	r0, [r7, #36]	; 0x24
 800d306:	e012      	b.n	800d32e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d308:	4b0b      	ldr	r3, [pc, #44]	; (800d338 <xTimerGenericCommand+0x94>)
 800d30a:	6818      	ldr	r0, [r3, #0]
 800d30c:	f107 0110 	add.w	r1, r7, #16
 800d310:	2300      	movs	r3, #0
 800d312:	2200      	movs	r2, #0
 800d314:	f7fd feda 	bl	800b0cc <xQueueGenericSend>
 800d318:	6278      	str	r0, [r7, #36]	; 0x24
 800d31a:	e008      	b.n	800d32e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <xTimerGenericCommand+0x94>)
 800d31e:	6818      	ldr	r0, [r3, #0]
 800d320:	f107 0110 	add.w	r1, r7, #16
 800d324:	2300      	movs	r3, #0
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	f7fd ffca 	bl	800b2c0 <xQueueGenericSendFromISR>
 800d32c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d330:	4618      	mov	r0, r3
 800d332:	3728      	adds	r7, #40	; 0x28
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	200027d8 	.word	0x200027d8

0800d33c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af02      	add	r7, sp, #8
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d346:	4b22      	ldr	r3, [pc, #136]	; (800d3d0 <prvProcessExpiredTimer+0x94>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	3304      	adds	r3, #4
 800d354:	4618      	mov	r0, r3
 800d356:	f7fd fc37 	bl	800abc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d021      	beq.n	800d3ac <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	699a      	ldr	r2, [r3, #24]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	18d1      	adds	r1, r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	6978      	ldr	r0, [r7, #20]
 800d376:	f000 f8d1 	bl	800d51c <prvInsertTimerInActiveList>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01e      	beq.n	800d3be <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d380:	2300      	movs	r3, #0
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	2300      	movs	r3, #0
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	2100      	movs	r1, #0
 800d38a:	6978      	ldr	r0, [r7, #20]
 800d38c:	f7ff ff8a 	bl	800d2a4 <xTimerGenericCommand>
 800d390:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d112      	bne.n	800d3be <prvProcessExpiredTimer+0x82>
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	e7fe      	b.n	800d3aa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3b2:	f023 0301 	bic.w	r3, r3, #1
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	6a1b      	ldr	r3, [r3, #32]
 800d3c2:	6978      	ldr	r0, [r7, #20]
 800d3c4:	4798      	blx	r3
}
 800d3c6:	bf00      	nop
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	200027d0 	.word	0x200027d0

0800d3d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3dc:	f107 0308 	add.w	r3, r7, #8
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 f857 	bl	800d494 <prvGetNextExpireTime>
 800d3e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 f803 	bl	800d3f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d3f2:	f000 f8d5 	bl	800d5a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3f6:	e7f1      	b.n	800d3dc <prvTimerTask+0x8>

0800d3f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d402:	f7fe feaf 	bl	800c164 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d406:	f107 0308 	add.w	r3, r7, #8
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 f866 	bl	800d4dc <prvSampleTimeNow>
 800d410:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d130      	bne.n	800d47a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10a      	bne.n	800d434 <prvProcessTimerOrBlockTask+0x3c>
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	429a      	cmp	r2, r3
 800d424:	d806      	bhi.n	800d434 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d426:	f7fe fee3 	bl	800c1f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d42a:	68f9      	ldr	r1, [r7, #12]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7ff ff85 	bl	800d33c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d432:	e024      	b.n	800d47e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d008      	beq.n	800d44c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <prvProcessTimerOrBlockTask+0x90>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <prvProcessTimerOrBlockTask+0x50>
 800d444:	2301      	movs	r3, #1
 800d446:	e000      	b.n	800d44a <prvProcessTimerOrBlockTask+0x52>
 800d448:	2300      	movs	r3, #0
 800d44a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d44c:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <prvProcessTimerOrBlockTask+0x94>)
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	4619      	mov	r1, r3
 800d45a:	f7fe fc4d 	bl	800bcf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d45e:	f7fe fec7 	bl	800c1f0 <xTaskResumeAll>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d468:	4b09      	ldr	r3, [pc, #36]	; (800d490 <prvProcessTimerOrBlockTask+0x98>)
 800d46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46e:	601a      	str	r2, [r3, #0]
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	f3bf 8f6f 	isb	sy
}
 800d478:	e001      	b.n	800d47e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d47a:	f7fe feb9 	bl	800c1f0 <xTaskResumeAll>
}
 800d47e:	bf00      	nop
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	200027d4 	.word	0x200027d4
 800d48c:	200027d8 	.word	0x200027d8
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d49c:	4b0e      	ldr	r3, [pc, #56]	; (800d4d8 <prvGetNextExpireTime+0x44>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d101      	bne.n	800d4aa <prvGetNextExpireTime+0x16>
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	e000      	b.n	800d4ac <prvGetNextExpireTime+0x18>
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d105      	bne.n	800d4c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4b8:	4b07      	ldr	r3, [pc, #28]	; (800d4d8 <prvGetNextExpireTime+0x44>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	e001      	b.n	800d4c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3714      	adds	r7, #20
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	200027d0 	.word	0x200027d0

0800d4dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d4e4:	f7fe ff20 	bl	800c328 <xTaskGetTickCount>
 800d4e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d4ea:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <prvSampleTimeNow+0x3c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d205      	bcs.n	800d500 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d4f4:	f000 f930 	bl	800d758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	e002      	b.n	800d506 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d506:	4a04      	ldr	r2, [pc, #16]	; (800d518 <prvSampleTimeNow+0x3c>)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d50c:	68fb      	ldr	r3, [r7, #12]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	200027e0 	.word	0x200027e0

0800d51c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b086      	sub	sp, #24
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
 800d528:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d52a:	2300      	movs	r3, #0
 800d52c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d812      	bhi.n	800d568 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	1ad2      	subs	r2, r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	699b      	ldr	r3, [r3, #24]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d302      	bcc.n	800d556 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d550:	2301      	movs	r3, #1
 800d552:	617b      	str	r3, [r7, #20]
 800d554:	e01b      	b.n	800d58e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d556:	4b10      	ldr	r3, [pc, #64]	; (800d598 <prvInsertTimerInActiveList+0x7c>)
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3304      	adds	r3, #4
 800d55e:	4619      	mov	r1, r3
 800d560:	4610      	mov	r0, r2
 800d562:	f7fd faf8 	bl	800ab56 <vListInsert>
 800d566:	e012      	b.n	800d58e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d206      	bcs.n	800d57e <prvInsertTimerInActiveList+0x62>
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	429a      	cmp	r2, r3
 800d576:	d302      	bcc.n	800d57e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d578:	2301      	movs	r3, #1
 800d57a:	617b      	str	r3, [r7, #20]
 800d57c:	e007      	b.n	800d58e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d57e:	4b07      	ldr	r3, [pc, #28]	; (800d59c <prvInsertTimerInActiveList+0x80>)
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	3304      	adds	r3, #4
 800d586:	4619      	mov	r1, r3
 800d588:	4610      	mov	r0, r2
 800d58a:	f7fd fae4 	bl	800ab56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d58e:	697b      	ldr	r3, [r7, #20]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3718      	adds	r7, #24
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	200027d4 	.word	0x200027d4
 800d59c:	200027d0 	.word	0x200027d0

0800d5a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b08e      	sub	sp, #56	; 0x38
 800d5a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5a6:	e0c6      	b.n	800d736 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	da17      	bge.n	800d5de <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d5ae:	1d3b      	adds	r3, r7, #4
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d109      	bne.n	800d5ce <prvProcessReceivedCommands+0x2e>
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	61fb      	str	r3, [r7, #28]
 800d5cc:	e7fe      	b.n	800d5cc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5d4:	6850      	ldr	r0, [r2, #4]
 800d5d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5d8:	6892      	ldr	r2, [r2, #8]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f2c0 80a7 	blt.w	800d734 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ec:	695b      	ldr	r3, [r3, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d004      	beq.n	800d5fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fd fae6 	bl	800abc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5fc:	463b      	mov	r3, r7
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7ff ff6c 	bl	800d4dc <prvSampleTimeNow>
 800d604:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b09      	cmp	r3, #9
 800d60a:	f200 8094 	bhi.w	800d736 <prvProcessReceivedCommands+0x196>
 800d60e:	a201      	add	r2, pc, #4	; (adr r2, 800d614 <prvProcessReceivedCommands+0x74>)
 800d610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d614:	0800d63d 	.word	0x0800d63d
 800d618:	0800d63d 	.word	0x0800d63d
 800d61c:	0800d63d 	.word	0x0800d63d
 800d620:	0800d6af 	.word	0x0800d6af
 800d624:	0800d6c3 	.word	0x0800d6c3
 800d628:	0800d70b 	.word	0x0800d70b
 800d62c:	0800d63d 	.word	0x0800d63d
 800d630:	0800d63d 	.word	0x0800d63d
 800d634:	0800d6af 	.word	0x0800d6af
 800d638:	0800d6c3 	.word	0x0800d6c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d642:	f043 0301 	orr.w	r3, r3, #1
 800d646:	b2da      	uxtb	r2, r3
 800d648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	699b      	ldr	r3, [r3, #24]
 800d654:	18d1      	adds	r1, r2, r3
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d65a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d65c:	f7ff ff5e 	bl	800d51c <prvInsertTimerInActiveList>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d067      	beq.n	800d736 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d66c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d674:	f003 0304 	and.w	r3, r3, #4
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d05c      	beq.n	800d736 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	441a      	add	r2, r3
 800d684:	2300      	movs	r3, #0
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	2300      	movs	r3, #0
 800d68a:	2100      	movs	r1, #0
 800d68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d68e:	f7ff fe09 	bl	800d2a4 <xTimerGenericCommand>
 800d692:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d14d      	bne.n	800d736 <prvProcessReceivedCommands+0x196>
 800d69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	61bb      	str	r3, [r7, #24]
 800d6ac:	e7fe      	b.n	800d6ac <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6b4:	f023 0301 	bic.w	r3, r3, #1
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d6c0:	e039      	b.n	800d736 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6c8:	f043 0301 	orr.w	r3, r3, #1
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d109      	bne.n	800d6f6 <prvProcessReceivedCommands+0x156>
 800d6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e7fe      	b.n	800d6f4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	699a      	ldr	r2, [r3, #24]
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	18d1      	adds	r1, r2, r3
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d704:	f7ff ff0a 	bl	800d51c <prvInsertTimerInActiveList>
					break;
 800d708:	e015      	b.n	800d736 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d710:	f003 0302 	and.w	r3, r3, #2
 800d714:	2b00      	cmp	r3, #0
 800d716:	d103      	bne.n	800d720 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800d718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d71a:	f7fd f8b7 	bl	800a88c <vPortFree>
 800d71e:	e00a      	b.n	800d736 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d726:	f023 0301 	bic.w	r3, r3, #1
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d732:	e000      	b.n	800d736 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d734:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <prvProcessReceivedCommands+0x1b4>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	1d39      	adds	r1, r7, #4
 800d73c:	2200      	movs	r2, #0
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fd fedc 	bl	800b4fc <xQueueReceive>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	f47f af2e 	bne.w	800d5a8 <prvProcessReceivedCommands+0x8>
	}
}
 800d74c:	bf00      	nop
 800d74e:	3730      	adds	r7, #48	; 0x30
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	200027d8 	.word	0x200027d8

0800d758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b088      	sub	sp, #32
 800d75c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d75e:	e047      	b.n	800d7f0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d760:	4b2d      	ldr	r3, [pc, #180]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76a:	4b2b      	ldr	r3, [pc, #172]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3304      	adds	r3, #4
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fd fa25 	bl	800abc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d02d      	beq.n	800d7f0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	693a      	ldr	r2, [r7, #16]
 800d79a:	4413      	add	r3, r2
 800d79c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d90e      	bls.n	800d7c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7b2:	4b19      	ldr	r3, [pc, #100]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	4610      	mov	r0, r2
 800d7be:	f7fd f9ca 	bl	800ab56 <vListInsert>
 800d7c2:	e015      	b.n	800d7f0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff fd68 	bl	800d2a4 <xTimerGenericCommand>
 800d7d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d109      	bne.n	800d7f0 <prvSwitchTimerLists+0x98>
 800d7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	603b      	str	r3, [r7, #0]
 800d7ee:	e7fe      	b.n	800d7ee <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7f0:	4b09      	ldr	r3, [pc, #36]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1b2      	bne.n	800d760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d7fa:	4b07      	ldr	r3, [pc, #28]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d800:	4b06      	ldr	r3, [pc, #24]	; (800d81c <prvSwitchTimerLists+0xc4>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a04      	ldr	r2, [pc, #16]	; (800d818 <prvSwitchTimerLists+0xc0>)
 800d806:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d808:	4a04      	ldr	r2, [pc, #16]	; (800d81c <prvSwitchTimerLists+0xc4>)
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	6013      	str	r3, [r2, #0]
}
 800d80e:	bf00      	nop
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	200027d0 	.word	0x200027d0
 800d81c:	200027d4 	.word	0x200027d4

0800d820 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d826:	f7fc fe79 	bl	800a51c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d82a:	4b15      	ldr	r3, [pc, #84]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d120      	bne.n	800d874 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d832:	4814      	ldr	r0, [pc, #80]	; (800d884 <prvCheckForValidListAndQueue+0x64>)
 800d834:	f7fd f93e 	bl	800aab4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d838:	4813      	ldr	r0, [pc, #76]	; (800d888 <prvCheckForValidListAndQueue+0x68>)
 800d83a:	f7fd f93b 	bl	800aab4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d83e:	4b13      	ldr	r3, [pc, #76]	; (800d88c <prvCheckForValidListAndQueue+0x6c>)
 800d840:	4a10      	ldr	r2, [pc, #64]	; (800d884 <prvCheckForValidListAndQueue+0x64>)
 800d842:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d844:	4b12      	ldr	r3, [pc, #72]	; (800d890 <prvCheckForValidListAndQueue+0x70>)
 800d846:	4a10      	ldr	r2, [pc, #64]	; (800d888 <prvCheckForValidListAndQueue+0x68>)
 800d848:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d84a:	2300      	movs	r3, #0
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	4b11      	ldr	r3, [pc, #68]	; (800d894 <prvCheckForValidListAndQueue+0x74>)
 800d850:	4a11      	ldr	r2, [pc, #68]	; (800d898 <prvCheckForValidListAndQueue+0x78>)
 800d852:	2110      	movs	r1, #16
 800d854:	200a      	movs	r0, #10
 800d856:	f7fd fa49 	bl	800acec <xQueueGenericCreateStatic>
 800d85a:	4602      	mov	r2, r0
 800d85c:	4b08      	ldr	r3, [pc, #32]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d85e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d860:	4b07      	ldr	r3, [pc, #28]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d005      	beq.n	800d874 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <prvCheckForValidListAndQueue+0x60>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	490b      	ldr	r1, [pc, #44]	; (800d89c <prvCheckForValidListAndQueue+0x7c>)
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe f9f0 	bl	800bc54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d874:	f7fc fe80 	bl	800a578 <vPortExitCritical>
}
 800d878:	bf00      	nop
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	200027d8 	.word	0x200027d8
 800d884:	200027a8 	.word	0x200027a8
 800d888:	200027bc 	.word	0x200027bc
 800d88c:	200027d0 	.word	0x200027d0
 800d890:	200027d4 	.word	0x200027d4
 800d894:	20002884 	.word	0x20002884
 800d898:	200027e4 	.word	0x200027e4
 800d89c:	08010760 	.word	0x08010760

0800d8a0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <UTIL_LPM_Init+0x1c>)
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d8aa:	4b05      	ldr	r3, [pc, #20]	; (800d8c0 <UTIL_LPM_Init+0x20>)
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d8b0:	bf00      	nop
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	200028d4 	.word	0x200028d4
 800d8c0:	200028d8 	.word	0x200028d8

0800d8c4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b087      	sub	sp, #28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d8d4:	613b      	str	r3, [r7, #16]
  return(result);
 800d8d6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d8d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8da:	b672      	cpsid	i
  
  switch(state)
 800d8dc:	78fb      	ldrb	r3, [r7, #3]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d009      	beq.n	800d8f6 <UTIL_LPM_SetOffMode+0x32>
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d000      	beq.n	800d8e8 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 800d8e6:	e00e      	b.n	800d906 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800d8e8:	4b0c      	ldr	r3, [pc, #48]	; (800d91c <UTIL_LPM_SetOffMode+0x58>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	4a0a      	ldr	r2, [pc, #40]	; (800d91c <UTIL_LPM_SetOffMode+0x58>)
 800d8f2:	6013      	str	r3, [r2, #0]
      break;
 800d8f4:	e007      	b.n	800d906 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	43da      	mvns	r2, r3
 800d8fa:	4b08      	ldr	r3, [pc, #32]	; (800d91c <UTIL_LPM_SetOffMode+0x58>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4013      	ands	r3, r2
 800d900:	4a06      	ldr	r2, [pc, #24]	; (800d91c <UTIL_LPM_SetOffMode+0x58>)
 800d902:	6013      	str	r3, [r2, #0]
      break;
 800d904:	bf00      	nop
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d910:	bf00      	nop
 800d912:	371c      	adds	r7, #28
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	200028d8 	.word	0x200028d8

0800d920 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d926:	f3ef 8310 	mrs	r3, PRIMASK
 800d92a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d92c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800d92e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d930:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800d932:	4b12      	ldr	r3, [pc, #72]	; (800d97c <UTIL_LPM_EnterLowPower+0x5c>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d006      	beq.n	800d948 <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800d93a:	4b11      	ldr	r3, [pc, #68]	; (800d980 <UTIL_LPM_EnterLowPower+0x60>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800d940:	4b0f      	ldr	r3, [pc, #60]	; (800d980 <UTIL_LPM_EnterLowPower+0x60>)
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	4798      	blx	r3
 800d946:	e010      	b.n	800d96a <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800d948:	4b0e      	ldr	r3, [pc, #56]	; (800d984 <UTIL_LPM_EnterLowPower+0x64>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d006      	beq.n	800d95e <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800d950:	4b0b      	ldr	r3, [pc, #44]	; (800d980 <UTIL_LPM_EnterLowPower+0x60>)
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800d956:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <UTIL_LPM_EnterLowPower+0x60>)
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	4798      	blx	r3
 800d95c:	e005      	b.n	800d96a <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800d95e:	4b08      	ldr	r3, [pc, #32]	; (800d980 <UTIL_LPM_EnterLowPower+0x60>)
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800d964:	4b06      	ldr	r3, [pc, #24]	; (800d980 <UTIL_LPM_EnterLowPower+0x60>)
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	4798      	blx	r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800d974:	bf00      	nop
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	200028d4 	.word	0x200028d4
 800d980:	08010938 	.word	0x08010938
 800d984:	200028d8 	.word	0x200028d8

0800d988 <__errno>:
 800d988:	4b01      	ldr	r3, [pc, #4]	; (800d990 <__errno+0x8>)
 800d98a:	6818      	ldr	r0, [r3, #0]
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	20000024 	.word	0x20000024

0800d994 <__libc_init_array>:
 800d994:	b570      	push	{r4, r5, r6, lr}
 800d996:	4e0d      	ldr	r6, [pc, #52]	; (800d9cc <__libc_init_array+0x38>)
 800d998:	4c0d      	ldr	r4, [pc, #52]	; (800d9d0 <__libc_init_array+0x3c>)
 800d99a:	1ba4      	subs	r4, r4, r6
 800d99c:	10a4      	asrs	r4, r4, #2
 800d99e:	2500      	movs	r5, #0
 800d9a0:	42a5      	cmp	r5, r4
 800d9a2:	d109      	bne.n	800d9b8 <__libc_init_array+0x24>
 800d9a4:	4e0b      	ldr	r6, [pc, #44]	; (800d9d4 <__libc_init_array+0x40>)
 800d9a6:	4c0c      	ldr	r4, [pc, #48]	; (800d9d8 <__libc_init_array+0x44>)
 800d9a8:	f002 fbae 	bl	8010108 <_init>
 800d9ac:	1ba4      	subs	r4, r4, r6
 800d9ae:	10a4      	asrs	r4, r4, #2
 800d9b0:	2500      	movs	r5, #0
 800d9b2:	42a5      	cmp	r5, r4
 800d9b4:	d105      	bne.n	800d9c2 <__libc_init_array+0x2e>
 800d9b6:	bd70      	pop	{r4, r5, r6, pc}
 800d9b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d9bc:	4798      	blx	r3
 800d9be:	3501      	adds	r5, #1
 800d9c0:	e7ee      	b.n	800d9a0 <__libc_init_array+0xc>
 800d9c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d9c6:	4798      	blx	r3
 800d9c8:	3501      	adds	r5, #1
 800d9ca:	e7f2      	b.n	800d9b2 <__libc_init_array+0x1e>
 800d9cc:	08010cb8 	.word	0x08010cb8
 800d9d0:	08010cb8 	.word	0x08010cb8
 800d9d4:	08010cb8 	.word	0x08010cb8
 800d9d8:	08010cbc 	.word	0x08010cbc

0800d9dc <memcpy>:
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	1e43      	subs	r3, r0, #1
 800d9e0:	440a      	add	r2, r1
 800d9e2:	4291      	cmp	r1, r2
 800d9e4:	d100      	bne.n	800d9e8 <memcpy+0xc>
 800d9e6:	bd10      	pop	{r4, pc}
 800d9e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9f0:	e7f7      	b.n	800d9e2 <memcpy+0x6>

0800d9f2 <memset>:
 800d9f2:	4402      	add	r2, r0
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d100      	bne.n	800d9fc <memset+0xa>
 800d9fa:	4770      	bx	lr
 800d9fc:	f803 1b01 	strb.w	r1, [r3], #1
 800da00:	e7f9      	b.n	800d9f6 <memset+0x4>

0800da02 <__cvt>:
 800da02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da06:	ec55 4b10 	vmov	r4, r5, d0
 800da0a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800da0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da10:	2d00      	cmp	r5, #0
 800da12:	460e      	mov	r6, r1
 800da14:	4691      	mov	r9, r2
 800da16:	4619      	mov	r1, r3
 800da18:	bfb8      	it	lt
 800da1a:	4622      	movlt	r2, r4
 800da1c:	462b      	mov	r3, r5
 800da1e:	f027 0720 	bic.w	r7, r7, #32
 800da22:	bfbb      	ittet	lt
 800da24:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da28:	461d      	movlt	r5, r3
 800da2a:	2300      	movge	r3, #0
 800da2c:	232d      	movlt	r3, #45	; 0x2d
 800da2e:	bfb8      	it	lt
 800da30:	4614      	movlt	r4, r2
 800da32:	2f46      	cmp	r7, #70	; 0x46
 800da34:	700b      	strb	r3, [r1, #0]
 800da36:	d004      	beq.n	800da42 <__cvt+0x40>
 800da38:	2f45      	cmp	r7, #69	; 0x45
 800da3a:	d100      	bne.n	800da3e <__cvt+0x3c>
 800da3c:	3601      	adds	r6, #1
 800da3e:	2102      	movs	r1, #2
 800da40:	e000      	b.n	800da44 <__cvt+0x42>
 800da42:	2103      	movs	r1, #3
 800da44:	ab03      	add	r3, sp, #12
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	ab02      	add	r3, sp, #8
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	4632      	mov	r2, r6
 800da4e:	4653      	mov	r3, sl
 800da50:	ec45 4b10 	vmov	d0, r4, r5
 800da54:	f000 fdfc 	bl	800e650 <_dtoa_r>
 800da58:	2f47      	cmp	r7, #71	; 0x47
 800da5a:	4680      	mov	r8, r0
 800da5c:	d102      	bne.n	800da64 <__cvt+0x62>
 800da5e:	f019 0f01 	tst.w	r9, #1
 800da62:	d026      	beq.n	800dab2 <__cvt+0xb0>
 800da64:	2f46      	cmp	r7, #70	; 0x46
 800da66:	eb08 0906 	add.w	r9, r8, r6
 800da6a:	d111      	bne.n	800da90 <__cvt+0x8e>
 800da6c:	f898 3000 	ldrb.w	r3, [r8]
 800da70:	2b30      	cmp	r3, #48	; 0x30
 800da72:	d10a      	bne.n	800da8a <__cvt+0x88>
 800da74:	2200      	movs	r2, #0
 800da76:	2300      	movs	r3, #0
 800da78:	4620      	mov	r0, r4
 800da7a:	4629      	mov	r1, r5
 800da7c:	f7f2 fffc 	bl	8000a78 <__aeabi_dcmpeq>
 800da80:	b918      	cbnz	r0, 800da8a <__cvt+0x88>
 800da82:	f1c6 0601 	rsb	r6, r6, #1
 800da86:	f8ca 6000 	str.w	r6, [sl]
 800da8a:	f8da 3000 	ldr.w	r3, [sl]
 800da8e:	4499      	add	r9, r3
 800da90:	2200      	movs	r2, #0
 800da92:	2300      	movs	r3, #0
 800da94:	4620      	mov	r0, r4
 800da96:	4629      	mov	r1, r5
 800da98:	f7f2 ffee 	bl	8000a78 <__aeabi_dcmpeq>
 800da9c:	b938      	cbnz	r0, 800daae <__cvt+0xac>
 800da9e:	2230      	movs	r2, #48	; 0x30
 800daa0:	9b03      	ldr	r3, [sp, #12]
 800daa2:	454b      	cmp	r3, r9
 800daa4:	d205      	bcs.n	800dab2 <__cvt+0xb0>
 800daa6:	1c59      	adds	r1, r3, #1
 800daa8:	9103      	str	r1, [sp, #12]
 800daaa:	701a      	strb	r2, [r3, #0]
 800daac:	e7f8      	b.n	800daa0 <__cvt+0x9e>
 800daae:	f8cd 900c 	str.w	r9, [sp, #12]
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dab6:	eba3 0308 	sub.w	r3, r3, r8
 800daba:	4640      	mov	r0, r8
 800dabc:	6013      	str	r3, [r2, #0]
 800dabe:	b004      	add	sp, #16
 800dac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dac4 <__exponent>:
 800dac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dac6:	2900      	cmp	r1, #0
 800dac8:	4604      	mov	r4, r0
 800daca:	bfba      	itte	lt
 800dacc:	4249      	neglt	r1, r1
 800dace:	232d      	movlt	r3, #45	; 0x2d
 800dad0:	232b      	movge	r3, #43	; 0x2b
 800dad2:	2909      	cmp	r1, #9
 800dad4:	f804 2b02 	strb.w	r2, [r4], #2
 800dad8:	7043      	strb	r3, [r0, #1]
 800dada:	dd20      	ble.n	800db1e <__exponent+0x5a>
 800dadc:	f10d 0307 	add.w	r3, sp, #7
 800dae0:	461f      	mov	r7, r3
 800dae2:	260a      	movs	r6, #10
 800dae4:	fb91 f5f6 	sdiv	r5, r1, r6
 800dae8:	fb06 1115 	mls	r1, r6, r5, r1
 800daec:	3130      	adds	r1, #48	; 0x30
 800daee:	2d09      	cmp	r5, #9
 800daf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800daf4:	f103 32ff 	add.w	r2, r3, #4294967295
 800daf8:	4629      	mov	r1, r5
 800dafa:	dc09      	bgt.n	800db10 <__exponent+0x4c>
 800dafc:	3130      	adds	r1, #48	; 0x30
 800dafe:	3b02      	subs	r3, #2
 800db00:	f802 1c01 	strb.w	r1, [r2, #-1]
 800db04:	42bb      	cmp	r3, r7
 800db06:	4622      	mov	r2, r4
 800db08:	d304      	bcc.n	800db14 <__exponent+0x50>
 800db0a:	1a10      	subs	r0, r2, r0
 800db0c:	b003      	add	sp, #12
 800db0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db10:	4613      	mov	r3, r2
 800db12:	e7e7      	b.n	800dae4 <__exponent+0x20>
 800db14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db18:	f804 2b01 	strb.w	r2, [r4], #1
 800db1c:	e7f2      	b.n	800db04 <__exponent+0x40>
 800db1e:	2330      	movs	r3, #48	; 0x30
 800db20:	4419      	add	r1, r3
 800db22:	7083      	strb	r3, [r0, #2]
 800db24:	1d02      	adds	r2, r0, #4
 800db26:	70c1      	strb	r1, [r0, #3]
 800db28:	e7ef      	b.n	800db0a <__exponent+0x46>
	...

0800db2c <_printf_float>:
 800db2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db30:	b08d      	sub	sp, #52	; 0x34
 800db32:	460c      	mov	r4, r1
 800db34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800db38:	4616      	mov	r6, r2
 800db3a:	461f      	mov	r7, r3
 800db3c:	4605      	mov	r5, r0
 800db3e:	f001 fcb9 	bl	800f4b4 <_localeconv_r>
 800db42:	6803      	ldr	r3, [r0, #0]
 800db44:	9304      	str	r3, [sp, #16]
 800db46:	4618      	mov	r0, r3
 800db48:	f7f2 fb1a 	bl	8000180 <strlen>
 800db4c:	2300      	movs	r3, #0
 800db4e:	930a      	str	r3, [sp, #40]	; 0x28
 800db50:	f8d8 3000 	ldr.w	r3, [r8]
 800db54:	9005      	str	r0, [sp, #20]
 800db56:	3307      	adds	r3, #7
 800db58:	f023 0307 	bic.w	r3, r3, #7
 800db5c:	f103 0208 	add.w	r2, r3, #8
 800db60:	f894 a018 	ldrb.w	sl, [r4, #24]
 800db64:	f8d4 b000 	ldr.w	fp, [r4]
 800db68:	f8c8 2000 	str.w	r2, [r8]
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800db74:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800db78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db7c:	9307      	str	r3, [sp, #28]
 800db7e:	f8cd 8018 	str.w	r8, [sp, #24]
 800db82:	f04f 32ff 	mov.w	r2, #4294967295
 800db86:	4ba7      	ldr	r3, [pc, #668]	; (800de24 <_printf_float+0x2f8>)
 800db88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db8c:	f7f2 ffa6 	bl	8000adc <__aeabi_dcmpun>
 800db90:	bb70      	cbnz	r0, 800dbf0 <_printf_float+0xc4>
 800db92:	f04f 32ff 	mov.w	r2, #4294967295
 800db96:	4ba3      	ldr	r3, [pc, #652]	; (800de24 <_printf_float+0x2f8>)
 800db98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db9c:	f7f2 ff80 	bl	8000aa0 <__aeabi_dcmple>
 800dba0:	bb30      	cbnz	r0, 800dbf0 <_printf_float+0xc4>
 800dba2:	2200      	movs	r2, #0
 800dba4:	2300      	movs	r3, #0
 800dba6:	4640      	mov	r0, r8
 800dba8:	4649      	mov	r1, r9
 800dbaa:	f7f2 ff6f 	bl	8000a8c <__aeabi_dcmplt>
 800dbae:	b110      	cbz	r0, 800dbb6 <_printf_float+0x8a>
 800dbb0:	232d      	movs	r3, #45	; 0x2d
 800dbb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbb6:	4a9c      	ldr	r2, [pc, #624]	; (800de28 <_printf_float+0x2fc>)
 800dbb8:	4b9c      	ldr	r3, [pc, #624]	; (800de2c <_printf_float+0x300>)
 800dbba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dbbe:	bf8c      	ite	hi
 800dbc0:	4690      	movhi	r8, r2
 800dbc2:	4698      	movls	r8, r3
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	f02b 0204 	bic.w	r2, fp, #4
 800dbca:	6123      	str	r3, [r4, #16]
 800dbcc:	6022      	str	r2, [r4, #0]
 800dbce:	f04f 0900 	mov.w	r9, #0
 800dbd2:	9700      	str	r7, [sp, #0]
 800dbd4:	4633      	mov	r3, r6
 800dbd6:	aa0b      	add	r2, sp, #44	; 0x2c
 800dbd8:	4621      	mov	r1, r4
 800dbda:	4628      	mov	r0, r5
 800dbdc:	f000 f9e6 	bl	800dfac <_printf_common>
 800dbe0:	3001      	adds	r0, #1
 800dbe2:	f040 808d 	bne.w	800dd00 <_printf_float+0x1d4>
 800dbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbea:	b00d      	add	sp, #52	; 0x34
 800dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf0:	4642      	mov	r2, r8
 800dbf2:	464b      	mov	r3, r9
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	f7f2 ff70 	bl	8000adc <__aeabi_dcmpun>
 800dbfc:	b110      	cbz	r0, 800dc04 <_printf_float+0xd8>
 800dbfe:	4a8c      	ldr	r2, [pc, #560]	; (800de30 <_printf_float+0x304>)
 800dc00:	4b8c      	ldr	r3, [pc, #560]	; (800de34 <_printf_float+0x308>)
 800dc02:	e7da      	b.n	800dbba <_printf_float+0x8e>
 800dc04:	6861      	ldr	r1, [r4, #4]
 800dc06:	1c4b      	adds	r3, r1, #1
 800dc08:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800dc0c:	a80a      	add	r0, sp, #40	; 0x28
 800dc0e:	d13e      	bne.n	800dc8e <_printf_float+0x162>
 800dc10:	2306      	movs	r3, #6
 800dc12:	6063      	str	r3, [r4, #4]
 800dc14:	2300      	movs	r3, #0
 800dc16:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dc1a:	ab09      	add	r3, sp, #36	; 0x24
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	ec49 8b10 	vmov	d0, r8, r9
 800dc22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc26:	6022      	str	r2, [r4, #0]
 800dc28:	f8cd a004 	str.w	sl, [sp, #4]
 800dc2c:	6861      	ldr	r1, [r4, #4]
 800dc2e:	4628      	mov	r0, r5
 800dc30:	f7ff fee7 	bl	800da02 <__cvt>
 800dc34:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800dc38:	2b47      	cmp	r3, #71	; 0x47
 800dc3a:	4680      	mov	r8, r0
 800dc3c:	d109      	bne.n	800dc52 <_printf_float+0x126>
 800dc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc40:	1cd8      	adds	r0, r3, #3
 800dc42:	db02      	blt.n	800dc4a <_printf_float+0x11e>
 800dc44:	6862      	ldr	r2, [r4, #4]
 800dc46:	4293      	cmp	r3, r2
 800dc48:	dd47      	ble.n	800dcda <_printf_float+0x1ae>
 800dc4a:	f1aa 0a02 	sub.w	sl, sl, #2
 800dc4e:	fa5f fa8a 	uxtb.w	sl, sl
 800dc52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dc56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc58:	d824      	bhi.n	800dca4 <_printf_float+0x178>
 800dc5a:	3901      	subs	r1, #1
 800dc5c:	4652      	mov	r2, sl
 800dc5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dc62:	9109      	str	r1, [sp, #36]	; 0x24
 800dc64:	f7ff ff2e 	bl	800dac4 <__exponent>
 800dc68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc6a:	1813      	adds	r3, r2, r0
 800dc6c:	2a01      	cmp	r2, #1
 800dc6e:	4681      	mov	r9, r0
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	dc02      	bgt.n	800dc7a <_printf_float+0x14e>
 800dc74:	6822      	ldr	r2, [r4, #0]
 800dc76:	07d1      	lsls	r1, r2, #31
 800dc78:	d501      	bpl.n	800dc7e <_printf_float+0x152>
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	6123      	str	r3, [r4, #16]
 800dc7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d0a5      	beq.n	800dbd2 <_printf_float+0xa6>
 800dc86:	232d      	movs	r3, #45	; 0x2d
 800dc88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc8c:	e7a1      	b.n	800dbd2 <_printf_float+0xa6>
 800dc8e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800dc92:	f000 8177 	beq.w	800df84 <_printf_float+0x458>
 800dc96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dc9a:	d1bb      	bne.n	800dc14 <_printf_float+0xe8>
 800dc9c:	2900      	cmp	r1, #0
 800dc9e:	d1b9      	bne.n	800dc14 <_printf_float+0xe8>
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7b6      	b.n	800dc12 <_printf_float+0xe6>
 800dca4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800dca8:	d119      	bne.n	800dcde <_printf_float+0x1b2>
 800dcaa:	2900      	cmp	r1, #0
 800dcac:	6863      	ldr	r3, [r4, #4]
 800dcae:	dd0c      	ble.n	800dcca <_printf_float+0x19e>
 800dcb0:	6121      	str	r1, [r4, #16]
 800dcb2:	b913      	cbnz	r3, 800dcba <_printf_float+0x18e>
 800dcb4:	6822      	ldr	r2, [r4, #0]
 800dcb6:	07d2      	lsls	r2, r2, #31
 800dcb8:	d502      	bpl.n	800dcc0 <_printf_float+0x194>
 800dcba:	3301      	adds	r3, #1
 800dcbc:	440b      	add	r3, r1
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc2:	65a3      	str	r3, [r4, #88]	; 0x58
 800dcc4:	f04f 0900 	mov.w	r9, #0
 800dcc8:	e7d9      	b.n	800dc7e <_printf_float+0x152>
 800dcca:	b913      	cbnz	r3, 800dcd2 <_printf_float+0x1a6>
 800dccc:	6822      	ldr	r2, [r4, #0]
 800dcce:	07d0      	lsls	r0, r2, #31
 800dcd0:	d501      	bpl.n	800dcd6 <_printf_float+0x1aa>
 800dcd2:	3302      	adds	r3, #2
 800dcd4:	e7f3      	b.n	800dcbe <_printf_float+0x192>
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e7f1      	b.n	800dcbe <_printf_float+0x192>
 800dcda:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dcde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dce2:	4293      	cmp	r3, r2
 800dce4:	db05      	blt.n	800dcf2 <_printf_float+0x1c6>
 800dce6:	6822      	ldr	r2, [r4, #0]
 800dce8:	6123      	str	r3, [r4, #16]
 800dcea:	07d1      	lsls	r1, r2, #31
 800dcec:	d5e8      	bpl.n	800dcc0 <_printf_float+0x194>
 800dcee:	3301      	adds	r3, #1
 800dcf0:	e7e5      	b.n	800dcbe <_printf_float+0x192>
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	bfd4      	ite	le
 800dcf6:	f1c3 0302 	rsble	r3, r3, #2
 800dcfa:	2301      	movgt	r3, #1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	e7de      	b.n	800dcbe <_printf_float+0x192>
 800dd00:	6823      	ldr	r3, [r4, #0]
 800dd02:	055a      	lsls	r2, r3, #21
 800dd04:	d407      	bmi.n	800dd16 <_printf_float+0x1ea>
 800dd06:	6923      	ldr	r3, [r4, #16]
 800dd08:	4642      	mov	r2, r8
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	47b8      	blx	r7
 800dd10:	3001      	adds	r0, #1
 800dd12:	d12b      	bne.n	800dd6c <_printf_float+0x240>
 800dd14:	e767      	b.n	800dbe6 <_printf_float+0xba>
 800dd16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dd1a:	f240 80dc 	bls.w	800ded6 <_printf_float+0x3aa>
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2300      	movs	r3, #0
 800dd22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd26:	f7f2 fea7 	bl	8000a78 <__aeabi_dcmpeq>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d033      	beq.n	800dd96 <_printf_float+0x26a>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	4a41      	ldr	r2, [pc, #260]	; (800de38 <_printf_float+0x30c>)
 800dd32:	4631      	mov	r1, r6
 800dd34:	4628      	mov	r0, r5
 800dd36:	47b8      	blx	r7
 800dd38:	3001      	adds	r0, #1
 800dd3a:	f43f af54 	beq.w	800dbe6 <_printf_float+0xba>
 800dd3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd42:	429a      	cmp	r2, r3
 800dd44:	db02      	blt.n	800dd4c <_printf_float+0x220>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	07d8      	lsls	r0, r3, #31
 800dd4a:	d50f      	bpl.n	800dd6c <_printf_float+0x240>
 800dd4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd50:	4631      	mov	r1, r6
 800dd52:	4628      	mov	r0, r5
 800dd54:	47b8      	blx	r7
 800dd56:	3001      	adds	r0, #1
 800dd58:	f43f af45 	beq.w	800dbe6 <_printf_float+0xba>
 800dd5c:	f04f 0800 	mov.w	r8, #0
 800dd60:	f104 091a 	add.w	r9, r4, #26
 800dd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd66:	3b01      	subs	r3, #1
 800dd68:	4543      	cmp	r3, r8
 800dd6a:	dc09      	bgt.n	800dd80 <_printf_float+0x254>
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	079b      	lsls	r3, r3, #30
 800dd70:	f100 8103 	bmi.w	800df7a <_printf_float+0x44e>
 800dd74:	68e0      	ldr	r0, [r4, #12]
 800dd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd78:	4298      	cmp	r0, r3
 800dd7a:	bfb8      	it	lt
 800dd7c:	4618      	movlt	r0, r3
 800dd7e:	e734      	b.n	800dbea <_printf_float+0xbe>
 800dd80:	2301      	movs	r3, #1
 800dd82:	464a      	mov	r2, r9
 800dd84:	4631      	mov	r1, r6
 800dd86:	4628      	mov	r0, r5
 800dd88:	47b8      	blx	r7
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	f43f af2b 	beq.w	800dbe6 <_printf_float+0xba>
 800dd90:	f108 0801 	add.w	r8, r8, #1
 800dd94:	e7e6      	b.n	800dd64 <_printf_float+0x238>
 800dd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	dc2b      	bgt.n	800ddf4 <_printf_float+0x2c8>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	4a26      	ldr	r2, [pc, #152]	; (800de38 <_printf_float+0x30c>)
 800dda0:	4631      	mov	r1, r6
 800dda2:	4628      	mov	r0, r5
 800dda4:	47b8      	blx	r7
 800dda6:	3001      	adds	r0, #1
 800dda8:	f43f af1d 	beq.w	800dbe6 <_printf_float+0xba>
 800ddac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddae:	b923      	cbnz	r3, 800ddba <_printf_float+0x28e>
 800ddb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb2:	b913      	cbnz	r3, 800ddba <_printf_float+0x28e>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	07d9      	lsls	r1, r3, #31
 800ddb8:	d5d8      	bpl.n	800dd6c <_printf_float+0x240>
 800ddba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	47b8      	blx	r7
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	f43f af0e 	beq.w	800dbe6 <_printf_float+0xba>
 800ddca:	f04f 0900 	mov.w	r9, #0
 800ddce:	f104 0a1a 	add.w	sl, r4, #26
 800ddd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd4:	425b      	negs	r3, r3
 800ddd6:	454b      	cmp	r3, r9
 800ddd8:	dc01      	bgt.n	800ddde <_printf_float+0x2b2>
 800ddda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dddc:	e794      	b.n	800dd08 <_printf_float+0x1dc>
 800ddde:	2301      	movs	r3, #1
 800dde0:	4652      	mov	r2, sl
 800dde2:	4631      	mov	r1, r6
 800dde4:	4628      	mov	r0, r5
 800dde6:	47b8      	blx	r7
 800dde8:	3001      	adds	r0, #1
 800ddea:	f43f aefc 	beq.w	800dbe6 <_printf_float+0xba>
 800ddee:	f109 0901 	add.w	r9, r9, #1
 800ddf2:	e7ee      	b.n	800ddd2 <_printf_float+0x2a6>
 800ddf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	bfa8      	it	ge
 800ddfc:	461a      	movge	r2, r3
 800ddfe:	2a00      	cmp	r2, #0
 800de00:	4691      	mov	r9, r2
 800de02:	dd07      	ble.n	800de14 <_printf_float+0x2e8>
 800de04:	4613      	mov	r3, r2
 800de06:	4631      	mov	r1, r6
 800de08:	4642      	mov	r2, r8
 800de0a:	4628      	mov	r0, r5
 800de0c:	47b8      	blx	r7
 800de0e:	3001      	adds	r0, #1
 800de10:	f43f aee9 	beq.w	800dbe6 <_printf_float+0xba>
 800de14:	f104 031a 	add.w	r3, r4, #26
 800de18:	f04f 0b00 	mov.w	fp, #0
 800de1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de20:	9306      	str	r3, [sp, #24]
 800de22:	e015      	b.n	800de50 <_printf_float+0x324>
 800de24:	7fefffff 	.word	0x7fefffff
 800de28:	080109f8 	.word	0x080109f8
 800de2c:	080109f4 	.word	0x080109f4
 800de30:	08010a00 	.word	0x08010a00
 800de34:	080109fc 	.word	0x080109fc
 800de38:	08010a04 	.word	0x08010a04
 800de3c:	2301      	movs	r3, #1
 800de3e:	9a06      	ldr	r2, [sp, #24]
 800de40:	4631      	mov	r1, r6
 800de42:	4628      	mov	r0, r5
 800de44:	47b8      	blx	r7
 800de46:	3001      	adds	r0, #1
 800de48:	f43f aecd 	beq.w	800dbe6 <_printf_float+0xba>
 800de4c:	f10b 0b01 	add.w	fp, fp, #1
 800de50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800de54:	ebaa 0309 	sub.w	r3, sl, r9
 800de58:	455b      	cmp	r3, fp
 800de5a:	dcef      	bgt.n	800de3c <_printf_float+0x310>
 800de5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de60:	429a      	cmp	r2, r3
 800de62:	44d0      	add	r8, sl
 800de64:	db15      	blt.n	800de92 <_printf_float+0x366>
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	07da      	lsls	r2, r3, #31
 800de6a:	d412      	bmi.n	800de92 <_printf_float+0x366>
 800de6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de70:	eba3 020a 	sub.w	r2, r3, sl
 800de74:	eba3 0a01 	sub.w	sl, r3, r1
 800de78:	4592      	cmp	sl, r2
 800de7a:	bfa8      	it	ge
 800de7c:	4692      	movge	sl, r2
 800de7e:	f1ba 0f00 	cmp.w	sl, #0
 800de82:	dc0e      	bgt.n	800dea2 <_printf_float+0x376>
 800de84:	f04f 0800 	mov.w	r8, #0
 800de88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de8c:	f104 091a 	add.w	r9, r4, #26
 800de90:	e019      	b.n	800dec6 <_printf_float+0x39a>
 800de92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de96:	4631      	mov	r1, r6
 800de98:	4628      	mov	r0, r5
 800de9a:	47b8      	blx	r7
 800de9c:	3001      	adds	r0, #1
 800de9e:	d1e5      	bne.n	800de6c <_printf_float+0x340>
 800dea0:	e6a1      	b.n	800dbe6 <_printf_float+0xba>
 800dea2:	4653      	mov	r3, sl
 800dea4:	4642      	mov	r2, r8
 800dea6:	4631      	mov	r1, r6
 800dea8:	4628      	mov	r0, r5
 800deaa:	47b8      	blx	r7
 800deac:	3001      	adds	r0, #1
 800deae:	d1e9      	bne.n	800de84 <_printf_float+0x358>
 800deb0:	e699      	b.n	800dbe6 <_printf_float+0xba>
 800deb2:	2301      	movs	r3, #1
 800deb4:	464a      	mov	r2, r9
 800deb6:	4631      	mov	r1, r6
 800deb8:	4628      	mov	r0, r5
 800deba:	47b8      	blx	r7
 800debc:	3001      	adds	r0, #1
 800debe:	f43f ae92 	beq.w	800dbe6 <_printf_float+0xba>
 800dec2:	f108 0801 	add.w	r8, r8, #1
 800dec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800deca:	1a9b      	subs	r3, r3, r2
 800decc:	eba3 030a 	sub.w	r3, r3, sl
 800ded0:	4543      	cmp	r3, r8
 800ded2:	dcee      	bgt.n	800deb2 <_printf_float+0x386>
 800ded4:	e74a      	b.n	800dd6c <_printf_float+0x240>
 800ded6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ded8:	2a01      	cmp	r2, #1
 800deda:	dc01      	bgt.n	800dee0 <_printf_float+0x3b4>
 800dedc:	07db      	lsls	r3, r3, #31
 800dede:	d53a      	bpl.n	800df56 <_printf_float+0x42a>
 800dee0:	2301      	movs	r3, #1
 800dee2:	4642      	mov	r2, r8
 800dee4:	4631      	mov	r1, r6
 800dee6:	4628      	mov	r0, r5
 800dee8:	47b8      	blx	r7
 800deea:	3001      	adds	r0, #1
 800deec:	f43f ae7b 	beq.w	800dbe6 <_printf_float+0xba>
 800def0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800def4:	4631      	mov	r1, r6
 800def6:	4628      	mov	r0, r5
 800def8:	47b8      	blx	r7
 800defa:	3001      	adds	r0, #1
 800defc:	f108 0801 	add.w	r8, r8, #1
 800df00:	f43f ae71 	beq.w	800dbe6 <_printf_float+0xba>
 800df04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df06:	2200      	movs	r2, #0
 800df08:	f103 3aff 	add.w	sl, r3, #4294967295
 800df0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df10:	2300      	movs	r3, #0
 800df12:	f7f2 fdb1 	bl	8000a78 <__aeabi_dcmpeq>
 800df16:	b9c8      	cbnz	r0, 800df4c <_printf_float+0x420>
 800df18:	4653      	mov	r3, sl
 800df1a:	4642      	mov	r2, r8
 800df1c:	4631      	mov	r1, r6
 800df1e:	4628      	mov	r0, r5
 800df20:	47b8      	blx	r7
 800df22:	3001      	adds	r0, #1
 800df24:	d10e      	bne.n	800df44 <_printf_float+0x418>
 800df26:	e65e      	b.n	800dbe6 <_printf_float+0xba>
 800df28:	2301      	movs	r3, #1
 800df2a:	4652      	mov	r2, sl
 800df2c:	4631      	mov	r1, r6
 800df2e:	4628      	mov	r0, r5
 800df30:	47b8      	blx	r7
 800df32:	3001      	adds	r0, #1
 800df34:	f43f ae57 	beq.w	800dbe6 <_printf_float+0xba>
 800df38:	f108 0801 	add.w	r8, r8, #1
 800df3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3e:	3b01      	subs	r3, #1
 800df40:	4543      	cmp	r3, r8
 800df42:	dcf1      	bgt.n	800df28 <_printf_float+0x3fc>
 800df44:	464b      	mov	r3, r9
 800df46:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df4a:	e6de      	b.n	800dd0a <_printf_float+0x1de>
 800df4c:	f04f 0800 	mov.w	r8, #0
 800df50:	f104 0a1a 	add.w	sl, r4, #26
 800df54:	e7f2      	b.n	800df3c <_printf_float+0x410>
 800df56:	2301      	movs	r3, #1
 800df58:	e7df      	b.n	800df1a <_printf_float+0x3ee>
 800df5a:	2301      	movs	r3, #1
 800df5c:	464a      	mov	r2, r9
 800df5e:	4631      	mov	r1, r6
 800df60:	4628      	mov	r0, r5
 800df62:	47b8      	blx	r7
 800df64:	3001      	adds	r0, #1
 800df66:	f43f ae3e 	beq.w	800dbe6 <_printf_float+0xba>
 800df6a:	f108 0801 	add.w	r8, r8, #1
 800df6e:	68e3      	ldr	r3, [r4, #12]
 800df70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	4543      	cmp	r3, r8
 800df76:	dcf0      	bgt.n	800df5a <_printf_float+0x42e>
 800df78:	e6fc      	b.n	800dd74 <_printf_float+0x248>
 800df7a:	f04f 0800 	mov.w	r8, #0
 800df7e:	f104 0919 	add.w	r9, r4, #25
 800df82:	e7f4      	b.n	800df6e <_printf_float+0x442>
 800df84:	2900      	cmp	r1, #0
 800df86:	f43f ae8b 	beq.w	800dca0 <_printf_float+0x174>
 800df8a:	2300      	movs	r3, #0
 800df8c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800df90:	ab09      	add	r3, sp, #36	; 0x24
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	ec49 8b10 	vmov	d0, r8, r9
 800df98:	6022      	str	r2, [r4, #0]
 800df9a:	f8cd a004 	str.w	sl, [sp, #4]
 800df9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f7ff fd2d 	bl	800da02 <__cvt>
 800dfa8:	4680      	mov	r8, r0
 800dfaa:	e648      	b.n	800dc3e <_printf_float+0x112>

0800dfac <_printf_common>:
 800dfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb0:	4691      	mov	r9, r2
 800dfb2:	461f      	mov	r7, r3
 800dfb4:	688a      	ldr	r2, [r1, #8]
 800dfb6:	690b      	ldr	r3, [r1, #16]
 800dfb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	bfb8      	it	lt
 800dfc0:	4613      	movlt	r3, r2
 800dfc2:	f8c9 3000 	str.w	r3, [r9]
 800dfc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460c      	mov	r4, r1
 800dfce:	b112      	cbz	r2, 800dfd6 <_printf_common+0x2a>
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	f8c9 3000 	str.w	r3, [r9]
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	0699      	lsls	r1, r3, #26
 800dfda:	bf42      	ittt	mi
 800dfdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dfe0:	3302      	addmi	r3, #2
 800dfe2:	f8c9 3000 	strmi.w	r3, [r9]
 800dfe6:	6825      	ldr	r5, [r4, #0]
 800dfe8:	f015 0506 	ands.w	r5, r5, #6
 800dfec:	d107      	bne.n	800dffe <_printf_common+0x52>
 800dfee:	f104 0a19 	add.w	sl, r4, #25
 800dff2:	68e3      	ldr	r3, [r4, #12]
 800dff4:	f8d9 2000 	ldr.w	r2, [r9]
 800dff8:	1a9b      	subs	r3, r3, r2
 800dffa:	42ab      	cmp	r3, r5
 800dffc:	dc28      	bgt.n	800e050 <_printf_common+0xa4>
 800dffe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e002:	6822      	ldr	r2, [r4, #0]
 800e004:	3300      	adds	r3, #0
 800e006:	bf18      	it	ne
 800e008:	2301      	movne	r3, #1
 800e00a:	0692      	lsls	r2, r2, #26
 800e00c:	d42d      	bmi.n	800e06a <_printf_common+0xbe>
 800e00e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e012:	4639      	mov	r1, r7
 800e014:	4630      	mov	r0, r6
 800e016:	47c0      	blx	r8
 800e018:	3001      	adds	r0, #1
 800e01a:	d020      	beq.n	800e05e <_printf_common+0xb2>
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	68e5      	ldr	r5, [r4, #12]
 800e020:	f8d9 2000 	ldr.w	r2, [r9]
 800e024:	f003 0306 	and.w	r3, r3, #6
 800e028:	2b04      	cmp	r3, #4
 800e02a:	bf08      	it	eq
 800e02c:	1aad      	subeq	r5, r5, r2
 800e02e:	68a3      	ldr	r3, [r4, #8]
 800e030:	6922      	ldr	r2, [r4, #16]
 800e032:	bf0c      	ite	eq
 800e034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e038:	2500      	movne	r5, #0
 800e03a:	4293      	cmp	r3, r2
 800e03c:	bfc4      	itt	gt
 800e03e:	1a9b      	subgt	r3, r3, r2
 800e040:	18ed      	addgt	r5, r5, r3
 800e042:	f04f 0900 	mov.w	r9, #0
 800e046:	341a      	adds	r4, #26
 800e048:	454d      	cmp	r5, r9
 800e04a:	d11a      	bne.n	800e082 <_printf_common+0xd6>
 800e04c:	2000      	movs	r0, #0
 800e04e:	e008      	b.n	800e062 <_printf_common+0xb6>
 800e050:	2301      	movs	r3, #1
 800e052:	4652      	mov	r2, sl
 800e054:	4639      	mov	r1, r7
 800e056:	4630      	mov	r0, r6
 800e058:	47c0      	blx	r8
 800e05a:	3001      	adds	r0, #1
 800e05c:	d103      	bne.n	800e066 <_printf_common+0xba>
 800e05e:	f04f 30ff 	mov.w	r0, #4294967295
 800e062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e066:	3501      	adds	r5, #1
 800e068:	e7c3      	b.n	800dff2 <_printf_common+0x46>
 800e06a:	18e1      	adds	r1, r4, r3
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	2030      	movs	r0, #48	; 0x30
 800e070:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e074:	4422      	add	r2, r4
 800e076:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e07a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e07e:	3302      	adds	r3, #2
 800e080:	e7c5      	b.n	800e00e <_printf_common+0x62>
 800e082:	2301      	movs	r3, #1
 800e084:	4622      	mov	r2, r4
 800e086:	4639      	mov	r1, r7
 800e088:	4630      	mov	r0, r6
 800e08a:	47c0      	blx	r8
 800e08c:	3001      	adds	r0, #1
 800e08e:	d0e6      	beq.n	800e05e <_printf_common+0xb2>
 800e090:	f109 0901 	add.w	r9, r9, #1
 800e094:	e7d8      	b.n	800e048 <_printf_common+0x9c>
	...

0800e098 <_printf_i>:
 800e098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e09c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	7e09      	ldrb	r1, [r1, #24]
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	296e      	cmp	r1, #110	; 0x6e
 800e0a8:	4617      	mov	r7, r2
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	4698      	mov	r8, r3
 800e0ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0b0:	f000 80b3 	beq.w	800e21a <_printf_i+0x182>
 800e0b4:	d822      	bhi.n	800e0fc <_printf_i+0x64>
 800e0b6:	2963      	cmp	r1, #99	; 0x63
 800e0b8:	d036      	beq.n	800e128 <_printf_i+0x90>
 800e0ba:	d80a      	bhi.n	800e0d2 <_printf_i+0x3a>
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	f000 80b9 	beq.w	800e234 <_printf_i+0x19c>
 800e0c2:	2958      	cmp	r1, #88	; 0x58
 800e0c4:	f000 8083 	beq.w	800e1ce <_printf_i+0x136>
 800e0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e0d0:	e032      	b.n	800e138 <_printf_i+0xa0>
 800e0d2:	2964      	cmp	r1, #100	; 0x64
 800e0d4:	d001      	beq.n	800e0da <_printf_i+0x42>
 800e0d6:	2969      	cmp	r1, #105	; 0x69
 800e0d8:	d1f6      	bne.n	800e0c8 <_printf_i+0x30>
 800e0da:	6820      	ldr	r0, [r4, #0]
 800e0dc:	6813      	ldr	r3, [r2, #0]
 800e0de:	0605      	lsls	r5, r0, #24
 800e0e0:	f103 0104 	add.w	r1, r3, #4
 800e0e4:	d52a      	bpl.n	800e13c <_printf_i+0xa4>
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6011      	str	r1, [r2, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	da03      	bge.n	800e0f6 <_printf_i+0x5e>
 800e0ee:	222d      	movs	r2, #45	; 0x2d
 800e0f0:	425b      	negs	r3, r3
 800e0f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e0f6:	486f      	ldr	r0, [pc, #444]	; (800e2b4 <_printf_i+0x21c>)
 800e0f8:	220a      	movs	r2, #10
 800e0fa:	e039      	b.n	800e170 <_printf_i+0xd8>
 800e0fc:	2973      	cmp	r1, #115	; 0x73
 800e0fe:	f000 809d 	beq.w	800e23c <_printf_i+0x1a4>
 800e102:	d808      	bhi.n	800e116 <_printf_i+0x7e>
 800e104:	296f      	cmp	r1, #111	; 0x6f
 800e106:	d020      	beq.n	800e14a <_printf_i+0xb2>
 800e108:	2970      	cmp	r1, #112	; 0x70
 800e10a:	d1dd      	bne.n	800e0c8 <_printf_i+0x30>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	f043 0320 	orr.w	r3, r3, #32
 800e112:	6023      	str	r3, [r4, #0]
 800e114:	e003      	b.n	800e11e <_printf_i+0x86>
 800e116:	2975      	cmp	r1, #117	; 0x75
 800e118:	d017      	beq.n	800e14a <_printf_i+0xb2>
 800e11a:	2978      	cmp	r1, #120	; 0x78
 800e11c:	d1d4      	bne.n	800e0c8 <_printf_i+0x30>
 800e11e:	2378      	movs	r3, #120	; 0x78
 800e120:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e124:	4864      	ldr	r0, [pc, #400]	; (800e2b8 <_printf_i+0x220>)
 800e126:	e055      	b.n	800e1d4 <_printf_i+0x13c>
 800e128:	6813      	ldr	r3, [r2, #0]
 800e12a:	1d19      	adds	r1, r3, #4
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	6011      	str	r1, [r2, #0]
 800e130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e138:	2301      	movs	r3, #1
 800e13a:	e08c      	b.n	800e256 <_printf_i+0x1be>
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6011      	str	r1, [r2, #0]
 800e140:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e144:	bf18      	it	ne
 800e146:	b21b      	sxthne	r3, r3
 800e148:	e7cf      	b.n	800e0ea <_printf_i+0x52>
 800e14a:	6813      	ldr	r3, [r2, #0]
 800e14c:	6825      	ldr	r5, [r4, #0]
 800e14e:	1d18      	adds	r0, r3, #4
 800e150:	6010      	str	r0, [r2, #0]
 800e152:	0628      	lsls	r0, r5, #24
 800e154:	d501      	bpl.n	800e15a <_printf_i+0xc2>
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	e002      	b.n	800e160 <_printf_i+0xc8>
 800e15a:	0668      	lsls	r0, r5, #25
 800e15c:	d5fb      	bpl.n	800e156 <_printf_i+0xbe>
 800e15e:	881b      	ldrh	r3, [r3, #0]
 800e160:	4854      	ldr	r0, [pc, #336]	; (800e2b4 <_printf_i+0x21c>)
 800e162:	296f      	cmp	r1, #111	; 0x6f
 800e164:	bf14      	ite	ne
 800e166:	220a      	movne	r2, #10
 800e168:	2208      	moveq	r2, #8
 800e16a:	2100      	movs	r1, #0
 800e16c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e170:	6865      	ldr	r5, [r4, #4]
 800e172:	60a5      	str	r5, [r4, #8]
 800e174:	2d00      	cmp	r5, #0
 800e176:	f2c0 8095 	blt.w	800e2a4 <_printf_i+0x20c>
 800e17a:	6821      	ldr	r1, [r4, #0]
 800e17c:	f021 0104 	bic.w	r1, r1, #4
 800e180:	6021      	str	r1, [r4, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d13d      	bne.n	800e202 <_printf_i+0x16a>
 800e186:	2d00      	cmp	r5, #0
 800e188:	f040 808e 	bne.w	800e2a8 <_printf_i+0x210>
 800e18c:	4665      	mov	r5, ip
 800e18e:	2a08      	cmp	r2, #8
 800e190:	d10b      	bne.n	800e1aa <_printf_i+0x112>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	07db      	lsls	r3, r3, #31
 800e196:	d508      	bpl.n	800e1aa <_printf_i+0x112>
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	6862      	ldr	r2, [r4, #4]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	bfde      	ittt	le
 800e1a0:	2330      	movle	r3, #48	; 0x30
 800e1a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1aa:	ebac 0305 	sub.w	r3, ip, r5
 800e1ae:	6123      	str	r3, [r4, #16]
 800e1b0:	f8cd 8000 	str.w	r8, [sp]
 800e1b4:	463b      	mov	r3, r7
 800e1b6:	aa03      	add	r2, sp, #12
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f7ff fef6 	bl	800dfac <_printf_common>
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d14d      	bne.n	800e260 <_printf_i+0x1c8>
 800e1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c8:	b005      	add	sp, #20
 800e1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ce:	4839      	ldr	r0, [pc, #228]	; (800e2b4 <_printf_i+0x21c>)
 800e1d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e1d4:	6813      	ldr	r3, [r2, #0]
 800e1d6:	6821      	ldr	r1, [r4, #0]
 800e1d8:	1d1d      	adds	r5, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	6015      	str	r5, [r2, #0]
 800e1de:	060a      	lsls	r2, r1, #24
 800e1e0:	d50b      	bpl.n	800e1fa <_printf_i+0x162>
 800e1e2:	07ca      	lsls	r2, r1, #31
 800e1e4:	bf44      	itt	mi
 800e1e6:	f041 0120 	orrmi.w	r1, r1, #32
 800e1ea:	6021      	strmi	r1, [r4, #0]
 800e1ec:	b91b      	cbnz	r3, 800e1f6 <_printf_i+0x15e>
 800e1ee:	6822      	ldr	r2, [r4, #0]
 800e1f0:	f022 0220 	bic.w	r2, r2, #32
 800e1f4:	6022      	str	r2, [r4, #0]
 800e1f6:	2210      	movs	r2, #16
 800e1f8:	e7b7      	b.n	800e16a <_printf_i+0xd2>
 800e1fa:	064d      	lsls	r5, r1, #25
 800e1fc:	bf48      	it	mi
 800e1fe:	b29b      	uxthmi	r3, r3
 800e200:	e7ef      	b.n	800e1e2 <_printf_i+0x14a>
 800e202:	4665      	mov	r5, ip
 800e204:	fbb3 f1f2 	udiv	r1, r3, r2
 800e208:	fb02 3311 	mls	r3, r2, r1, r3
 800e20c:	5cc3      	ldrb	r3, [r0, r3]
 800e20e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e212:	460b      	mov	r3, r1
 800e214:	2900      	cmp	r1, #0
 800e216:	d1f5      	bne.n	800e204 <_printf_i+0x16c>
 800e218:	e7b9      	b.n	800e18e <_printf_i+0xf6>
 800e21a:	6813      	ldr	r3, [r2, #0]
 800e21c:	6825      	ldr	r5, [r4, #0]
 800e21e:	6961      	ldr	r1, [r4, #20]
 800e220:	1d18      	adds	r0, r3, #4
 800e222:	6010      	str	r0, [r2, #0]
 800e224:	0628      	lsls	r0, r5, #24
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	d501      	bpl.n	800e22e <_printf_i+0x196>
 800e22a:	6019      	str	r1, [r3, #0]
 800e22c:	e002      	b.n	800e234 <_printf_i+0x19c>
 800e22e:	066a      	lsls	r2, r5, #25
 800e230:	d5fb      	bpl.n	800e22a <_printf_i+0x192>
 800e232:	8019      	strh	r1, [r3, #0]
 800e234:	2300      	movs	r3, #0
 800e236:	6123      	str	r3, [r4, #16]
 800e238:	4665      	mov	r5, ip
 800e23a:	e7b9      	b.n	800e1b0 <_printf_i+0x118>
 800e23c:	6813      	ldr	r3, [r2, #0]
 800e23e:	1d19      	adds	r1, r3, #4
 800e240:	6011      	str	r1, [r2, #0]
 800e242:	681d      	ldr	r5, [r3, #0]
 800e244:	6862      	ldr	r2, [r4, #4]
 800e246:	2100      	movs	r1, #0
 800e248:	4628      	mov	r0, r5
 800e24a:	f7f1 ffa1 	bl	8000190 <memchr>
 800e24e:	b108      	cbz	r0, 800e254 <_printf_i+0x1bc>
 800e250:	1b40      	subs	r0, r0, r5
 800e252:	6060      	str	r0, [r4, #4]
 800e254:	6863      	ldr	r3, [r4, #4]
 800e256:	6123      	str	r3, [r4, #16]
 800e258:	2300      	movs	r3, #0
 800e25a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e25e:	e7a7      	b.n	800e1b0 <_printf_i+0x118>
 800e260:	6923      	ldr	r3, [r4, #16]
 800e262:	462a      	mov	r2, r5
 800e264:	4639      	mov	r1, r7
 800e266:	4630      	mov	r0, r6
 800e268:	47c0      	blx	r8
 800e26a:	3001      	adds	r0, #1
 800e26c:	d0aa      	beq.n	800e1c4 <_printf_i+0x12c>
 800e26e:	6823      	ldr	r3, [r4, #0]
 800e270:	079b      	lsls	r3, r3, #30
 800e272:	d413      	bmi.n	800e29c <_printf_i+0x204>
 800e274:	68e0      	ldr	r0, [r4, #12]
 800e276:	9b03      	ldr	r3, [sp, #12]
 800e278:	4298      	cmp	r0, r3
 800e27a:	bfb8      	it	lt
 800e27c:	4618      	movlt	r0, r3
 800e27e:	e7a3      	b.n	800e1c8 <_printf_i+0x130>
 800e280:	2301      	movs	r3, #1
 800e282:	464a      	mov	r2, r9
 800e284:	4639      	mov	r1, r7
 800e286:	4630      	mov	r0, r6
 800e288:	47c0      	blx	r8
 800e28a:	3001      	adds	r0, #1
 800e28c:	d09a      	beq.n	800e1c4 <_printf_i+0x12c>
 800e28e:	3501      	adds	r5, #1
 800e290:	68e3      	ldr	r3, [r4, #12]
 800e292:	9a03      	ldr	r2, [sp, #12]
 800e294:	1a9b      	subs	r3, r3, r2
 800e296:	42ab      	cmp	r3, r5
 800e298:	dcf2      	bgt.n	800e280 <_printf_i+0x1e8>
 800e29a:	e7eb      	b.n	800e274 <_printf_i+0x1dc>
 800e29c:	2500      	movs	r5, #0
 800e29e:	f104 0919 	add.w	r9, r4, #25
 800e2a2:	e7f5      	b.n	800e290 <_printf_i+0x1f8>
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1ac      	bne.n	800e202 <_printf_i+0x16a>
 800e2a8:	7803      	ldrb	r3, [r0, #0]
 800e2aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2b2:	e76c      	b.n	800e18e <_printf_i+0xf6>
 800e2b4:	08010a06 	.word	0x08010a06
 800e2b8:	08010a17 	.word	0x08010a17

0800e2bc <iprintf>:
 800e2bc:	b40f      	push	{r0, r1, r2, r3}
 800e2be:	4b0a      	ldr	r3, [pc, #40]	; (800e2e8 <iprintf+0x2c>)
 800e2c0:	b513      	push	{r0, r1, r4, lr}
 800e2c2:	681c      	ldr	r4, [r3, #0]
 800e2c4:	b124      	cbz	r4, 800e2d0 <iprintf+0x14>
 800e2c6:	69a3      	ldr	r3, [r4, #24]
 800e2c8:	b913      	cbnz	r3, 800e2d0 <iprintf+0x14>
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f001 f868 	bl	800f3a0 <__sinit>
 800e2d0:	ab05      	add	r3, sp, #20
 800e2d2:	9a04      	ldr	r2, [sp, #16]
 800e2d4:	68a1      	ldr	r1, [r4, #8]
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f001 fd21 	bl	800fd20 <_vfiprintf_r>
 800e2de:	b002      	add	sp, #8
 800e2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2e4:	b004      	add	sp, #16
 800e2e6:	4770      	bx	lr
 800e2e8:	20000024 	.word	0x20000024

0800e2ec <_puts_r>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	460e      	mov	r6, r1
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	b118      	cbz	r0, 800e2fc <_puts_r+0x10>
 800e2f4:	6983      	ldr	r3, [r0, #24]
 800e2f6:	b90b      	cbnz	r3, 800e2fc <_puts_r+0x10>
 800e2f8:	f001 f852 	bl	800f3a0 <__sinit>
 800e2fc:	69ab      	ldr	r3, [r5, #24]
 800e2fe:	68ac      	ldr	r4, [r5, #8]
 800e300:	b913      	cbnz	r3, 800e308 <_puts_r+0x1c>
 800e302:	4628      	mov	r0, r5
 800e304:	f001 f84c 	bl	800f3a0 <__sinit>
 800e308:	4b23      	ldr	r3, [pc, #140]	; (800e398 <_puts_r+0xac>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	d117      	bne.n	800e33e <_puts_r+0x52>
 800e30e:	686c      	ldr	r4, [r5, #4]
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	071b      	lsls	r3, r3, #28
 800e314:	d51d      	bpl.n	800e352 <_puts_r+0x66>
 800e316:	6923      	ldr	r3, [r4, #16]
 800e318:	b1db      	cbz	r3, 800e352 <_puts_r+0x66>
 800e31a:	3e01      	subs	r6, #1
 800e31c:	68a3      	ldr	r3, [r4, #8]
 800e31e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e322:	3b01      	subs	r3, #1
 800e324:	60a3      	str	r3, [r4, #8]
 800e326:	b9e9      	cbnz	r1, 800e364 <_puts_r+0x78>
 800e328:	2b00      	cmp	r3, #0
 800e32a:	da2e      	bge.n	800e38a <_puts_r+0x9e>
 800e32c:	4622      	mov	r2, r4
 800e32e:	210a      	movs	r1, #10
 800e330:	4628      	mov	r0, r5
 800e332:	f000 f83f 	bl	800e3b4 <__swbuf_r>
 800e336:	3001      	adds	r0, #1
 800e338:	d011      	beq.n	800e35e <_puts_r+0x72>
 800e33a:	200a      	movs	r0, #10
 800e33c:	e011      	b.n	800e362 <_puts_r+0x76>
 800e33e:	4b17      	ldr	r3, [pc, #92]	; (800e39c <_puts_r+0xb0>)
 800e340:	429c      	cmp	r4, r3
 800e342:	d101      	bne.n	800e348 <_puts_r+0x5c>
 800e344:	68ac      	ldr	r4, [r5, #8]
 800e346:	e7e3      	b.n	800e310 <_puts_r+0x24>
 800e348:	4b15      	ldr	r3, [pc, #84]	; (800e3a0 <_puts_r+0xb4>)
 800e34a:	429c      	cmp	r4, r3
 800e34c:	bf08      	it	eq
 800e34e:	68ec      	ldreq	r4, [r5, #12]
 800e350:	e7de      	b.n	800e310 <_puts_r+0x24>
 800e352:	4621      	mov	r1, r4
 800e354:	4628      	mov	r0, r5
 800e356:	f000 f87f 	bl	800e458 <__swsetup_r>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d0dd      	beq.n	800e31a <_puts_r+0x2e>
 800e35e:	f04f 30ff 	mov.w	r0, #4294967295
 800e362:	bd70      	pop	{r4, r5, r6, pc}
 800e364:	2b00      	cmp	r3, #0
 800e366:	da04      	bge.n	800e372 <_puts_r+0x86>
 800e368:	69a2      	ldr	r2, [r4, #24]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	dc06      	bgt.n	800e37c <_puts_r+0x90>
 800e36e:	290a      	cmp	r1, #10
 800e370:	d004      	beq.n	800e37c <_puts_r+0x90>
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	1c5a      	adds	r2, r3, #1
 800e376:	6022      	str	r2, [r4, #0]
 800e378:	7019      	strb	r1, [r3, #0]
 800e37a:	e7cf      	b.n	800e31c <_puts_r+0x30>
 800e37c:	4622      	mov	r2, r4
 800e37e:	4628      	mov	r0, r5
 800e380:	f000 f818 	bl	800e3b4 <__swbuf_r>
 800e384:	3001      	adds	r0, #1
 800e386:	d1c9      	bne.n	800e31c <_puts_r+0x30>
 800e388:	e7e9      	b.n	800e35e <_puts_r+0x72>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	200a      	movs	r0, #10
 800e38e:	1c5a      	adds	r2, r3, #1
 800e390:	6022      	str	r2, [r4, #0]
 800e392:	7018      	strb	r0, [r3, #0]
 800e394:	e7e5      	b.n	800e362 <_puts_r+0x76>
 800e396:	bf00      	nop
 800e398:	08010a58 	.word	0x08010a58
 800e39c:	08010a78 	.word	0x08010a78
 800e3a0:	08010a38 	.word	0x08010a38

0800e3a4 <puts>:
 800e3a4:	4b02      	ldr	r3, [pc, #8]	; (800e3b0 <puts+0xc>)
 800e3a6:	4601      	mov	r1, r0
 800e3a8:	6818      	ldr	r0, [r3, #0]
 800e3aa:	f7ff bf9f 	b.w	800e2ec <_puts_r>
 800e3ae:	bf00      	nop
 800e3b0:	20000024 	.word	0x20000024

0800e3b4 <__swbuf_r>:
 800e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b6:	460e      	mov	r6, r1
 800e3b8:	4614      	mov	r4, r2
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	b118      	cbz	r0, 800e3c6 <__swbuf_r+0x12>
 800e3be:	6983      	ldr	r3, [r0, #24]
 800e3c0:	b90b      	cbnz	r3, 800e3c6 <__swbuf_r+0x12>
 800e3c2:	f000 ffed 	bl	800f3a0 <__sinit>
 800e3c6:	4b21      	ldr	r3, [pc, #132]	; (800e44c <__swbuf_r+0x98>)
 800e3c8:	429c      	cmp	r4, r3
 800e3ca:	d12a      	bne.n	800e422 <__swbuf_r+0x6e>
 800e3cc:	686c      	ldr	r4, [r5, #4]
 800e3ce:	69a3      	ldr	r3, [r4, #24]
 800e3d0:	60a3      	str	r3, [r4, #8]
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	071a      	lsls	r2, r3, #28
 800e3d6:	d52e      	bpl.n	800e436 <__swbuf_r+0x82>
 800e3d8:	6923      	ldr	r3, [r4, #16]
 800e3da:	b363      	cbz	r3, 800e436 <__swbuf_r+0x82>
 800e3dc:	6923      	ldr	r3, [r4, #16]
 800e3de:	6820      	ldr	r0, [r4, #0]
 800e3e0:	1ac0      	subs	r0, r0, r3
 800e3e2:	6963      	ldr	r3, [r4, #20]
 800e3e4:	b2f6      	uxtb	r6, r6
 800e3e6:	4283      	cmp	r3, r0
 800e3e8:	4637      	mov	r7, r6
 800e3ea:	dc04      	bgt.n	800e3f6 <__swbuf_r+0x42>
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f000 ff6c 	bl	800f2cc <_fflush_r>
 800e3f4:	bb28      	cbnz	r0, 800e442 <__swbuf_r+0x8e>
 800e3f6:	68a3      	ldr	r3, [r4, #8]
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	60a3      	str	r3, [r4, #8]
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	1c5a      	adds	r2, r3, #1
 800e400:	6022      	str	r2, [r4, #0]
 800e402:	701e      	strb	r6, [r3, #0]
 800e404:	6963      	ldr	r3, [r4, #20]
 800e406:	3001      	adds	r0, #1
 800e408:	4283      	cmp	r3, r0
 800e40a:	d004      	beq.n	800e416 <__swbuf_r+0x62>
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	07db      	lsls	r3, r3, #31
 800e410:	d519      	bpl.n	800e446 <__swbuf_r+0x92>
 800e412:	2e0a      	cmp	r6, #10
 800e414:	d117      	bne.n	800e446 <__swbuf_r+0x92>
 800e416:	4621      	mov	r1, r4
 800e418:	4628      	mov	r0, r5
 800e41a:	f000 ff57 	bl	800f2cc <_fflush_r>
 800e41e:	b190      	cbz	r0, 800e446 <__swbuf_r+0x92>
 800e420:	e00f      	b.n	800e442 <__swbuf_r+0x8e>
 800e422:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <__swbuf_r+0x9c>)
 800e424:	429c      	cmp	r4, r3
 800e426:	d101      	bne.n	800e42c <__swbuf_r+0x78>
 800e428:	68ac      	ldr	r4, [r5, #8]
 800e42a:	e7d0      	b.n	800e3ce <__swbuf_r+0x1a>
 800e42c:	4b09      	ldr	r3, [pc, #36]	; (800e454 <__swbuf_r+0xa0>)
 800e42e:	429c      	cmp	r4, r3
 800e430:	bf08      	it	eq
 800e432:	68ec      	ldreq	r4, [r5, #12]
 800e434:	e7cb      	b.n	800e3ce <__swbuf_r+0x1a>
 800e436:	4621      	mov	r1, r4
 800e438:	4628      	mov	r0, r5
 800e43a:	f000 f80d 	bl	800e458 <__swsetup_r>
 800e43e:	2800      	cmp	r0, #0
 800e440:	d0cc      	beq.n	800e3dc <__swbuf_r+0x28>
 800e442:	f04f 37ff 	mov.w	r7, #4294967295
 800e446:	4638      	mov	r0, r7
 800e448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e44a:	bf00      	nop
 800e44c:	08010a58 	.word	0x08010a58
 800e450:	08010a78 	.word	0x08010a78
 800e454:	08010a38 	.word	0x08010a38

0800e458 <__swsetup_r>:
 800e458:	4b32      	ldr	r3, [pc, #200]	; (800e524 <__swsetup_r+0xcc>)
 800e45a:	b570      	push	{r4, r5, r6, lr}
 800e45c:	681d      	ldr	r5, [r3, #0]
 800e45e:	4606      	mov	r6, r0
 800e460:	460c      	mov	r4, r1
 800e462:	b125      	cbz	r5, 800e46e <__swsetup_r+0x16>
 800e464:	69ab      	ldr	r3, [r5, #24]
 800e466:	b913      	cbnz	r3, 800e46e <__swsetup_r+0x16>
 800e468:	4628      	mov	r0, r5
 800e46a:	f000 ff99 	bl	800f3a0 <__sinit>
 800e46e:	4b2e      	ldr	r3, [pc, #184]	; (800e528 <__swsetup_r+0xd0>)
 800e470:	429c      	cmp	r4, r3
 800e472:	d10f      	bne.n	800e494 <__swsetup_r+0x3c>
 800e474:	686c      	ldr	r4, [r5, #4]
 800e476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	0715      	lsls	r5, r2, #28
 800e47e:	d42c      	bmi.n	800e4da <__swsetup_r+0x82>
 800e480:	06d0      	lsls	r0, r2, #27
 800e482:	d411      	bmi.n	800e4a8 <__swsetup_r+0x50>
 800e484:	2209      	movs	r2, #9
 800e486:	6032      	str	r2, [r6, #0]
 800e488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	f04f 30ff 	mov.w	r0, #4294967295
 800e492:	e03e      	b.n	800e512 <__swsetup_r+0xba>
 800e494:	4b25      	ldr	r3, [pc, #148]	; (800e52c <__swsetup_r+0xd4>)
 800e496:	429c      	cmp	r4, r3
 800e498:	d101      	bne.n	800e49e <__swsetup_r+0x46>
 800e49a:	68ac      	ldr	r4, [r5, #8]
 800e49c:	e7eb      	b.n	800e476 <__swsetup_r+0x1e>
 800e49e:	4b24      	ldr	r3, [pc, #144]	; (800e530 <__swsetup_r+0xd8>)
 800e4a0:	429c      	cmp	r4, r3
 800e4a2:	bf08      	it	eq
 800e4a4:	68ec      	ldreq	r4, [r5, #12]
 800e4a6:	e7e6      	b.n	800e476 <__swsetup_r+0x1e>
 800e4a8:	0751      	lsls	r1, r2, #29
 800e4aa:	d512      	bpl.n	800e4d2 <__swsetup_r+0x7a>
 800e4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4ae:	b141      	cbz	r1, 800e4c2 <__swsetup_r+0x6a>
 800e4b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4b4:	4299      	cmp	r1, r3
 800e4b6:	d002      	beq.n	800e4be <__swsetup_r+0x66>
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f001 fb5f 	bl	800fb7c <_free_r>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	6363      	str	r3, [r4, #52]	; 0x34
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4c8:	81a3      	strh	r3, [r4, #12]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	6063      	str	r3, [r4, #4]
 800e4ce:	6923      	ldr	r3, [r4, #16]
 800e4d0:	6023      	str	r3, [r4, #0]
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	f043 0308 	orr.w	r3, r3, #8
 800e4d8:	81a3      	strh	r3, [r4, #12]
 800e4da:	6923      	ldr	r3, [r4, #16]
 800e4dc:	b94b      	cbnz	r3, 800e4f2 <__swsetup_r+0x9a>
 800e4de:	89a3      	ldrh	r3, [r4, #12]
 800e4e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4e8:	d003      	beq.n	800e4f2 <__swsetup_r+0x9a>
 800e4ea:	4621      	mov	r1, r4
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	f001 f813 	bl	800f518 <__smakebuf_r>
 800e4f2:	89a2      	ldrh	r2, [r4, #12]
 800e4f4:	f012 0301 	ands.w	r3, r2, #1
 800e4f8:	d00c      	beq.n	800e514 <__swsetup_r+0xbc>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60a3      	str	r3, [r4, #8]
 800e4fe:	6963      	ldr	r3, [r4, #20]
 800e500:	425b      	negs	r3, r3
 800e502:	61a3      	str	r3, [r4, #24]
 800e504:	6923      	ldr	r3, [r4, #16]
 800e506:	b953      	cbnz	r3, 800e51e <__swsetup_r+0xc6>
 800e508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e50c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e510:	d1ba      	bne.n	800e488 <__swsetup_r+0x30>
 800e512:	bd70      	pop	{r4, r5, r6, pc}
 800e514:	0792      	lsls	r2, r2, #30
 800e516:	bf58      	it	pl
 800e518:	6963      	ldrpl	r3, [r4, #20]
 800e51a:	60a3      	str	r3, [r4, #8]
 800e51c:	e7f2      	b.n	800e504 <__swsetup_r+0xac>
 800e51e:	2000      	movs	r0, #0
 800e520:	e7f7      	b.n	800e512 <__swsetup_r+0xba>
 800e522:	bf00      	nop
 800e524:	20000024 	.word	0x20000024
 800e528:	08010a58 	.word	0x08010a58
 800e52c:	08010a78 	.word	0x08010a78
 800e530:	08010a38 	.word	0x08010a38

0800e534 <quorem>:
 800e534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e538:	6903      	ldr	r3, [r0, #16]
 800e53a:	690c      	ldr	r4, [r1, #16]
 800e53c:	42a3      	cmp	r3, r4
 800e53e:	4680      	mov	r8, r0
 800e540:	f2c0 8082 	blt.w	800e648 <quorem+0x114>
 800e544:	3c01      	subs	r4, #1
 800e546:	f101 0714 	add.w	r7, r1, #20
 800e54a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e54e:	f100 0614 	add.w	r6, r0, #20
 800e552:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e556:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e55a:	eb06 030c 	add.w	r3, r6, ip
 800e55e:	3501      	adds	r5, #1
 800e560:	eb07 090c 	add.w	r9, r7, ip
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	fbb0 f5f5 	udiv	r5, r0, r5
 800e56a:	b395      	cbz	r5, 800e5d2 <quorem+0x9e>
 800e56c:	f04f 0a00 	mov.w	sl, #0
 800e570:	4638      	mov	r0, r7
 800e572:	46b6      	mov	lr, r6
 800e574:	46d3      	mov	fp, sl
 800e576:	f850 2b04 	ldr.w	r2, [r0], #4
 800e57a:	b293      	uxth	r3, r2
 800e57c:	fb05 a303 	mla	r3, r5, r3, sl
 800e580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e584:	b29b      	uxth	r3, r3
 800e586:	ebab 0303 	sub.w	r3, fp, r3
 800e58a:	0c12      	lsrs	r2, r2, #16
 800e58c:	f8de b000 	ldr.w	fp, [lr]
 800e590:	fb05 a202 	mla	r2, r5, r2, sl
 800e594:	fa13 f38b 	uxtah	r3, r3, fp
 800e598:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e59c:	fa1f fb82 	uxth.w	fp, r2
 800e5a0:	f8de 2000 	ldr.w	r2, [lr]
 800e5a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e5a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5b2:	4581      	cmp	r9, r0
 800e5b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e5b8:	f84e 3b04 	str.w	r3, [lr], #4
 800e5bc:	d2db      	bcs.n	800e576 <quorem+0x42>
 800e5be:	f856 300c 	ldr.w	r3, [r6, ip]
 800e5c2:	b933      	cbnz	r3, 800e5d2 <quorem+0x9e>
 800e5c4:	9b01      	ldr	r3, [sp, #4]
 800e5c6:	3b04      	subs	r3, #4
 800e5c8:	429e      	cmp	r6, r3
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	d330      	bcc.n	800e630 <quorem+0xfc>
 800e5ce:	f8c8 4010 	str.w	r4, [r8, #16]
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	f001 f9fe 	bl	800f9d4 <__mcmp>
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	db25      	blt.n	800e628 <quorem+0xf4>
 800e5dc:	3501      	adds	r5, #1
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f04f 0c00 	mov.w	ip, #0
 800e5e4:	f857 2b04 	ldr.w	r2, [r7], #4
 800e5e8:	f8d0 e000 	ldr.w	lr, [r0]
 800e5ec:	b293      	uxth	r3, r2
 800e5ee:	ebac 0303 	sub.w	r3, ip, r3
 800e5f2:	0c12      	lsrs	r2, r2, #16
 800e5f4:	fa13 f38e 	uxtah	r3, r3, lr
 800e5f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e5fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e600:	b29b      	uxth	r3, r3
 800e602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e606:	45b9      	cmp	r9, r7
 800e608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e60c:	f840 3b04 	str.w	r3, [r0], #4
 800e610:	d2e8      	bcs.n	800e5e4 <quorem+0xb0>
 800e612:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e616:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e61a:	b92a      	cbnz	r2, 800e628 <quorem+0xf4>
 800e61c:	3b04      	subs	r3, #4
 800e61e:	429e      	cmp	r6, r3
 800e620:	461a      	mov	r2, r3
 800e622:	d30b      	bcc.n	800e63c <quorem+0x108>
 800e624:	f8c8 4010 	str.w	r4, [r8, #16]
 800e628:	4628      	mov	r0, r5
 800e62a:	b003      	add	sp, #12
 800e62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e630:	6812      	ldr	r2, [r2, #0]
 800e632:	3b04      	subs	r3, #4
 800e634:	2a00      	cmp	r2, #0
 800e636:	d1ca      	bne.n	800e5ce <quorem+0x9a>
 800e638:	3c01      	subs	r4, #1
 800e63a:	e7c5      	b.n	800e5c8 <quorem+0x94>
 800e63c:	6812      	ldr	r2, [r2, #0]
 800e63e:	3b04      	subs	r3, #4
 800e640:	2a00      	cmp	r2, #0
 800e642:	d1ef      	bne.n	800e624 <quorem+0xf0>
 800e644:	3c01      	subs	r4, #1
 800e646:	e7ea      	b.n	800e61e <quorem+0xea>
 800e648:	2000      	movs	r0, #0
 800e64a:	e7ee      	b.n	800e62a <quorem+0xf6>
 800e64c:	0000      	movs	r0, r0
	...

0800e650 <_dtoa_r>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	ec57 6b10 	vmov	r6, r7, d0
 800e658:	b097      	sub	sp, #92	; 0x5c
 800e65a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e65c:	9106      	str	r1, [sp, #24]
 800e65e:	4604      	mov	r4, r0
 800e660:	920b      	str	r2, [sp, #44]	; 0x2c
 800e662:	9312      	str	r3, [sp, #72]	; 0x48
 800e664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e668:	e9cd 6700 	strd	r6, r7, [sp]
 800e66c:	b93d      	cbnz	r5, 800e67e <_dtoa_r+0x2e>
 800e66e:	2010      	movs	r0, #16
 800e670:	f000 ff92 	bl	800f598 <malloc>
 800e674:	6260      	str	r0, [r4, #36]	; 0x24
 800e676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e67a:	6005      	str	r5, [r0, #0]
 800e67c:	60c5      	str	r5, [r0, #12]
 800e67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e680:	6819      	ldr	r1, [r3, #0]
 800e682:	b151      	cbz	r1, 800e69a <_dtoa_r+0x4a>
 800e684:	685a      	ldr	r2, [r3, #4]
 800e686:	604a      	str	r2, [r1, #4]
 800e688:	2301      	movs	r3, #1
 800e68a:	4093      	lsls	r3, r2
 800e68c:	608b      	str	r3, [r1, #8]
 800e68e:	4620      	mov	r0, r4
 800e690:	f000 ffbe 	bl	800f610 <_Bfree>
 800e694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e696:	2200      	movs	r2, #0
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	1e3b      	subs	r3, r7, #0
 800e69c:	bfbb      	ittet	lt
 800e69e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e6a2:	9301      	strlt	r3, [sp, #4]
 800e6a4:	2300      	movge	r3, #0
 800e6a6:	2201      	movlt	r2, #1
 800e6a8:	bfac      	ite	ge
 800e6aa:	f8c8 3000 	strge.w	r3, [r8]
 800e6ae:	f8c8 2000 	strlt.w	r2, [r8]
 800e6b2:	4baf      	ldr	r3, [pc, #700]	; (800e970 <_dtoa_r+0x320>)
 800e6b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e6b8:	ea33 0308 	bics.w	r3, r3, r8
 800e6bc:	d114      	bne.n	800e6e8 <_dtoa_r+0x98>
 800e6be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e6c4:	6013      	str	r3, [r2, #0]
 800e6c6:	9b00      	ldr	r3, [sp, #0]
 800e6c8:	b923      	cbnz	r3, 800e6d4 <_dtoa_r+0x84>
 800e6ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	f000 8542 	beq.w	800f158 <_dtoa_r+0xb08>
 800e6d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e984 <_dtoa_r+0x334>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 8544 	beq.w	800f168 <_dtoa_r+0xb18>
 800e6e0:	f10b 0303 	add.w	r3, fp, #3
 800e6e4:	f000 bd3e 	b.w	800f164 <_dtoa_r+0xb14>
 800e6e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	4639      	mov	r1, r7
 800e6f4:	f7f2 f9c0 	bl	8000a78 <__aeabi_dcmpeq>
 800e6f8:	4681      	mov	r9, r0
 800e6fa:	b168      	cbz	r0, 800e718 <_dtoa_r+0xc8>
 800e6fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6fe:	2301      	movs	r3, #1
 800e700:	6013      	str	r3, [r2, #0]
 800e702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 8524 	beq.w	800f152 <_dtoa_r+0xb02>
 800e70a:	4b9a      	ldr	r3, [pc, #616]	; (800e974 <_dtoa_r+0x324>)
 800e70c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e70e:	f103 3bff 	add.w	fp, r3, #4294967295
 800e712:	6013      	str	r3, [r2, #0]
 800e714:	f000 bd28 	b.w	800f168 <_dtoa_r+0xb18>
 800e718:	aa14      	add	r2, sp, #80	; 0x50
 800e71a:	a915      	add	r1, sp, #84	; 0x54
 800e71c:	ec47 6b10 	vmov	d0, r6, r7
 800e720:	4620      	mov	r0, r4
 800e722:	f001 f9ce 	bl	800fac2 <__d2b>
 800e726:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e72a:	9004      	str	r0, [sp, #16]
 800e72c:	2d00      	cmp	r5, #0
 800e72e:	d07c      	beq.n	800e82a <_dtoa_r+0x1da>
 800e730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e734:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e738:	46b2      	mov	sl, r6
 800e73a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e73e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e742:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e746:	2200      	movs	r2, #0
 800e748:	4b8b      	ldr	r3, [pc, #556]	; (800e978 <_dtoa_r+0x328>)
 800e74a:	4650      	mov	r0, sl
 800e74c:	4659      	mov	r1, fp
 800e74e:	f7f1 fd73 	bl	8000238 <__aeabi_dsub>
 800e752:	a381      	add	r3, pc, #516	; (adr r3, 800e958 <_dtoa_r+0x308>)
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	f7f1 ff26 	bl	80005a8 <__aeabi_dmul>
 800e75c:	a380      	add	r3, pc, #512	; (adr r3, 800e960 <_dtoa_r+0x310>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	f7f1 fd6b 	bl	800023c <__adddf3>
 800e766:	4606      	mov	r6, r0
 800e768:	4628      	mov	r0, r5
 800e76a:	460f      	mov	r7, r1
 800e76c:	f7f1 feb2 	bl	80004d4 <__aeabi_i2d>
 800e770:	a37d      	add	r3, pc, #500	; (adr r3, 800e968 <_dtoa_r+0x318>)
 800e772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e776:	f7f1 ff17 	bl	80005a8 <__aeabi_dmul>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	4630      	mov	r0, r6
 800e780:	4639      	mov	r1, r7
 800e782:	f7f1 fd5b 	bl	800023c <__adddf3>
 800e786:	4606      	mov	r6, r0
 800e788:	460f      	mov	r7, r1
 800e78a:	f7f2 f9bd 	bl	8000b08 <__aeabi_d2iz>
 800e78e:	2200      	movs	r2, #0
 800e790:	4682      	mov	sl, r0
 800e792:	2300      	movs	r3, #0
 800e794:	4630      	mov	r0, r6
 800e796:	4639      	mov	r1, r7
 800e798:	f7f2 f978 	bl	8000a8c <__aeabi_dcmplt>
 800e79c:	b148      	cbz	r0, 800e7b2 <_dtoa_r+0x162>
 800e79e:	4650      	mov	r0, sl
 800e7a0:	f7f1 fe98 	bl	80004d4 <__aeabi_i2d>
 800e7a4:	4632      	mov	r2, r6
 800e7a6:	463b      	mov	r3, r7
 800e7a8:	f7f2 f966 	bl	8000a78 <__aeabi_dcmpeq>
 800e7ac:	b908      	cbnz	r0, 800e7b2 <_dtoa_r+0x162>
 800e7ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7b2:	f1ba 0f16 	cmp.w	sl, #22
 800e7b6:	d859      	bhi.n	800e86c <_dtoa_r+0x21c>
 800e7b8:	4970      	ldr	r1, [pc, #448]	; (800e97c <_dtoa_r+0x32c>)
 800e7ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7c6:	f7f2 f97f 	bl	8000ac8 <__aeabi_dcmpgt>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d050      	beq.n	800e870 <_dtoa_r+0x220>
 800e7ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7d8:	1b5d      	subs	r5, r3, r5
 800e7da:	f1b5 0801 	subs.w	r8, r5, #1
 800e7de:	bf49      	itett	mi
 800e7e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800e7e4:	2300      	movpl	r3, #0
 800e7e6:	9305      	strmi	r3, [sp, #20]
 800e7e8:	f04f 0800 	movmi.w	r8, #0
 800e7ec:	bf58      	it	pl
 800e7ee:	9305      	strpl	r3, [sp, #20]
 800e7f0:	f1ba 0f00 	cmp.w	sl, #0
 800e7f4:	db3e      	blt.n	800e874 <_dtoa_r+0x224>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	44d0      	add	r8, sl
 800e7fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e7fe:	9307      	str	r3, [sp, #28]
 800e800:	9b06      	ldr	r3, [sp, #24]
 800e802:	2b09      	cmp	r3, #9
 800e804:	f200 8090 	bhi.w	800e928 <_dtoa_r+0x2d8>
 800e808:	2b05      	cmp	r3, #5
 800e80a:	bfc4      	itt	gt
 800e80c:	3b04      	subgt	r3, #4
 800e80e:	9306      	strgt	r3, [sp, #24]
 800e810:	9b06      	ldr	r3, [sp, #24]
 800e812:	f1a3 0302 	sub.w	r3, r3, #2
 800e816:	bfcc      	ite	gt
 800e818:	2500      	movgt	r5, #0
 800e81a:	2501      	movle	r5, #1
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	f200 808f 	bhi.w	800e940 <_dtoa_r+0x2f0>
 800e822:	e8df f003 	tbb	[pc, r3]
 800e826:	7f7d      	.short	0x7f7d
 800e828:	7131      	.short	0x7131
 800e82a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e82e:	441d      	add	r5, r3
 800e830:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e834:	2820      	cmp	r0, #32
 800e836:	dd13      	ble.n	800e860 <_dtoa_r+0x210>
 800e838:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e83c:	9b00      	ldr	r3, [sp, #0]
 800e83e:	fa08 f800 	lsl.w	r8, r8, r0
 800e842:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e846:	fa23 f000 	lsr.w	r0, r3, r0
 800e84a:	ea48 0000 	orr.w	r0, r8, r0
 800e84e:	f7f1 fe31 	bl	80004b4 <__aeabi_ui2d>
 800e852:	2301      	movs	r3, #1
 800e854:	4682      	mov	sl, r0
 800e856:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e85a:	3d01      	subs	r5, #1
 800e85c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e85e:	e772      	b.n	800e746 <_dtoa_r+0xf6>
 800e860:	9b00      	ldr	r3, [sp, #0]
 800e862:	f1c0 0020 	rsb	r0, r0, #32
 800e866:	fa03 f000 	lsl.w	r0, r3, r0
 800e86a:	e7f0      	b.n	800e84e <_dtoa_r+0x1fe>
 800e86c:	2301      	movs	r3, #1
 800e86e:	e7b1      	b.n	800e7d4 <_dtoa_r+0x184>
 800e870:	900f      	str	r0, [sp, #60]	; 0x3c
 800e872:	e7b0      	b.n	800e7d6 <_dtoa_r+0x186>
 800e874:	9b05      	ldr	r3, [sp, #20]
 800e876:	eba3 030a 	sub.w	r3, r3, sl
 800e87a:	9305      	str	r3, [sp, #20]
 800e87c:	f1ca 0300 	rsb	r3, sl, #0
 800e880:	9307      	str	r3, [sp, #28]
 800e882:	2300      	movs	r3, #0
 800e884:	930e      	str	r3, [sp, #56]	; 0x38
 800e886:	e7bb      	b.n	800e800 <_dtoa_r+0x1b0>
 800e888:	2301      	movs	r3, #1
 800e88a:	930a      	str	r3, [sp, #40]	; 0x28
 800e88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e88e:	2b00      	cmp	r3, #0
 800e890:	dd59      	ble.n	800e946 <_dtoa_r+0x2f6>
 800e892:	9302      	str	r3, [sp, #8]
 800e894:	4699      	mov	r9, r3
 800e896:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e898:	2200      	movs	r2, #0
 800e89a:	6072      	str	r2, [r6, #4]
 800e89c:	2204      	movs	r2, #4
 800e89e:	f102 0014 	add.w	r0, r2, #20
 800e8a2:	4298      	cmp	r0, r3
 800e8a4:	6871      	ldr	r1, [r6, #4]
 800e8a6:	d953      	bls.n	800e950 <_dtoa_r+0x300>
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f000 fe7d 	bl	800f5a8 <_Balloc>
 800e8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8b0:	6030      	str	r0, [r6, #0]
 800e8b2:	f1b9 0f0e 	cmp.w	r9, #14
 800e8b6:	f8d3 b000 	ldr.w	fp, [r3]
 800e8ba:	f200 80e6 	bhi.w	800ea8a <_dtoa_r+0x43a>
 800e8be:	2d00      	cmp	r5, #0
 800e8c0:	f000 80e3 	beq.w	800ea8a <_dtoa_r+0x43a>
 800e8c4:	ed9d 7b00 	vldr	d7, [sp]
 800e8c8:	f1ba 0f00 	cmp.w	sl, #0
 800e8cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e8d0:	dd74      	ble.n	800e9bc <_dtoa_r+0x36c>
 800e8d2:	4a2a      	ldr	r2, [pc, #168]	; (800e97c <_dtoa_r+0x32c>)
 800e8d4:	f00a 030f 	and.w	r3, sl, #15
 800e8d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e8dc:	ed93 7b00 	vldr	d7, [r3]
 800e8e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e8e4:	06f0      	lsls	r0, r6, #27
 800e8e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e8ea:	d565      	bpl.n	800e9b8 <_dtoa_r+0x368>
 800e8ec:	4b24      	ldr	r3, [pc, #144]	; (800e980 <_dtoa_r+0x330>)
 800e8ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e8f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8f6:	f7f1 ff81 	bl	80007fc <__aeabi_ddiv>
 800e8fa:	e9cd 0100 	strd	r0, r1, [sp]
 800e8fe:	f006 060f 	and.w	r6, r6, #15
 800e902:	2503      	movs	r5, #3
 800e904:	4f1e      	ldr	r7, [pc, #120]	; (800e980 <_dtoa_r+0x330>)
 800e906:	e04c      	b.n	800e9a2 <_dtoa_r+0x352>
 800e908:	2301      	movs	r3, #1
 800e90a:	930a      	str	r3, [sp, #40]	; 0x28
 800e90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e90e:	4453      	add	r3, sl
 800e910:	f103 0901 	add.w	r9, r3, #1
 800e914:	9302      	str	r3, [sp, #8]
 800e916:	464b      	mov	r3, r9
 800e918:	2b01      	cmp	r3, #1
 800e91a:	bfb8      	it	lt
 800e91c:	2301      	movlt	r3, #1
 800e91e:	e7ba      	b.n	800e896 <_dtoa_r+0x246>
 800e920:	2300      	movs	r3, #0
 800e922:	e7b2      	b.n	800e88a <_dtoa_r+0x23a>
 800e924:	2300      	movs	r3, #0
 800e926:	e7f0      	b.n	800e90a <_dtoa_r+0x2ba>
 800e928:	2501      	movs	r5, #1
 800e92a:	2300      	movs	r3, #0
 800e92c:	9306      	str	r3, [sp, #24]
 800e92e:	950a      	str	r5, [sp, #40]	; 0x28
 800e930:	f04f 33ff 	mov.w	r3, #4294967295
 800e934:	9302      	str	r3, [sp, #8]
 800e936:	4699      	mov	r9, r3
 800e938:	2200      	movs	r2, #0
 800e93a:	2312      	movs	r3, #18
 800e93c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e93e:	e7aa      	b.n	800e896 <_dtoa_r+0x246>
 800e940:	2301      	movs	r3, #1
 800e942:	930a      	str	r3, [sp, #40]	; 0x28
 800e944:	e7f4      	b.n	800e930 <_dtoa_r+0x2e0>
 800e946:	2301      	movs	r3, #1
 800e948:	9302      	str	r3, [sp, #8]
 800e94a:	4699      	mov	r9, r3
 800e94c:	461a      	mov	r2, r3
 800e94e:	e7f5      	b.n	800e93c <_dtoa_r+0x2ec>
 800e950:	3101      	adds	r1, #1
 800e952:	6071      	str	r1, [r6, #4]
 800e954:	0052      	lsls	r2, r2, #1
 800e956:	e7a2      	b.n	800e89e <_dtoa_r+0x24e>
 800e958:	636f4361 	.word	0x636f4361
 800e95c:	3fd287a7 	.word	0x3fd287a7
 800e960:	8b60c8b3 	.word	0x8b60c8b3
 800e964:	3fc68a28 	.word	0x3fc68a28
 800e968:	509f79fb 	.word	0x509f79fb
 800e96c:	3fd34413 	.word	0x3fd34413
 800e970:	7ff00000 	.word	0x7ff00000
 800e974:	08010a05 	.word	0x08010a05
 800e978:	3ff80000 	.word	0x3ff80000
 800e97c:	08010ac0 	.word	0x08010ac0
 800e980:	08010a98 	.word	0x08010a98
 800e984:	08010a31 	.word	0x08010a31
 800e988:	07f1      	lsls	r1, r6, #31
 800e98a:	d508      	bpl.n	800e99e <_dtoa_r+0x34e>
 800e98c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e990:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e994:	f7f1 fe08 	bl	80005a8 <__aeabi_dmul>
 800e998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e99c:	3501      	adds	r5, #1
 800e99e:	1076      	asrs	r6, r6, #1
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	2e00      	cmp	r6, #0
 800e9a4:	d1f0      	bne.n	800e988 <_dtoa_r+0x338>
 800e9a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e9aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9ae:	f7f1 ff25 	bl	80007fc <__aeabi_ddiv>
 800e9b2:	e9cd 0100 	strd	r0, r1, [sp]
 800e9b6:	e01a      	b.n	800e9ee <_dtoa_r+0x39e>
 800e9b8:	2502      	movs	r5, #2
 800e9ba:	e7a3      	b.n	800e904 <_dtoa_r+0x2b4>
 800e9bc:	f000 80a0 	beq.w	800eb00 <_dtoa_r+0x4b0>
 800e9c0:	f1ca 0600 	rsb	r6, sl, #0
 800e9c4:	4b9f      	ldr	r3, [pc, #636]	; (800ec44 <_dtoa_r+0x5f4>)
 800e9c6:	4fa0      	ldr	r7, [pc, #640]	; (800ec48 <_dtoa_r+0x5f8>)
 800e9c8:	f006 020f 	and.w	r2, r6, #15
 800e9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e9d8:	f7f1 fde6 	bl	80005a8 <__aeabi_dmul>
 800e9dc:	e9cd 0100 	strd	r0, r1, [sp]
 800e9e0:	1136      	asrs	r6, r6, #4
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	2502      	movs	r5, #2
 800e9e6:	2e00      	cmp	r6, #0
 800e9e8:	d17f      	bne.n	800eaea <_dtoa_r+0x49a>
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1e1      	bne.n	800e9b2 <_dtoa_r+0x362>
 800e9ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 8087 	beq.w	800eb04 <_dtoa_r+0x4b4>
 800e9f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	4b93      	ldr	r3, [pc, #588]	; (800ec4c <_dtoa_r+0x5fc>)
 800e9fe:	4630      	mov	r0, r6
 800ea00:	4639      	mov	r1, r7
 800ea02:	f7f2 f843 	bl	8000a8c <__aeabi_dcmplt>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d07c      	beq.n	800eb04 <_dtoa_r+0x4b4>
 800ea0a:	f1b9 0f00 	cmp.w	r9, #0
 800ea0e:	d079      	beq.n	800eb04 <_dtoa_r+0x4b4>
 800ea10:	9b02      	ldr	r3, [sp, #8]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	dd35      	ble.n	800ea82 <_dtoa_r+0x432>
 800ea16:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ea1a:	9308      	str	r3, [sp, #32]
 800ea1c:	4639      	mov	r1, r7
 800ea1e:	2200      	movs	r2, #0
 800ea20:	4b8b      	ldr	r3, [pc, #556]	; (800ec50 <_dtoa_r+0x600>)
 800ea22:	4630      	mov	r0, r6
 800ea24:	f7f1 fdc0 	bl	80005a8 <__aeabi_dmul>
 800ea28:	e9cd 0100 	strd	r0, r1, [sp]
 800ea2c:	9f02      	ldr	r7, [sp, #8]
 800ea2e:	3501      	adds	r5, #1
 800ea30:	4628      	mov	r0, r5
 800ea32:	f7f1 fd4f 	bl	80004d4 <__aeabi_i2d>
 800ea36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea3a:	f7f1 fdb5 	bl	80005a8 <__aeabi_dmul>
 800ea3e:	2200      	movs	r2, #0
 800ea40:	4b84      	ldr	r3, [pc, #528]	; (800ec54 <_dtoa_r+0x604>)
 800ea42:	f7f1 fbfb 	bl	800023c <__adddf3>
 800ea46:	4605      	mov	r5, r0
 800ea48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ea4c:	2f00      	cmp	r7, #0
 800ea4e:	d15d      	bne.n	800eb0c <_dtoa_r+0x4bc>
 800ea50:	2200      	movs	r2, #0
 800ea52:	4b81      	ldr	r3, [pc, #516]	; (800ec58 <_dtoa_r+0x608>)
 800ea54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea58:	f7f1 fbee 	bl	8000238 <__aeabi_dsub>
 800ea5c:	462a      	mov	r2, r5
 800ea5e:	4633      	mov	r3, r6
 800ea60:	e9cd 0100 	strd	r0, r1, [sp]
 800ea64:	f7f2 f830 	bl	8000ac8 <__aeabi_dcmpgt>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	f040 8288 	bne.w	800ef7e <_dtoa_r+0x92e>
 800ea6e:	462a      	mov	r2, r5
 800ea70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ea74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea78:	f7f2 f808 	bl	8000a8c <__aeabi_dcmplt>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	f040 827c 	bne.w	800ef7a <_dtoa_r+0x92a>
 800ea82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea86:	e9cd 2300 	strd	r2, r3, [sp]
 800ea8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f2c0 8150 	blt.w	800ed32 <_dtoa_r+0x6e2>
 800ea92:	f1ba 0f0e 	cmp.w	sl, #14
 800ea96:	f300 814c 	bgt.w	800ed32 <_dtoa_r+0x6e2>
 800ea9a:	4b6a      	ldr	r3, [pc, #424]	; (800ec44 <_dtoa_r+0x5f4>)
 800ea9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eaa0:	ed93 7b00 	vldr	d7, [r3]
 800eaa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eaac:	f280 80d8 	bge.w	800ec60 <_dtoa_r+0x610>
 800eab0:	f1b9 0f00 	cmp.w	r9, #0
 800eab4:	f300 80d4 	bgt.w	800ec60 <_dtoa_r+0x610>
 800eab8:	f040 825e 	bne.w	800ef78 <_dtoa_r+0x928>
 800eabc:	2200      	movs	r2, #0
 800eabe:	4b66      	ldr	r3, [pc, #408]	; (800ec58 <_dtoa_r+0x608>)
 800eac0:	ec51 0b17 	vmov	r0, r1, d7
 800eac4:	f7f1 fd70 	bl	80005a8 <__aeabi_dmul>
 800eac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eacc:	f7f1 fff2 	bl	8000ab4 <__aeabi_dcmpge>
 800ead0:	464f      	mov	r7, r9
 800ead2:	464e      	mov	r6, r9
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f040 8234 	bne.w	800ef42 <_dtoa_r+0x8f2>
 800eada:	2331      	movs	r3, #49	; 0x31
 800eadc:	f10b 0501 	add.w	r5, fp, #1
 800eae0:	f88b 3000 	strb.w	r3, [fp]
 800eae4:	f10a 0a01 	add.w	sl, sl, #1
 800eae8:	e22f      	b.n	800ef4a <_dtoa_r+0x8fa>
 800eaea:	07f2      	lsls	r2, r6, #31
 800eaec:	d505      	bpl.n	800eafa <_dtoa_r+0x4aa>
 800eaee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eaf2:	f7f1 fd59 	bl	80005a8 <__aeabi_dmul>
 800eaf6:	3501      	adds	r5, #1
 800eaf8:	2301      	movs	r3, #1
 800eafa:	1076      	asrs	r6, r6, #1
 800eafc:	3708      	adds	r7, #8
 800eafe:	e772      	b.n	800e9e6 <_dtoa_r+0x396>
 800eb00:	2502      	movs	r5, #2
 800eb02:	e774      	b.n	800e9ee <_dtoa_r+0x39e>
 800eb04:	f8cd a020 	str.w	sl, [sp, #32]
 800eb08:	464f      	mov	r7, r9
 800eb0a:	e791      	b.n	800ea30 <_dtoa_r+0x3e0>
 800eb0c:	4b4d      	ldr	r3, [pc, #308]	; (800ec44 <_dtoa_r+0x5f4>)
 800eb0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eb12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800eb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d047      	beq.n	800ebac <_dtoa_r+0x55c>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	2000      	movs	r0, #0
 800eb22:	494e      	ldr	r1, [pc, #312]	; (800ec5c <_dtoa_r+0x60c>)
 800eb24:	f7f1 fe6a 	bl	80007fc <__aeabi_ddiv>
 800eb28:	462a      	mov	r2, r5
 800eb2a:	4633      	mov	r3, r6
 800eb2c:	f7f1 fb84 	bl	8000238 <__aeabi_dsub>
 800eb30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eb34:	465d      	mov	r5, fp
 800eb36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb3a:	f7f1 ffe5 	bl	8000b08 <__aeabi_d2iz>
 800eb3e:	4606      	mov	r6, r0
 800eb40:	f7f1 fcc8 	bl	80004d4 <__aeabi_i2d>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb4c:	f7f1 fb74 	bl	8000238 <__aeabi_dsub>
 800eb50:	3630      	adds	r6, #48	; 0x30
 800eb52:	f805 6b01 	strb.w	r6, [r5], #1
 800eb56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb5a:	e9cd 0100 	strd	r0, r1, [sp]
 800eb5e:	f7f1 ff95 	bl	8000a8c <__aeabi_dcmplt>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d163      	bne.n	800ec2e <_dtoa_r+0x5de>
 800eb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	4937      	ldr	r1, [pc, #220]	; (800ec4c <_dtoa_r+0x5fc>)
 800eb6e:	f7f1 fb63 	bl	8000238 <__aeabi_dsub>
 800eb72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb76:	f7f1 ff89 	bl	8000a8c <__aeabi_dcmplt>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	f040 80b7 	bne.w	800ecee <_dtoa_r+0x69e>
 800eb80:	eba5 030b 	sub.w	r3, r5, fp
 800eb84:	429f      	cmp	r7, r3
 800eb86:	f77f af7c 	ble.w	800ea82 <_dtoa_r+0x432>
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	4b30      	ldr	r3, [pc, #192]	; (800ec50 <_dtoa_r+0x600>)
 800eb8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb92:	f7f1 fd09 	bl	80005a8 <__aeabi_dmul>
 800eb96:	2200      	movs	r2, #0
 800eb98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eb9c:	4b2c      	ldr	r3, [pc, #176]	; (800ec50 <_dtoa_r+0x600>)
 800eb9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eba2:	f7f1 fd01 	bl	80005a8 <__aeabi_dmul>
 800eba6:	e9cd 0100 	strd	r0, r1, [sp]
 800ebaa:	e7c4      	b.n	800eb36 <_dtoa_r+0x4e6>
 800ebac:	462a      	mov	r2, r5
 800ebae:	4633      	mov	r3, r6
 800ebb0:	f7f1 fcfa 	bl	80005a8 <__aeabi_dmul>
 800ebb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ebb8:	eb0b 0507 	add.w	r5, fp, r7
 800ebbc:	465e      	mov	r6, fp
 800ebbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebc2:	f7f1 ffa1 	bl	8000b08 <__aeabi_d2iz>
 800ebc6:	4607      	mov	r7, r0
 800ebc8:	f7f1 fc84 	bl	80004d4 <__aeabi_i2d>
 800ebcc:	3730      	adds	r7, #48	; 0x30
 800ebce:	4602      	mov	r2, r0
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebd6:	f7f1 fb2f 	bl	8000238 <__aeabi_dsub>
 800ebda:	f806 7b01 	strb.w	r7, [r6], #1
 800ebde:	42ae      	cmp	r6, r5
 800ebe0:	e9cd 0100 	strd	r0, r1, [sp]
 800ebe4:	f04f 0200 	mov.w	r2, #0
 800ebe8:	d126      	bne.n	800ec38 <_dtoa_r+0x5e8>
 800ebea:	4b1c      	ldr	r3, [pc, #112]	; (800ec5c <_dtoa_r+0x60c>)
 800ebec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ebf0:	f7f1 fb24 	bl	800023c <__adddf3>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebfc:	f7f1 ff64 	bl	8000ac8 <__aeabi_dcmpgt>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	d174      	bne.n	800ecee <_dtoa_r+0x69e>
 800ec04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ec08:	2000      	movs	r0, #0
 800ec0a:	4914      	ldr	r1, [pc, #80]	; (800ec5c <_dtoa_r+0x60c>)
 800ec0c:	f7f1 fb14 	bl	8000238 <__aeabi_dsub>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
 800ec14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec18:	f7f1 ff38 	bl	8000a8c <__aeabi_dcmplt>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	f43f af30 	beq.w	800ea82 <_dtoa_r+0x432>
 800ec22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ec26:	2b30      	cmp	r3, #48	; 0x30
 800ec28:	f105 32ff 	add.w	r2, r5, #4294967295
 800ec2c:	d002      	beq.n	800ec34 <_dtoa_r+0x5e4>
 800ec2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ec32:	e04a      	b.n	800ecca <_dtoa_r+0x67a>
 800ec34:	4615      	mov	r5, r2
 800ec36:	e7f4      	b.n	800ec22 <_dtoa_r+0x5d2>
 800ec38:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <_dtoa_r+0x600>)
 800ec3a:	f7f1 fcb5 	bl	80005a8 <__aeabi_dmul>
 800ec3e:	e9cd 0100 	strd	r0, r1, [sp]
 800ec42:	e7bc      	b.n	800ebbe <_dtoa_r+0x56e>
 800ec44:	08010ac0 	.word	0x08010ac0
 800ec48:	08010a98 	.word	0x08010a98
 800ec4c:	3ff00000 	.word	0x3ff00000
 800ec50:	40240000 	.word	0x40240000
 800ec54:	401c0000 	.word	0x401c0000
 800ec58:	40140000 	.word	0x40140000
 800ec5c:	3fe00000 	.word	0x3fe00000
 800ec60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ec64:	465d      	mov	r5, fp
 800ec66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	f7f1 fdc5 	bl	80007fc <__aeabi_ddiv>
 800ec72:	f7f1 ff49 	bl	8000b08 <__aeabi_d2iz>
 800ec76:	4680      	mov	r8, r0
 800ec78:	f7f1 fc2c 	bl	80004d4 <__aeabi_i2d>
 800ec7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec80:	f7f1 fc92 	bl	80005a8 <__aeabi_dmul>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	4630      	mov	r0, r6
 800ec8a:	4639      	mov	r1, r7
 800ec8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ec90:	f7f1 fad2 	bl	8000238 <__aeabi_dsub>
 800ec94:	f805 6b01 	strb.w	r6, [r5], #1
 800ec98:	eba5 060b 	sub.w	r6, r5, fp
 800ec9c:	45b1      	cmp	r9, r6
 800ec9e:	4602      	mov	r2, r0
 800eca0:	460b      	mov	r3, r1
 800eca2:	d139      	bne.n	800ed18 <_dtoa_r+0x6c8>
 800eca4:	f7f1 faca 	bl	800023c <__adddf3>
 800eca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecac:	4606      	mov	r6, r0
 800ecae:	460f      	mov	r7, r1
 800ecb0:	f7f1 ff0a 	bl	8000ac8 <__aeabi_dcmpgt>
 800ecb4:	b9c8      	cbnz	r0, 800ecea <_dtoa_r+0x69a>
 800ecb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	f7f1 fedb 	bl	8000a78 <__aeabi_dcmpeq>
 800ecc2:	b110      	cbz	r0, 800ecca <_dtoa_r+0x67a>
 800ecc4:	f018 0f01 	tst.w	r8, #1
 800ecc8:	d10f      	bne.n	800ecea <_dtoa_r+0x69a>
 800ecca:	9904      	ldr	r1, [sp, #16]
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 fc9f 	bl	800f610 <_Bfree>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ecd6:	702b      	strb	r3, [r5, #0]
 800ecd8:	f10a 0301 	add.w	r3, sl, #1
 800ecdc:	6013      	str	r3, [r2, #0]
 800ecde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f000 8241 	beq.w	800f168 <_dtoa_r+0xb18>
 800ece6:	601d      	str	r5, [r3, #0]
 800ece8:	e23e      	b.n	800f168 <_dtoa_r+0xb18>
 800ecea:	f8cd a020 	str.w	sl, [sp, #32]
 800ecee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ecf2:	2a39      	cmp	r2, #57	; 0x39
 800ecf4:	f105 33ff 	add.w	r3, r5, #4294967295
 800ecf8:	d108      	bne.n	800ed0c <_dtoa_r+0x6bc>
 800ecfa:	459b      	cmp	fp, r3
 800ecfc:	d10a      	bne.n	800ed14 <_dtoa_r+0x6c4>
 800ecfe:	9b08      	ldr	r3, [sp, #32]
 800ed00:	3301      	adds	r3, #1
 800ed02:	9308      	str	r3, [sp, #32]
 800ed04:	2330      	movs	r3, #48	; 0x30
 800ed06:	f88b 3000 	strb.w	r3, [fp]
 800ed0a:	465b      	mov	r3, fp
 800ed0c:	781a      	ldrb	r2, [r3, #0]
 800ed0e:	3201      	adds	r2, #1
 800ed10:	701a      	strb	r2, [r3, #0]
 800ed12:	e78c      	b.n	800ec2e <_dtoa_r+0x5de>
 800ed14:	461d      	mov	r5, r3
 800ed16:	e7ea      	b.n	800ecee <_dtoa_r+0x69e>
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4b9b      	ldr	r3, [pc, #620]	; (800ef88 <_dtoa_r+0x938>)
 800ed1c:	f7f1 fc44 	bl	80005a8 <__aeabi_dmul>
 800ed20:	2200      	movs	r2, #0
 800ed22:	2300      	movs	r3, #0
 800ed24:	4606      	mov	r6, r0
 800ed26:	460f      	mov	r7, r1
 800ed28:	f7f1 fea6 	bl	8000a78 <__aeabi_dcmpeq>
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	d09a      	beq.n	800ec66 <_dtoa_r+0x616>
 800ed30:	e7cb      	b.n	800ecca <_dtoa_r+0x67a>
 800ed32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	f000 808b 	beq.w	800ee50 <_dtoa_r+0x800>
 800ed3a:	9a06      	ldr	r2, [sp, #24]
 800ed3c:	2a01      	cmp	r2, #1
 800ed3e:	dc6e      	bgt.n	800ee1e <_dtoa_r+0x7ce>
 800ed40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ed42:	2a00      	cmp	r2, #0
 800ed44:	d067      	beq.n	800ee16 <_dtoa_r+0x7c6>
 800ed46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ed4a:	9f07      	ldr	r7, [sp, #28]
 800ed4c:	9d05      	ldr	r5, [sp, #20]
 800ed4e:	9a05      	ldr	r2, [sp, #20]
 800ed50:	2101      	movs	r1, #1
 800ed52:	441a      	add	r2, r3
 800ed54:	4620      	mov	r0, r4
 800ed56:	9205      	str	r2, [sp, #20]
 800ed58:	4498      	add	r8, r3
 800ed5a:	f000 fcf9 	bl	800f750 <__i2b>
 800ed5e:	4606      	mov	r6, r0
 800ed60:	2d00      	cmp	r5, #0
 800ed62:	dd0c      	ble.n	800ed7e <_dtoa_r+0x72e>
 800ed64:	f1b8 0f00 	cmp.w	r8, #0
 800ed68:	dd09      	ble.n	800ed7e <_dtoa_r+0x72e>
 800ed6a:	4545      	cmp	r5, r8
 800ed6c:	9a05      	ldr	r2, [sp, #20]
 800ed6e:	462b      	mov	r3, r5
 800ed70:	bfa8      	it	ge
 800ed72:	4643      	movge	r3, r8
 800ed74:	1ad2      	subs	r2, r2, r3
 800ed76:	9205      	str	r2, [sp, #20]
 800ed78:	1aed      	subs	r5, r5, r3
 800ed7a:	eba8 0803 	sub.w	r8, r8, r3
 800ed7e:	9b07      	ldr	r3, [sp, #28]
 800ed80:	b1eb      	cbz	r3, 800edbe <_dtoa_r+0x76e>
 800ed82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d067      	beq.n	800ee58 <_dtoa_r+0x808>
 800ed88:	b18f      	cbz	r7, 800edae <_dtoa_r+0x75e>
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	463a      	mov	r2, r7
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f000 fd7e 	bl	800f890 <__pow5mult>
 800ed94:	9a04      	ldr	r2, [sp, #16]
 800ed96:	4601      	mov	r1, r0
 800ed98:	4606      	mov	r6, r0
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 fce1 	bl	800f762 <__multiply>
 800eda0:	9904      	ldr	r1, [sp, #16]
 800eda2:	9008      	str	r0, [sp, #32]
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fc33 	bl	800f610 <_Bfree>
 800edaa:	9b08      	ldr	r3, [sp, #32]
 800edac:	9304      	str	r3, [sp, #16]
 800edae:	9b07      	ldr	r3, [sp, #28]
 800edb0:	1bda      	subs	r2, r3, r7
 800edb2:	d004      	beq.n	800edbe <_dtoa_r+0x76e>
 800edb4:	9904      	ldr	r1, [sp, #16]
 800edb6:	4620      	mov	r0, r4
 800edb8:	f000 fd6a 	bl	800f890 <__pow5mult>
 800edbc:	9004      	str	r0, [sp, #16]
 800edbe:	2101      	movs	r1, #1
 800edc0:	4620      	mov	r0, r4
 800edc2:	f000 fcc5 	bl	800f750 <__i2b>
 800edc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edc8:	4607      	mov	r7, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f000 81d0 	beq.w	800f170 <_dtoa_r+0xb20>
 800edd0:	461a      	mov	r2, r3
 800edd2:	4601      	mov	r1, r0
 800edd4:	4620      	mov	r0, r4
 800edd6:	f000 fd5b 	bl	800f890 <__pow5mult>
 800edda:	9b06      	ldr	r3, [sp, #24]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	4607      	mov	r7, r0
 800ede0:	dc40      	bgt.n	800ee64 <_dtoa_r+0x814>
 800ede2:	9b00      	ldr	r3, [sp, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d139      	bne.n	800ee5c <_dtoa_r+0x80c>
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d136      	bne.n	800ee60 <_dtoa_r+0x810>
 800edf2:	9b01      	ldr	r3, [sp, #4]
 800edf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800edf8:	0d1b      	lsrs	r3, r3, #20
 800edfa:	051b      	lsls	r3, r3, #20
 800edfc:	b12b      	cbz	r3, 800ee0a <_dtoa_r+0x7ba>
 800edfe:	9b05      	ldr	r3, [sp, #20]
 800ee00:	3301      	adds	r3, #1
 800ee02:	9305      	str	r3, [sp, #20]
 800ee04:	f108 0801 	add.w	r8, r8, #1
 800ee08:	2301      	movs	r3, #1
 800ee0a:	9307      	str	r3, [sp, #28]
 800ee0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d12a      	bne.n	800ee68 <_dtoa_r+0x818>
 800ee12:	2001      	movs	r0, #1
 800ee14:	e030      	b.n	800ee78 <_dtoa_r+0x828>
 800ee16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee1c:	e795      	b.n	800ed4a <_dtoa_r+0x6fa>
 800ee1e:	9b07      	ldr	r3, [sp, #28]
 800ee20:	f109 37ff 	add.w	r7, r9, #4294967295
 800ee24:	42bb      	cmp	r3, r7
 800ee26:	bfbf      	itttt	lt
 800ee28:	9b07      	ldrlt	r3, [sp, #28]
 800ee2a:	9707      	strlt	r7, [sp, #28]
 800ee2c:	1afa      	sublt	r2, r7, r3
 800ee2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ee30:	bfbb      	ittet	lt
 800ee32:	189b      	addlt	r3, r3, r2
 800ee34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ee36:	1bdf      	subge	r7, r3, r7
 800ee38:	2700      	movlt	r7, #0
 800ee3a:	f1b9 0f00 	cmp.w	r9, #0
 800ee3e:	bfb5      	itete	lt
 800ee40:	9b05      	ldrlt	r3, [sp, #20]
 800ee42:	9d05      	ldrge	r5, [sp, #20]
 800ee44:	eba3 0509 	sublt.w	r5, r3, r9
 800ee48:	464b      	movge	r3, r9
 800ee4a:	bfb8      	it	lt
 800ee4c:	2300      	movlt	r3, #0
 800ee4e:	e77e      	b.n	800ed4e <_dtoa_r+0x6fe>
 800ee50:	9f07      	ldr	r7, [sp, #28]
 800ee52:	9d05      	ldr	r5, [sp, #20]
 800ee54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ee56:	e783      	b.n	800ed60 <_dtoa_r+0x710>
 800ee58:	9a07      	ldr	r2, [sp, #28]
 800ee5a:	e7ab      	b.n	800edb4 <_dtoa_r+0x764>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	e7d4      	b.n	800ee0a <_dtoa_r+0x7ba>
 800ee60:	9b00      	ldr	r3, [sp, #0]
 800ee62:	e7d2      	b.n	800ee0a <_dtoa_r+0x7ba>
 800ee64:	2300      	movs	r3, #0
 800ee66:	9307      	str	r3, [sp, #28]
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ee6e:	6918      	ldr	r0, [r3, #16]
 800ee70:	f000 fc20 	bl	800f6b4 <__hi0bits>
 800ee74:	f1c0 0020 	rsb	r0, r0, #32
 800ee78:	4440      	add	r0, r8
 800ee7a:	f010 001f 	ands.w	r0, r0, #31
 800ee7e:	d047      	beq.n	800ef10 <_dtoa_r+0x8c0>
 800ee80:	f1c0 0320 	rsb	r3, r0, #32
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	dd3b      	ble.n	800ef00 <_dtoa_r+0x8b0>
 800ee88:	9b05      	ldr	r3, [sp, #20]
 800ee8a:	f1c0 001c 	rsb	r0, r0, #28
 800ee8e:	4403      	add	r3, r0
 800ee90:	9305      	str	r3, [sp, #20]
 800ee92:	4405      	add	r5, r0
 800ee94:	4480      	add	r8, r0
 800ee96:	9b05      	ldr	r3, [sp, #20]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	dd05      	ble.n	800eea8 <_dtoa_r+0x858>
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	9904      	ldr	r1, [sp, #16]
 800eea0:	4620      	mov	r0, r4
 800eea2:	f000 fd43 	bl	800f92c <__lshift>
 800eea6:	9004      	str	r0, [sp, #16]
 800eea8:	f1b8 0f00 	cmp.w	r8, #0
 800eeac:	dd05      	ble.n	800eeba <_dtoa_r+0x86a>
 800eeae:	4639      	mov	r1, r7
 800eeb0:	4642      	mov	r2, r8
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 fd3a 	bl	800f92c <__lshift>
 800eeb8:	4607      	mov	r7, r0
 800eeba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eebc:	b353      	cbz	r3, 800ef14 <_dtoa_r+0x8c4>
 800eebe:	4639      	mov	r1, r7
 800eec0:	9804      	ldr	r0, [sp, #16]
 800eec2:	f000 fd87 	bl	800f9d4 <__mcmp>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	da24      	bge.n	800ef14 <_dtoa_r+0x8c4>
 800eeca:	2300      	movs	r3, #0
 800eecc:	220a      	movs	r2, #10
 800eece:	9904      	ldr	r1, [sp, #16]
 800eed0:	4620      	mov	r0, r4
 800eed2:	f000 fbb4 	bl	800f63e <__multadd>
 800eed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eed8:	9004      	str	r0, [sp, #16]
 800eeda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eede:	2b00      	cmp	r3, #0
 800eee0:	f000 814d 	beq.w	800f17e <_dtoa_r+0xb2e>
 800eee4:	2300      	movs	r3, #0
 800eee6:	4631      	mov	r1, r6
 800eee8:	220a      	movs	r2, #10
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 fba7 	bl	800f63e <__multadd>
 800eef0:	9b02      	ldr	r3, [sp, #8]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	4606      	mov	r6, r0
 800eef6:	dc4f      	bgt.n	800ef98 <_dtoa_r+0x948>
 800eef8:	9b06      	ldr	r3, [sp, #24]
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	dd4c      	ble.n	800ef98 <_dtoa_r+0x948>
 800eefe:	e011      	b.n	800ef24 <_dtoa_r+0x8d4>
 800ef00:	d0c9      	beq.n	800ee96 <_dtoa_r+0x846>
 800ef02:	9a05      	ldr	r2, [sp, #20]
 800ef04:	331c      	adds	r3, #28
 800ef06:	441a      	add	r2, r3
 800ef08:	9205      	str	r2, [sp, #20]
 800ef0a:	441d      	add	r5, r3
 800ef0c:	4498      	add	r8, r3
 800ef0e:	e7c2      	b.n	800ee96 <_dtoa_r+0x846>
 800ef10:	4603      	mov	r3, r0
 800ef12:	e7f6      	b.n	800ef02 <_dtoa_r+0x8b2>
 800ef14:	f1b9 0f00 	cmp.w	r9, #0
 800ef18:	dc38      	bgt.n	800ef8c <_dtoa_r+0x93c>
 800ef1a:	9b06      	ldr	r3, [sp, #24]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	dd35      	ble.n	800ef8c <_dtoa_r+0x93c>
 800ef20:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef24:	9b02      	ldr	r3, [sp, #8]
 800ef26:	b963      	cbnz	r3, 800ef42 <_dtoa_r+0x8f2>
 800ef28:	4639      	mov	r1, r7
 800ef2a:	2205      	movs	r2, #5
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f000 fb86 	bl	800f63e <__multadd>
 800ef32:	4601      	mov	r1, r0
 800ef34:	4607      	mov	r7, r0
 800ef36:	9804      	ldr	r0, [sp, #16]
 800ef38:	f000 fd4c 	bl	800f9d4 <__mcmp>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f73f adcc 	bgt.w	800eada <_dtoa_r+0x48a>
 800ef42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef44:	465d      	mov	r5, fp
 800ef46:	ea6f 0a03 	mvn.w	sl, r3
 800ef4a:	f04f 0900 	mov.w	r9, #0
 800ef4e:	4639      	mov	r1, r7
 800ef50:	4620      	mov	r0, r4
 800ef52:	f000 fb5d 	bl	800f610 <_Bfree>
 800ef56:	2e00      	cmp	r6, #0
 800ef58:	f43f aeb7 	beq.w	800ecca <_dtoa_r+0x67a>
 800ef5c:	f1b9 0f00 	cmp.w	r9, #0
 800ef60:	d005      	beq.n	800ef6e <_dtoa_r+0x91e>
 800ef62:	45b1      	cmp	r9, r6
 800ef64:	d003      	beq.n	800ef6e <_dtoa_r+0x91e>
 800ef66:	4649      	mov	r1, r9
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f000 fb51 	bl	800f610 <_Bfree>
 800ef6e:	4631      	mov	r1, r6
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 fb4d 	bl	800f610 <_Bfree>
 800ef76:	e6a8      	b.n	800ecca <_dtoa_r+0x67a>
 800ef78:	2700      	movs	r7, #0
 800ef7a:	463e      	mov	r6, r7
 800ef7c:	e7e1      	b.n	800ef42 <_dtoa_r+0x8f2>
 800ef7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ef82:	463e      	mov	r6, r7
 800ef84:	e5a9      	b.n	800eada <_dtoa_r+0x48a>
 800ef86:	bf00      	nop
 800ef88:	40240000 	.word	0x40240000
 800ef8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f000 80fa 	beq.w	800f18c <_dtoa_r+0xb3c>
 800ef98:	2d00      	cmp	r5, #0
 800ef9a:	dd05      	ble.n	800efa8 <_dtoa_r+0x958>
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	462a      	mov	r2, r5
 800efa0:	4620      	mov	r0, r4
 800efa2:	f000 fcc3 	bl	800f92c <__lshift>
 800efa6:	4606      	mov	r6, r0
 800efa8:	9b07      	ldr	r3, [sp, #28]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d04c      	beq.n	800f048 <_dtoa_r+0x9f8>
 800efae:	6871      	ldr	r1, [r6, #4]
 800efb0:	4620      	mov	r0, r4
 800efb2:	f000 faf9 	bl	800f5a8 <_Balloc>
 800efb6:	6932      	ldr	r2, [r6, #16]
 800efb8:	3202      	adds	r2, #2
 800efba:	4605      	mov	r5, r0
 800efbc:	0092      	lsls	r2, r2, #2
 800efbe:	f106 010c 	add.w	r1, r6, #12
 800efc2:	300c      	adds	r0, #12
 800efc4:	f7fe fd0a 	bl	800d9dc <memcpy>
 800efc8:	2201      	movs	r2, #1
 800efca:	4629      	mov	r1, r5
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 fcad 	bl	800f92c <__lshift>
 800efd2:	9b00      	ldr	r3, [sp, #0]
 800efd4:	f8cd b014 	str.w	fp, [sp, #20]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	46b1      	mov	r9, r6
 800efde:	9307      	str	r3, [sp, #28]
 800efe0:	4606      	mov	r6, r0
 800efe2:	4639      	mov	r1, r7
 800efe4:	9804      	ldr	r0, [sp, #16]
 800efe6:	f7ff faa5 	bl	800e534 <quorem>
 800efea:	4649      	mov	r1, r9
 800efec:	4605      	mov	r5, r0
 800efee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800eff2:	9804      	ldr	r0, [sp, #16]
 800eff4:	f000 fcee 	bl	800f9d4 <__mcmp>
 800eff8:	4632      	mov	r2, r6
 800effa:	9000      	str	r0, [sp, #0]
 800effc:	4639      	mov	r1, r7
 800effe:	4620      	mov	r0, r4
 800f000:	f000 fd02 	bl	800fa08 <__mdiff>
 800f004:	68c3      	ldr	r3, [r0, #12]
 800f006:	4602      	mov	r2, r0
 800f008:	bb03      	cbnz	r3, 800f04c <_dtoa_r+0x9fc>
 800f00a:	4601      	mov	r1, r0
 800f00c:	9008      	str	r0, [sp, #32]
 800f00e:	9804      	ldr	r0, [sp, #16]
 800f010:	f000 fce0 	bl	800f9d4 <__mcmp>
 800f014:	9a08      	ldr	r2, [sp, #32]
 800f016:	4603      	mov	r3, r0
 800f018:	4611      	mov	r1, r2
 800f01a:	4620      	mov	r0, r4
 800f01c:	9308      	str	r3, [sp, #32]
 800f01e:	f000 faf7 	bl	800f610 <_Bfree>
 800f022:	9b08      	ldr	r3, [sp, #32]
 800f024:	b9a3      	cbnz	r3, 800f050 <_dtoa_r+0xa00>
 800f026:	9a06      	ldr	r2, [sp, #24]
 800f028:	b992      	cbnz	r2, 800f050 <_dtoa_r+0xa00>
 800f02a:	9a07      	ldr	r2, [sp, #28]
 800f02c:	b982      	cbnz	r2, 800f050 <_dtoa_r+0xa00>
 800f02e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f032:	d029      	beq.n	800f088 <_dtoa_r+0xa38>
 800f034:	9b00      	ldr	r3, [sp, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	dd01      	ble.n	800f03e <_dtoa_r+0x9ee>
 800f03a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f03e:	9b05      	ldr	r3, [sp, #20]
 800f040:	1c5d      	adds	r5, r3, #1
 800f042:	f883 8000 	strb.w	r8, [r3]
 800f046:	e782      	b.n	800ef4e <_dtoa_r+0x8fe>
 800f048:	4630      	mov	r0, r6
 800f04a:	e7c2      	b.n	800efd2 <_dtoa_r+0x982>
 800f04c:	2301      	movs	r3, #1
 800f04e:	e7e3      	b.n	800f018 <_dtoa_r+0x9c8>
 800f050:	9a00      	ldr	r2, [sp, #0]
 800f052:	2a00      	cmp	r2, #0
 800f054:	db04      	blt.n	800f060 <_dtoa_r+0xa10>
 800f056:	d125      	bne.n	800f0a4 <_dtoa_r+0xa54>
 800f058:	9a06      	ldr	r2, [sp, #24]
 800f05a:	bb1a      	cbnz	r2, 800f0a4 <_dtoa_r+0xa54>
 800f05c:	9a07      	ldr	r2, [sp, #28]
 800f05e:	bb0a      	cbnz	r2, 800f0a4 <_dtoa_r+0xa54>
 800f060:	2b00      	cmp	r3, #0
 800f062:	ddec      	ble.n	800f03e <_dtoa_r+0x9ee>
 800f064:	2201      	movs	r2, #1
 800f066:	9904      	ldr	r1, [sp, #16]
 800f068:	4620      	mov	r0, r4
 800f06a:	f000 fc5f 	bl	800f92c <__lshift>
 800f06e:	4639      	mov	r1, r7
 800f070:	9004      	str	r0, [sp, #16]
 800f072:	f000 fcaf 	bl	800f9d4 <__mcmp>
 800f076:	2800      	cmp	r0, #0
 800f078:	dc03      	bgt.n	800f082 <_dtoa_r+0xa32>
 800f07a:	d1e0      	bne.n	800f03e <_dtoa_r+0x9ee>
 800f07c:	f018 0f01 	tst.w	r8, #1
 800f080:	d0dd      	beq.n	800f03e <_dtoa_r+0x9ee>
 800f082:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f086:	d1d8      	bne.n	800f03a <_dtoa_r+0x9ea>
 800f088:	9b05      	ldr	r3, [sp, #20]
 800f08a:	9a05      	ldr	r2, [sp, #20]
 800f08c:	1c5d      	adds	r5, r3, #1
 800f08e:	2339      	movs	r3, #57	; 0x39
 800f090:	7013      	strb	r3, [r2, #0]
 800f092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f096:	2b39      	cmp	r3, #57	; 0x39
 800f098:	f105 32ff 	add.w	r2, r5, #4294967295
 800f09c:	d04f      	beq.n	800f13e <_dtoa_r+0xaee>
 800f09e:	3301      	adds	r3, #1
 800f0a0:	7013      	strb	r3, [r2, #0]
 800f0a2:	e754      	b.n	800ef4e <_dtoa_r+0x8fe>
 800f0a4:	9a05      	ldr	r2, [sp, #20]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	f102 0501 	add.w	r5, r2, #1
 800f0ac:	dd06      	ble.n	800f0bc <_dtoa_r+0xa6c>
 800f0ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f0b2:	d0e9      	beq.n	800f088 <_dtoa_r+0xa38>
 800f0b4:	f108 0801 	add.w	r8, r8, #1
 800f0b8:	9b05      	ldr	r3, [sp, #20]
 800f0ba:	e7c2      	b.n	800f042 <_dtoa_r+0x9f2>
 800f0bc:	9a02      	ldr	r2, [sp, #8]
 800f0be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f0c2:	eba5 030b 	sub.w	r3, r5, fp
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d021      	beq.n	800f10e <_dtoa_r+0xabe>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	220a      	movs	r2, #10
 800f0ce:	9904      	ldr	r1, [sp, #16]
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f000 fab4 	bl	800f63e <__multadd>
 800f0d6:	45b1      	cmp	r9, r6
 800f0d8:	9004      	str	r0, [sp, #16]
 800f0da:	f04f 0300 	mov.w	r3, #0
 800f0de:	f04f 020a 	mov.w	r2, #10
 800f0e2:	4649      	mov	r1, r9
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	d105      	bne.n	800f0f4 <_dtoa_r+0xaa4>
 800f0e8:	f000 faa9 	bl	800f63e <__multadd>
 800f0ec:	4681      	mov	r9, r0
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	9505      	str	r5, [sp, #20]
 800f0f2:	e776      	b.n	800efe2 <_dtoa_r+0x992>
 800f0f4:	f000 faa3 	bl	800f63e <__multadd>
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	4681      	mov	r9, r0
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	220a      	movs	r2, #10
 800f100:	4620      	mov	r0, r4
 800f102:	f000 fa9c 	bl	800f63e <__multadd>
 800f106:	4606      	mov	r6, r0
 800f108:	e7f2      	b.n	800f0f0 <_dtoa_r+0xaa0>
 800f10a:	f04f 0900 	mov.w	r9, #0
 800f10e:	2201      	movs	r2, #1
 800f110:	9904      	ldr	r1, [sp, #16]
 800f112:	4620      	mov	r0, r4
 800f114:	f000 fc0a 	bl	800f92c <__lshift>
 800f118:	4639      	mov	r1, r7
 800f11a:	9004      	str	r0, [sp, #16]
 800f11c:	f000 fc5a 	bl	800f9d4 <__mcmp>
 800f120:	2800      	cmp	r0, #0
 800f122:	dcb6      	bgt.n	800f092 <_dtoa_r+0xa42>
 800f124:	d102      	bne.n	800f12c <_dtoa_r+0xadc>
 800f126:	f018 0f01 	tst.w	r8, #1
 800f12a:	d1b2      	bne.n	800f092 <_dtoa_r+0xa42>
 800f12c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f130:	2b30      	cmp	r3, #48	; 0x30
 800f132:	f105 32ff 	add.w	r2, r5, #4294967295
 800f136:	f47f af0a 	bne.w	800ef4e <_dtoa_r+0x8fe>
 800f13a:	4615      	mov	r5, r2
 800f13c:	e7f6      	b.n	800f12c <_dtoa_r+0xadc>
 800f13e:	4593      	cmp	fp, r2
 800f140:	d105      	bne.n	800f14e <_dtoa_r+0xafe>
 800f142:	2331      	movs	r3, #49	; 0x31
 800f144:	f10a 0a01 	add.w	sl, sl, #1
 800f148:	f88b 3000 	strb.w	r3, [fp]
 800f14c:	e6ff      	b.n	800ef4e <_dtoa_r+0x8fe>
 800f14e:	4615      	mov	r5, r2
 800f150:	e79f      	b.n	800f092 <_dtoa_r+0xa42>
 800f152:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f1b8 <_dtoa_r+0xb68>
 800f156:	e007      	b.n	800f168 <_dtoa_r+0xb18>
 800f158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f15a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f1bc <_dtoa_r+0xb6c>
 800f15e:	b11b      	cbz	r3, 800f168 <_dtoa_r+0xb18>
 800f160:	f10b 0308 	add.w	r3, fp, #8
 800f164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f166:	6013      	str	r3, [r2, #0]
 800f168:	4658      	mov	r0, fp
 800f16a:	b017      	add	sp, #92	; 0x5c
 800f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f170:	9b06      	ldr	r3, [sp, #24]
 800f172:	2b01      	cmp	r3, #1
 800f174:	f77f ae35 	ble.w	800ede2 <_dtoa_r+0x792>
 800f178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f17a:	9307      	str	r3, [sp, #28]
 800f17c:	e649      	b.n	800ee12 <_dtoa_r+0x7c2>
 800f17e:	9b02      	ldr	r3, [sp, #8]
 800f180:	2b00      	cmp	r3, #0
 800f182:	dc03      	bgt.n	800f18c <_dtoa_r+0xb3c>
 800f184:	9b06      	ldr	r3, [sp, #24]
 800f186:	2b02      	cmp	r3, #2
 800f188:	f73f aecc 	bgt.w	800ef24 <_dtoa_r+0x8d4>
 800f18c:	465d      	mov	r5, fp
 800f18e:	4639      	mov	r1, r7
 800f190:	9804      	ldr	r0, [sp, #16]
 800f192:	f7ff f9cf 	bl	800e534 <quorem>
 800f196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f19a:	f805 8b01 	strb.w	r8, [r5], #1
 800f19e:	9a02      	ldr	r2, [sp, #8]
 800f1a0:	eba5 030b 	sub.w	r3, r5, fp
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	ddb0      	ble.n	800f10a <_dtoa_r+0xaba>
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	220a      	movs	r2, #10
 800f1ac:	9904      	ldr	r1, [sp, #16]
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f000 fa45 	bl	800f63e <__multadd>
 800f1b4:	9004      	str	r0, [sp, #16]
 800f1b6:	e7ea      	b.n	800f18e <_dtoa_r+0xb3e>
 800f1b8:	08010a04 	.word	0x08010a04
 800f1bc:	08010a28 	.word	0x08010a28

0800f1c0 <__sflush_r>:
 800f1c0:	898a      	ldrh	r2, [r1, #12]
 800f1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c6:	4605      	mov	r5, r0
 800f1c8:	0710      	lsls	r0, r2, #28
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	d458      	bmi.n	800f280 <__sflush_r+0xc0>
 800f1ce:	684b      	ldr	r3, [r1, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	dc05      	bgt.n	800f1e0 <__sflush_r+0x20>
 800f1d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	dc02      	bgt.n	800f1e0 <__sflush_r+0x20>
 800f1da:	2000      	movs	r0, #0
 800f1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	d0f9      	beq.n	800f1da <__sflush_r+0x1a>
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1ec:	682f      	ldr	r7, [r5, #0]
 800f1ee:	6a21      	ldr	r1, [r4, #32]
 800f1f0:	602b      	str	r3, [r5, #0]
 800f1f2:	d032      	beq.n	800f25a <__sflush_r+0x9a>
 800f1f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	075a      	lsls	r2, r3, #29
 800f1fa:	d505      	bpl.n	800f208 <__sflush_r+0x48>
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	1ac0      	subs	r0, r0, r3
 800f200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f202:	b10b      	cbz	r3, 800f208 <__sflush_r+0x48>
 800f204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f206:	1ac0      	subs	r0, r0, r3
 800f208:	2300      	movs	r3, #0
 800f20a:	4602      	mov	r2, r0
 800f20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f20e:	6a21      	ldr	r1, [r4, #32]
 800f210:	4628      	mov	r0, r5
 800f212:	47b0      	blx	r6
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	d106      	bne.n	800f228 <__sflush_r+0x68>
 800f21a:	6829      	ldr	r1, [r5, #0]
 800f21c:	291d      	cmp	r1, #29
 800f21e:	d848      	bhi.n	800f2b2 <__sflush_r+0xf2>
 800f220:	4a29      	ldr	r2, [pc, #164]	; (800f2c8 <__sflush_r+0x108>)
 800f222:	40ca      	lsrs	r2, r1
 800f224:	07d6      	lsls	r6, r2, #31
 800f226:	d544      	bpl.n	800f2b2 <__sflush_r+0xf2>
 800f228:	2200      	movs	r2, #0
 800f22a:	6062      	str	r2, [r4, #4]
 800f22c:	04d9      	lsls	r1, r3, #19
 800f22e:	6922      	ldr	r2, [r4, #16]
 800f230:	6022      	str	r2, [r4, #0]
 800f232:	d504      	bpl.n	800f23e <__sflush_r+0x7e>
 800f234:	1c42      	adds	r2, r0, #1
 800f236:	d101      	bne.n	800f23c <__sflush_r+0x7c>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	b903      	cbnz	r3, 800f23e <__sflush_r+0x7e>
 800f23c:	6560      	str	r0, [r4, #84]	; 0x54
 800f23e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f240:	602f      	str	r7, [r5, #0]
 800f242:	2900      	cmp	r1, #0
 800f244:	d0c9      	beq.n	800f1da <__sflush_r+0x1a>
 800f246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f24a:	4299      	cmp	r1, r3
 800f24c:	d002      	beq.n	800f254 <__sflush_r+0x94>
 800f24e:	4628      	mov	r0, r5
 800f250:	f000 fc94 	bl	800fb7c <_free_r>
 800f254:	2000      	movs	r0, #0
 800f256:	6360      	str	r0, [r4, #52]	; 0x34
 800f258:	e7c0      	b.n	800f1dc <__sflush_r+0x1c>
 800f25a:	2301      	movs	r3, #1
 800f25c:	4628      	mov	r0, r5
 800f25e:	47b0      	blx	r6
 800f260:	1c41      	adds	r1, r0, #1
 800f262:	d1c8      	bne.n	800f1f6 <__sflush_r+0x36>
 800f264:	682b      	ldr	r3, [r5, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d0c5      	beq.n	800f1f6 <__sflush_r+0x36>
 800f26a:	2b1d      	cmp	r3, #29
 800f26c:	d001      	beq.n	800f272 <__sflush_r+0xb2>
 800f26e:	2b16      	cmp	r3, #22
 800f270:	d101      	bne.n	800f276 <__sflush_r+0xb6>
 800f272:	602f      	str	r7, [r5, #0]
 800f274:	e7b1      	b.n	800f1da <__sflush_r+0x1a>
 800f276:	89a3      	ldrh	r3, [r4, #12]
 800f278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f27c:	81a3      	strh	r3, [r4, #12]
 800f27e:	e7ad      	b.n	800f1dc <__sflush_r+0x1c>
 800f280:	690f      	ldr	r7, [r1, #16]
 800f282:	2f00      	cmp	r7, #0
 800f284:	d0a9      	beq.n	800f1da <__sflush_r+0x1a>
 800f286:	0793      	lsls	r3, r2, #30
 800f288:	680e      	ldr	r6, [r1, #0]
 800f28a:	bf08      	it	eq
 800f28c:	694b      	ldreq	r3, [r1, #20]
 800f28e:	600f      	str	r7, [r1, #0]
 800f290:	bf18      	it	ne
 800f292:	2300      	movne	r3, #0
 800f294:	eba6 0807 	sub.w	r8, r6, r7
 800f298:	608b      	str	r3, [r1, #8]
 800f29a:	f1b8 0f00 	cmp.w	r8, #0
 800f29e:	dd9c      	ble.n	800f1da <__sflush_r+0x1a>
 800f2a0:	4643      	mov	r3, r8
 800f2a2:	463a      	mov	r2, r7
 800f2a4:	6a21      	ldr	r1, [r4, #32]
 800f2a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	47b0      	blx	r6
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	dc06      	bgt.n	800f2be <__sflush_r+0xfe>
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2b6:	81a3      	strh	r3, [r4, #12]
 800f2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2bc:	e78e      	b.n	800f1dc <__sflush_r+0x1c>
 800f2be:	4407      	add	r7, r0
 800f2c0:	eba8 0800 	sub.w	r8, r8, r0
 800f2c4:	e7e9      	b.n	800f29a <__sflush_r+0xda>
 800f2c6:	bf00      	nop
 800f2c8:	20400001 	.word	0x20400001

0800f2cc <_fflush_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	690b      	ldr	r3, [r1, #16]
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	b1db      	cbz	r3, 800f30e <_fflush_r+0x42>
 800f2d6:	b118      	cbz	r0, 800f2e0 <_fflush_r+0x14>
 800f2d8:	6983      	ldr	r3, [r0, #24]
 800f2da:	b90b      	cbnz	r3, 800f2e0 <_fflush_r+0x14>
 800f2dc:	f000 f860 	bl	800f3a0 <__sinit>
 800f2e0:	4b0c      	ldr	r3, [pc, #48]	; (800f314 <_fflush_r+0x48>)
 800f2e2:	429c      	cmp	r4, r3
 800f2e4:	d109      	bne.n	800f2fa <_fflush_r+0x2e>
 800f2e6:	686c      	ldr	r4, [r5, #4]
 800f2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ec:	b17b      	cbz	r3, 800f30e <_fflush_r+0x42>
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2f6:	f7ff bf63 	b.w	800f1c0 <__sflush_r>
 800f2fa:	4b07      	ldr	r3, [pc, #28]	; (800f318 <_fflush_r+0x4c>)
 800f2fc:	429c      	cmp	r4, r3
 800f2fe:	d101      	bne.n	800f304 <_fflush_r+0x38>
 800f300:	68ac      	ldr	r4, [r5, #8]
 800f302:	e7f1      	b.n	800f2e8 <_fflush_r+0x1c>
 800f304:	4b05      	ldr	r3, [pc, #20]	; (800f31c <_fflush_r+0x50>)
 800f306:	429c      	cmp	r4, r3
 800f308:	bf08      	it	eq
 800f30a:	68ec      	ldreq	r4, [r5, #12]
 800f30c:	e7ec      	b.n	800f2e8 <_fflush_r+0x1c>
 800f30e:	2000      	movs	r0, #0
 800f310:	bd38      	pop	{r3, r4, r5, pc}
 800f312:	bf00      	nop
 800f314:	08010a58 	.word	0x08010a58
 800f318:	08010a78 	.word	0x08010a78
 800f31c:	08010a38 	.word	0x08010a38

0800f320 <std>:
 800f320:	2300      	movs	r3, #0
 800f322:	b510      	push	{r4, lr}
 800f324:	4604      	mov	r4, r0
 800f326:	e9c0 3300 	strd	r3, r3, [r0]
 800f32a:	6083      	str	r3, [r0, #8]
 800f32c:	8181      	strh	r1, [r0, #12]
 800f32e:	6643      	str	r3, [r0, #100]	; 0x64
 800f330:	81c2      	strh	r2, [r0, #14]
 800f332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f336:	6183      	str	r3, [r0, #24]
 800f338:	4619      	mov	r1, r3
 800f33a:	2208      	movs	r2, #8
 800f33c:	305c      	adds	r0, #92	; 0x5c
 800f33e:	f7fe fb58 	bl	800d9f2 <memset>
 800f342:	4b05      	ldr	r3, [pc, #20]	; (800f358 <std+0x38>)
 800f344:	6263      	str	r3, [r4, #36]	; 0x24
 800f346:	4b05      	ldr	r3, [pc, #20]	; (800f35c <std+0x3c>)
 800f348:	62a3      	str	r3, [r4, #40]	; 0x28
 800f34a:	4b05      	ldr	r3, [pc, #20]	; (800f360 <std+0x40>)
 800f34c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f34e:	4b05      	ldr	r3, [pc, #20]	; (800f364 <std+0x44>)
 800f350:	6224      	str	r4, [r4, #32]
 800f352:	6323      	str	r3, [r4, #48]	; 0x30
 800f354:	bd10      	pop	{r4, pc}
 800f356:	bf00      	nop
 800f358:	0800ff6d 	.word	0x0800ff6d
 800f35c:	0800ff8f 	.word	0x0800ff8f
 800f360:	0800ffc7 	.word	0x0800ffc7
 800f364:	0800ffeb 	.word	0x0800ffeb

0800f368 <_cleanup_r>:
 800f368:	4901      	ldr	r1, [pc, #4]	; (800f370 <_cleanup_r+0x8>)
 800f36a:	f000 b885 	b.w	800f478 <_fwalk_reent>
 800f36e:	bf00      	nop
 800f370:	0800f2cd 	.word	0x0800f2cd

0800f374 <__sfmoreglue>:
 800f374:	b570      	push	{r4, r5, r6, lr}
 800f376:	1e4a      	subs	r2, r1, #1
 800f378:	2568      	movs	r5, #104	; 0x68
 800f37a:	4355      	muls	r5, r2
 800f37c:	460e      	mov	r6, r1
 800f37e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f382:	f000 fc49 	bl	800fc18 <_malloc_r>
 800f386:	4604      	mov	r4, r0
 800f388:	b140      	cbz	r0, 800f39c <__sfmoreglue+0x28>
 800f38a:	2100      	movs	r1, #0
 800f38c:	e9c0 1600 	strd	r1, r6, [r0]
 800f390:	300c      	adds	r0, #12
 800f392:	60a0      	str	r0, [r4, #8]
 800f394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f398:	f7fe fb2b 	bl	800d9f2 <memset>
 800f39c:	4620      	mov	r0, r4
 800f39e:	bd70      	pop	{r4, r5, r6, pc}

0800f3a0 <__sinit>:
 800f3a0:	6983      	ldr	r3, [r0, #24]
 800f3a2:	b510      	push	{r4, lr}
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	bb33      	cbnz	r3, 800f3f6 <__sinit+0x56>
 800f3a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f3ac:	6503      	str	r3, [r0, #80]	; 0x50
 800f3ae:	4b12      	ldr	r3, [pc, #72]	; (800f3f8 <__sinit+0x58>)
 800f3b0:	4a12      	ldr	r2, [pc, #72]	; (800f3fc <__sinit+0x5c>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6282      	str	r2, [r0, #40]	; 0x28
 800f3b6:	4298      	cmp	r0, r3
 800f3b8:	bf04      	itt	eq
 800f3ba:	2301      	moveq	r3, #1
 800f3bc:	6183      	streq	r3, [r0, #24]
 800f3be:	f000 f81f 	bl	800f400 <__sfp>
 800f3c2:	6060      	str	r0, [r4, #4]
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f000 f81b 	bl	800f400 <__sfp>
 800f3ca:	60a0      	str	r0, [r4, #8]
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 f817 	bl	800f400 <__sfp>
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	60e0      	str	r0, [r4, #12]
 800f3d6:	2104      	movs	r1, #4
 800f3d8:	6860      	ldr	r0, [r4, #4]
 800f3da:	f7ff ffa1 	bl	800f320 <std>
 800f3de:	2201      	movs	r2, #1
 800f3e0:	2109      	movs	r1, #9
 800f3e2:	68a0      	ldr	r0, [r4, #8]
 800f3e4:	f7ff ff9c 	bl	800f320 <std>
 800f3e8:	2202      	movs	r2, #2
 800f3ea:	2112      	movs	r1, #18
 800f3ec:	68e0      	ldr	r0, [r4, #12]
 800f3ee:	f7ff ff97 	bl	800f320 <std>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	61a3      	str	r3, [r4, #24]
 800f3f6:	bd10      	pop	{r4, pc}
 800f3f8:	080109f0 	.word	0x080109f0
 800f3fc:	0800f369 	.word	0x0800f369

0800f400 <__sfp>:
 800f400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f402:	4b1b      	ldr	r3, [pc, #108]	; (800f470 <__sfp+0x70>)
 800f404:	681e      	ldr	r6, [r3, #0]
 800f406:	69b3      	ldr	r3, [r6, #24]
 800f408:	4607      	mov	r7, r0
 800f40a:	b913      	cbnz	r3, 800f412 <__sfp+0x12>
 800f40c:	4630      	mov	r0, r6
 800f40e:	f7ff ffc7 	bl	800f3a0 <__sinit>
 800f412:	3648      	adds	r6, #72	; 0x48
 800f414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f418:	3b01      	subs	r3, #1
 800f41a:	d503      	bpl.n	800f424 <__sfp+0x24>
 800f41c:	6833      	ldr	r3, [r6, #0]
 800f41e:	b133      	cbz	r3, 800f42e <__sfp+0x2e>
 800f420:	6836      	ldr	r6, [r6, #0]
 800f422:	e7f7      	b.n	800f414 <__sfp+0x14>
 800f424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f428:	b16d      	cbz	r5, 800f446 <__sfp+0x46>
 800f42a:	3468      	adds	r4, #104	; 0x68
 800f42c:	e7f4      	b.n	800f418 <__sfp+0x18>
 800f42e:	2104      	movs	r1, #4
 800f430:	4638      	mov	r0, r7
 800f432:	f7ff ff9f 	bl	800f374 <__sfmoreglue>
 800f436:	6030      	str	r0, [r6, #0]
 800f438:	2800      	cmp	r0, #0
 800f43a:	d1f1      	bne.n	800f420 <__sfp+0x20>
 800f43c:	230c      	movs	r3, #12
 800f43e:	603b      	str	r3, [r7, #0]
 800f440:	4604      	mov	r4, r0
 800f442:	4620      	mov	r0, r4
 800f444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f446:	4b0b      	ldr	r3, [pc, #44]	; (800f474 <__sfp+0x74>)
 800f448:	6665      	str	r5, [r4, #100]	; 0x64
 800f44a:	e9c4 5500 	strd	r5, r5, [r4]
 800f44e:	60a5      	str	r5, [r4, #8]
 800f450:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f454:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f458:	2208      	movs	r2, #8
 800f45a:	4629      	mov	r1, r5
 800f45c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f460:	f7fe fac7 	bl	800d9f2 <memset>
 800f464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f46c:	e7e9      	b.n	800f442 <__sfp+0x42>
 800f46e:	bf00      	nop
 800f470:	080109f0 	.word	0x080109f0
 800f474:	ffff0001 	.word	0xffff0001

0800f478 <_fwalk_reent>:
 800f478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f47c:	4680      	mov	r8, r0
 800f47e:	4689      	mov	r9, r1
 800f480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f484:	2600      	movs	r6, #0
 800f486:	b914      	cbnz	r4, 800f48e <_fwalk_reent+0x16>
 800f488:	4630      	mov	r0, r6
 800f48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f492:	3f01      	subs	r7, #1
 800f494:	d501      	bpl.n	800f49a <_fwalk_reent+0x22>
 800f496:	6824      	ldr	r4, [r4, #0]
 800f498:	e7f5      	b.n	800f486 <_fwalk_reent+0xe>
 800f49a:	89ab      	ldrh	r3, [r5, #12]
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d907      	bls.n	800f4b0 <_fwalk_reent+0x38>
 800f4a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	d003      	beq.n	800f4b0 <_fwalk_reent+0x38>
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	4640      	mov	r0, r8
 800f4ac:	47c8      	blx	r9
 800f4ae:	4306      	orrs	r6, r0
 800f4b0:	3568      	adds	r5, #104	; 0x68
 800f4b2:	e7ee      	b.n	800f492 <_fwalk_reent+0x1a>

0800f4b4 <_localeconv_r>:
 800f4b4:	4b04      	ldr	r3, [pc, #16]	; (800f4c8 <_localeconv_r+0x14>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	6a18      	ldr	r0, [r3, #32]
 800f4ba:	4b04      	ldr	r3, [pc, #16]	; (800f4cc <_localeconv_r+0x18>)
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	bf08      	it	eq
 800f4c0:	4618      	moveq	r0, r3
 800f4c2:	30f0      	adds	r0, #240	; 0xf0
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	20000024 	.word	0x20000024
 800f4cc:	20000088 	.word	0x20000088

0800f4d0 <__swhatbuf_r>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	460e      	mov	r6, r1
 800f4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	b096      	sub	sp, #88	; 0x58
 800f4dc:	4614      	mov	r4, r2
 800f4de:	461d      	mov	r5, r3
 800f4e0:	da07      	bge.n	800f4f2 <__swhatbuf_r+0x22>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	602b      	str	r3, [r5, #0]
 800f4e6:	89b3      	ldrh	r3, [r6, #12]
 800f4e8:	061a      	lsls	r2, r3, #24
 800f4ea:	d410      	bmi.n	800f50e <__swhatbuf_r+0x3e>
 800f4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4f0:	e00e      	b.n	800f510 <__swhatbuf_r+0x40>
 800f4f2:	466a      	mov	r2, sp
 800f4f4:	f000 fda0 	bl	8010038 <_fstat_r>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	dbf2      	blt.n	800f4e2 <__swhatbuf_r+0x12>
 800f4fc:	9a01      	ldr	r2, [sp, #4]
 800f4fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f502:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f506:	425a      	negs	r2, r3
 800f508:	415a      	adcs	r2, r3
 800f50a:	602a      	str	r2, [r5, #0]
 800f50c:	e7ee      	b.n	800f4ec <__swhatbuf_r+0x1c>
 800f50e:	2340      	movs	r3, #64	; 0x40
 800f510:	2000      	movs	r0, #0
 800f512:	6023      	str	r3, [r4, #0]
 800f514:	b016      	add	sp, #88	; 0x58
 800f516:	bd70      	pop	{r4, r5, r6, pc}

0800f518 <__smakebuf_r>:
 800f518:	898b      	ldrh	r3, [r1, #12]
 800f51a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f51c:	079d      	lsls	r5, r3, #30
 800f51e:	4606      	mov	r6, r0
 800f520:	460c      	mov	r4, r1
 800f522:	d507      	bpl.n	800f534 <__smakebuf_r+0x1c>
 800f524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	6123      	str	r3, [r4, #16]
 800f52c:	2301      	movs	r3, #1
 800f52e:	6163      	str	r3, [r4, #20]
 800f530:	b002      	add	sp, #8
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	ab01      	add	r3, sp, #4
 800f536:	466a      	mov	r2, sp
 800f538:	f7ff ffca 	bl	800f4d0 <__swhatbuf_r>
 800f53c:	9900      	ldr	r1, [sp, #0]
 800f53e:	4605      	mov	r5, r0
 800f540:	4630      	mov	r0, r6
 800f542:	f000 fb69 	bl	800fc18 <_malloc_r>
 800f546:	b948      	cbnz	r0, 800f55c <__smakebuf_r+0x44>
 800f548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f54c:	059a      	lsls	r2, r3, #22
 800f54e:	d4ef      	bmi.n	800f530 <__smakebuf_r+0x18>
 800f550:	f023 0303 	bic.w	r3, r3, #3
 800f554:	f043 0302 	orr.w	r3, r3, #2
 800f558:	81a3      	strh	r3, [r4, #12]
 800f55a:	e7e3      	b.n	800f524 <__smakebuf_r+0xc>
 800f55c:	4b0d      	ldr	r3, [pc, #52]	; (800f594 <__smakebuf_r+0x7c>)
 800f55e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	6020      	str	r0, [r4, #0]
 800f564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f568:	81a3      	strh	r3, [r4, #12]
 800f56a:	9b00      	ldr	r3, [sp, #0]
 800f56c:	6163      	str	r3, [r4, #20]
 800f56e:	9b01      	ldr	r3, [sp, #4]
 800f570:	6120      	str	r0, [r4, #16]
 800f572:	b15b      	cbz	r3, 800f58c <__smakebuf_r+0x74>
 800f574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f578:	4630      	mov	r0, r6
 800f57a:	f000 fd6f 	bl	801005c <_isatty_r>
 800f57e:	b128      	cbz	r0, 800f58c <__smakebuf_r+0x74>
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	f023 0303 	bic.w	r3, r3, #3
 800f586:	f043 0301 	orr.w	r3, r3, #1
 800f58a:	81a3      	strh	r3, [r4, #12]
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	431d      	orrs	r5, r3
 800f590:	81a5      	strh	r5, [r4, #12]
 800f592:	e7cd      	b.n	800f530 <__smakebuf_r+0x18>
 800f594:	0800f369 	.word	0x0800f369

0800f598 <malloc>:
 800f598:	4b02      	ldr	r3, [pc, #8]	; (800f5a4 <malloc+0xc>)
 800f59a:	4601      	mov	r1, r0
 800f59c:	6818      	ldr	r0, [r3, #0]
 800f59e:	f000 bb3b 	b.w	800fc18 <_malloc_r>
 800f5a2:	bf00      	nop
 800f5a4:	20000024 	.word	0x20000024

0800f5a8 <_Balloc>:
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	460e      	mov	r6, r1
 800f5b0:	b93d      	cbnz	r5, 800f5c2 <_Balloc+0x1a>
 800f5b2:	2010      	movs	r0, #16
 800f5b4:	f7ff fff0 	bl	800f598 <malloc>
 800f5b8:	6260      	str	r0, [r4, #36]	; 0x24
 800f5ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f5be:	6005      	str	r5, [r0, #0]
 800f5c0:	60c5      	str	r5, [r0, #12]
 800f5c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f5c4:	68eb      	ldr	r3, [r5, #12]
 800f5c6:	b183      	cbz	r3, 800f5ea <_Balloc+0x42>
 800f5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f5d0:	b9b8      	cbnz	r0, 800f602 <_Balloc+0x5a>
 800f5d2:	2101      	movs	r1, #1
 800f5d4:	fa01 f506 	lsl.w	r5, r1, r6
 800f5d8:	1d6a      	adds	r2, r5, #5
 800f5da:	0092      	lsls	r2, r2, #2
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f000 fabf 	bl	800fb60 <_calloc_r>
 800f5e2:	b160      	cbz	r0, 800f5fe <_Balloc+0x56>
 800f5e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f5e8:	e00e      	b.n	800f608 <_Balloc+0x60>
 800f5ea:	2221      	movs	r2, #33	; 0x21
 800f5ec:	2104      	movs	r1, #4
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f000 fab6 	bl	800fb60 <_calloc_r>
 800f5f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5f6:	60e8      	str	r0, [r5, #12]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1e4      	bne.n	800f5c8 <_Balloc+0x20>
 800f5fe:	2000      	movs	r0, #0
 800f600:	bd70      	pop	{r4, r5, r6, pc}
 800f602:	6802      	ldr	r2, [r0, #0]
 800f604:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f608:	2300      	movs	r3, #0
 800f60a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f60e:	e7f7      	b.n	800f600 <_Balloc+0x58>

0800f610 <_Bfree>:
 800f610:	b570      	push	{r4, r5, r6, lr}
 800f612:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f614:	4606      	mov	r6, r0
 800f616:	460d      	mov	r5, r1
 800f618:	b93c      	cbnz	r4, 800f62a <_Bfree+0x1a>
 800f61a:	2010      	movs	r0, #16
 800f61c:	f7ff ffbc 	bl	800f598 <malloc>
 800f620:	6270      	str	r0, [r6, #36]	; 0x24
 800f622:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f626:	6004      	str	r4, [r0, #0]
 800f628:	60c4      	str	r4, [r0, #12]
 800f62a:	b13d      	cbz	r5, 800f63c <_Bfree+0x2c>
 800f62c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f62e:	686a      	ldr	r2, [r5, #4]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f636:	6029      	str	r1, [r5, #0]
 800f638:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f63c:	bd70      	pop	{r4, r5, r6, pc}

0800f63e <__multadd>:
 800f63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f642:	690d      	ldr	r5, [r1, #16]
 800f644:	461f      	mov	r7, r3
 800f646:	4606      	mov	r6, r0
 800f648:	460c      	mov	r4, r1
 800f64a:	f101 0c14 	add.w	ip, r1, #20
 800f64e:	2300      	movs	r3, #0
 800f650:	f8dc 0000 	ldr.w	r0, [ip]
 800f654:	b281      	uxth	r1, r0
 800f656:	fb02 7101 	mla	r1, r2, r1, r7
 800f65a:	0c0f      	lsrs	r7, r1, #16
 800f65c:	0c00      	lsrs	r0, r0, #16
 800f65e:	fb02 7000 	mla	r0, r2, r0, r7
 800f662:	b289      	uxth	r1, r1
 800f664:	3301      	adds	r3, #1
 800f666:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f66a:	429d      	cmp	r5, r3
 800f66c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f670:	f84c 1b04 	str.w	r1, [ip], #4
 800f674:	dcec      	bgt.n	800f650 <__multadd+0x12>
 800f676:	b1d7      	cbz	r7, 800f6ae <__multadd+0x70>
 800f678:	68a3      	ldr	r3, [r4, #8]
 800f67a:	42ab      	cmp	r3, r5
 800f67c:	dc12      	bgt.n	800f6a4 <__multadd+0x66>
 800f67e:	6861      	ldr	r1, [r4, #4]
 800f680:	4630      	mov	r0, r6
 800f682:	3101      	adds	r1, #1
 800f684:	f7ff ff90 	bl	800f5a8 <_Balloc>
 800f688:	6922      	ldr	r2, [r4, #16]
 800f68a:	3202      	adds	r2, #2
 800f68c:	f104 010c 	add.w	r1, r4, #12
 800f690:	4680      	mov	r8, r0
 800f692:	0092      	lsls	r2, r2, #2
 800f694:	300c      	adds	r0, #12
 800f696:	f7fe f9a1 	bl	800d9dc <memcpy>
 800f69a:	4621      	mov	r1, r4
 800f69c:	4630      	mov	r0, r6
 800f69e:	f7ff ffb7 	bl	800f610 <_Bfree>
 800f6a2:	4644      	mov	r4, r8
 800f6a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6a8:	3501      	adds	r5, #1
 800f6aa:	615f      	str	r7, [r3, #20]
 800f6ac:	6125      	str	r5, [r4, #16]
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6b4 <__hi0bits>:
 800f6b4:	0c02      	lsrs	r2, r0, #16
 800f6b6:	0412      	lsls	r2, r2, #16
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	b9b2      	cbnz	r2, 800f6ea <__hi0bits+0x36>
 800f6bc:	0403      	lsls	r3, r0, #16
 800f6be:	2010      	movs	r0, #16
 800f6c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f6c4:	bf04      	itt	eq
 800f6c6:	021b      	lsleq	r3, r3, #8
 800f6c8:	3008      	addeq	r0, #8
 800f6ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f6ce:	bf04      	itt	eq
 800f6d0:	011b      	lsleq	r3, r3, #4
 800f6d2:	3004      	addeq	r0, #4
 800f6d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f6d8:	bf04      	itt	eq
 800f6da:	009b      	lsleq	r3, r3, #2
 800f6dc:	3002      	addeq	r0, #2
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	db06      	blt.n	800f6f0 <__hi0bits+0x3c>
 800f6e2:	005b      	lsls	r3, r3, #1
 800f6e4:	d503      	bpl.n	800f6ee <__hi0bits+0x3a>
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	4770      	bx	lr
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	e7e8      	b.n	800f6c0 <__hi0bits+0xc>
 800f6ee:	2020      	movs	r0, #32
 800f6f0:	4770      	bx	lr

0800f6f2 <__lo0bits>:
 800f6f2:	6803      	ldr	r3, [r0, #0]
 800f6f4:	f013 0207 	ands.w	r2, r3, #7
 800f6f8:	4601      	mov	r1, r0
 800f6fa:	d00b      	beq.n	800f714 <__lo0bits+0x22>
 800f6fc:	07da      	lsls	r2, r3, #31
 800f6fe:	d423      	bmi.n	800f748 <__lo0bits+0x56>
 800f700:	0798      	lsls	r0, r3, #30
 800f702:	bf49      	itett	mi
 800f704:	085b      	lsrmi	r3, r3, #1
 800f706:	089b      	lsrpl	r3, r3, #2
 800f708:	2001      	movmi	r0, #1
 800f70a:	600b      	strmi	r3, [r1, #0]
 800f70c:	bf5c      	itt	pl
 800f70e:	600b      	strpl	r3, [r1, #0]
 800f710:	2002      	movpl	r0, #2
 800f712:	4770      	bx	lr
 800f714:	b298      	uxth	r0, r3
 800f716:	b9a8      	cbnz	r0, 800f744 <__lo0bits+0x52>
 800f718:	0c1b      	lsrs	r3, r3, #16
 800f71a:	2010      	movs	r0, #16
 800f71c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f720:	bf04      	itt	eq
 800f722:	0a1b      	lsreq	r3, r3, #8
 800f724:	3008      	addeq	r0, #8
 800f726:	071a      	lsls	r2, r3, #28
 800f728:	bf04      	itt	eq
 800f72a:	091b      	lsreq	r3, r3, #4
 800f72c:	3004      	addeq	r0, #4
 800f72e:	079a      	lsls	r2, r3, #30
 800f730:	bf04      	itt	eq
 800f732:	089b      	lsreq	r3, r3, #2
 800f734:	3002      	addeq	r0, #2
 800f736:	07da      	lsls	r2, r3, #31
 800f738:	d402      	bmi.n	800f740 <__lo0bits+0x4e>
 800f73a:	085b      	lsrs	r3, r3, #1
 800f73c:	d006      	beq.n	800f74c <__lo0bits+0x5a>
 800f73e:	3001      	adds	r0, #1
 800f740:	600b      	str	r3, [r1, #0]
 800f742:	4770      	bx	lr
 800f744:	4610      	mov	r0, r2
 800f746:	e7e9      	b.n	800f71c <__lo0bits+0x2a>
 800f748:	2000      	movs	r0, #0
 800f74a:	4770      	bx	lr
 800f74c:	2020      	movs	r0, #32
 800f74e:	4770      	bx	lr

0800f750 <__i2b>:
 800f750:	b510      	push	{r4, lr}
 800f752:	460c      	mov	r4, r1
 800f754:	2101      	movs	r1, #1
 800f756:	f7ff ff27 	bl	800f5a8 <_Balloc>
 800f75a:	2201      	movs	r2, #1
 800f75c:	6144      	str	r4, [r0, #20]
 800f75e:	6102      	str	r2, [r0, #16]
 800f760:	bd10      	pop	{r4, pc}

0800f762 <__multiply>:
 800f762:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f766:	4614      	mov	r4, r2
 800f768:	690a      	ldr	r2, [r1, #16]
 800f76a:	6923      	ldr	r3, [r4, #16]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	bfb8      	it	lt
 800f770:	460b      	movlt	r3, r1
 800f772:	4688      	mov	r8, r1
 800f774:	bfbc      	itt	lt
 800f776:	46a0      	movlt	r8, r4
 800f778:	461c      	movlt	r4, r3
 800f77a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f77e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f786:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f78a:	eb07 0609 	add.w	r6, r7, r9
 800f78e:	42b3      	cmp	r3, r6
 800f790:	bfb8      	it	lt
 800f792:	3101      	addlt	r1, #1
 800f794:	f7ff ff08 	bl	800f5a8 <_Balloc>
 800f798:	f100 0514 	add.w	r5, r0, #20
 800f79c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	4573      	cmp	r3, lr
 800f7a6:	d316      	bcc.n	800f7d6 <__multiply+0x74>
 800f7a8:	f104 0214 	add.w	r2, r4, #20
 800f7ac:	f108 0114 	add.w	r1, r8, #20
 800f7b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f7b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f7b8:	9300      	str	r3, [sp, #0]
 800f7ba:	9b00      	ldr	r3, [sp, #0]
 800f7bc:	9201      	str	r2, [sp, #4]
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d80c      	bhi.n	800f7dc <__multiply+0x7a>
 800f7c2:	2e00      	cmp	r6, #0
 800f7c4:	dd03      	ble.n	800f7ce <__multiply+0x6c>
 800f7c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d05d      	beq.n	800f88a <__multiply+0x128>
 800f7ce:	6106      	str	r6, [r0, #16]
 800f7d0:	b003      	add	sp, #12
 800f7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d6:	f843 2b04 	str.w	r2, [r3], #4
 800f7da:	e7e3      	b.n	800f7a4 <__multiply+0x42>
 800f7dc:	f8b2 b000 	ldrh.w	fp, [r2]
 800f7e0:	f1bb 0f00 	cmp.w	fp, #0
 800f7e4:	d023      	beq.n	800f82e <__multiply+0xcc>
 800f7e6:	4689      	mov	r9, r1
 800f7e8:	46ac      	mov	ip, r5
 800f7ea:	f04f 0800 	mov.w	r8, #0
 800f7ee:	f859 4b04 	ldr.w	r4, [r9], #4
 800f7f2:	f8dc a000 	ldr.w	sl, [ip]
 800f7f6:	b2a3      	uxth	r3, r4
 800f7f8:	fa1f fa8a 	uxth.w	sl, sl
 800f7fc:	fb0b a303 	mla	r3, fp, r3, sl
 800f800:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f804:	f8dc 4000 	ldr.w	r4, [ip]
 800f808:	4443      	add	r3, r8
 800f80a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f80e:	fb0b 840a 	mla	r4, fp, sl, r8
 800f812:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f816:	46e2      	mov	sl, ip
 800f818:	b29b      	uxth	r3, r3
 800f81a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f81e:	454f      	cmp	r7, r9
 800f820:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f824:	f84a 3b04 	str.w	r3, [sl], #4
 800f828:	d82b      	bhi.n	800f882 <__multiply+0x120>
 800f82a:	f8cc 8004 	str.w	r8, [ip, #4]
 800f82e:	9b01      	ldr	r3, [sp, #4]
 800f830:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f834:	3204      	adds	r2, #4
 800f836:	f1ba 0f00 	cmp.w	sl, #0
 800f83a:	d020      	beq.n	800f87e <__multiply+0x11c>
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	4689      	mov	r9, r1
 800f840:	46a8      	mov	r8, r5
 800f842:	f04f 0b00 	mov.w	fp, #0
 800f846:	f8b9 c000 	ldrh.w	ip, [r9]
 800f84a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f84e:	fb0a 440c 	mla	r4, sl, ip, r4
 800f852:	445c      	add	r4, fp
 800f854:	46c4      	mov	ip, r8
 800f856:	b29b      	uxth	r3, r3
 800f858:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f85c:	f84c 3b04 	str.w	r3, [ip], #4
 800f860:	f859 3b04 	ldr.w	r3, [r9], #4
 800f864:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f868:	0c1b      	lsrs	r3, r3, #16
 800f86a:	fb0a b303 	mla	r3, sl, r3, fp
 800f86e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f872:	454f      	cmp	r7, r9
 800f874:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f878:	d805      	bhi.n	800f886 <__multiply+0x124>
 800f87a:	f8c8 3004 	str.w	r3, [r8, #4]
 800f87e:	3504      	adds	r5, #4
 800f880:	e79b      	b.n	800f7ba <__multiply+0x58>
 800f882:	46d4      	mov	ip, sl
 800f884:	e7b3      	b.n	800f7ee <__multiply+0x8c>
 800f886:	46e0      	mov	r8, ip
 800f888:	e7dd      	b.n	800f846 <__multiply+0xe4>
 800f88a:	3e01      	subs	r6, #1
 800f88c:	e799      	b.n	800f7c2 <__multiply+0x60>
	...

0800f890 <__pow5mult>:
 800f890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f894:	4615      	mov	r5, r2
 800f896:	f012 0203 	ands.w	r2, r2, #3
 800f89a:	4606      	mov	r6, r0
 800f89c:	460f      	mov	r7, r1
 800f89e:	d007      	beq.n	800f8b0 <__pow5mult+0x20>
 800f8a0:	3a01      	subs	r2, #1
 800f8a2:	4c21      	ldr	r4, [pc, #132]	; (800f928 <__pow5mult+0x98>)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8aa:	f7ff fec8 	bl	800f63e <__multadd>
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	10ad      	asrs	r5, r5, #2
 800f8b2:	d035      	beq.n	800f920 <__pow5mult+0x90>
 800f8b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8b6:	b93c      	cbnz	r4, 800f8c8 <__pow5mult+0x38>
 800f8b8:	2010      	movs	r0, #16
 800f8ba:	f7ff fe6d 	bl	800f598 <malloc>
 800f8be:	6270      	str	r0, [r6, #36]	; 0x24
 800f8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8c4:	6004      	str	r4, [r0, #0]
 800f8c6:	60c4      	str	r4, [r0, #12]
 800f8c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8d0:	b94c      	cbnz	r4, 800f8e6 <__pow5mult+0x56>
 800f8d2:	f240 2171 	movw	r1, #625	; 0x271
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f7ff ff3a 	bl	800f750 <__i2b>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	6003      	str	r3, [r0, #0]
 800f8e6:	f04f 0800 	mov.w	r8, #0
 800f8ea:	07eb      	lsls	r3, r5, #31
 800f8ec:	d50a      	bpl.n	800f904 <__pow5mult+0x74>
 800f8ee:	4639      	mov	r1, r7
 800f8f0:	4622      	mov	r2, r4
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f7ff ff35 	bl	800f762 <__multiply>
 800f8f8:	4639      	mov	r1, r7
 800f8fa:	4681      	mov	r9, r0
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	f7ff fe87 	bl	800f610 <_Bfree>
 800f902:	464f      	mov	r7, r9
 800f904:	106d      	asrs	r5, r5, #1
 800f906:	d00b      	beq.n	800f920 <__pow5mult+0x90>
 800f908:	6820      	ldr	r0, [r4, #0]
 800f90a:	b938      	cbnz	r0, 800f91c <__pow5mult+0x8c>
 800f90c:	4622      	mov	r2, r4
 800f90e:	4621      	mov	r1, r4
 800f910:	4630      	mov	r0, r6
 800f912:	f7ff ff26 	bl	800f762 <__multiply>
 800f916:	6020      	str	r0, [r4, #0]
 800f918:	f8c0 8000 	str.w	r8, [r0]
 800f91c:	4604      	mov	r4, r0
 800f91e:	e7e4      	b.n	800f8ea <__pow5mult+0x5a>
 800f920:	4638      	mov	r0, r7
 800f922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f926:	bf00      	nop
 800f928:	08010b88 	.word	0x08010b88

0800f92c <__lshift>:
 800f92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f930:	460c      	mov	r4, r1
 800f932:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f936:	6923      	ldr	r3, [r4, #16]
 800f938:	6849      	ldr	r1, [r1, #4]
 800f93a:	eb0a 0903 	add.w	r9, sl, r3
 800f93e:	68a3      	ldr	r3, [r4, #8]
 800f940:	4607      	mov	r7, r0
 800f942:	4616      	mov	r6, r2
 800f944:	f109 0501 	add.w	r5, r9, #1
 800f948:	42ab      	cmp	r3, r5
 800f94a:	db32      	blt.n	800f9b2 <__lshift+0x86>
 800f94c:	4638      	mov	r0, r7
 800f94e:	f7ff fe2b 	bl	800f5a8 <_Balloc>
 800f952:	2300      	movs	r3, #0
 800f954:	4680      	mov	r8, r0
 800f956:	f100 0114 	add.w	r1, r0, #20
 800f95a:	461a      	mov	r2, r3
 800f95c:	4553      	cmp	r3, sl
 800f95e:	db2b      	blt.n	800f9b8 <__lshift+0x8c>
 800f960:	6920      	ldr	r0, [r4, #16]
 800f962:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f966:	f104 0314 	add.w	r3, r4, #20
 800f96a:	f016 021f 	ands.w	r2, r6, #31
 800f96e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f972:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f976:	d025      	beq.n	800f9c4 <__lshift+0x98>
 800f978:	f1c2 0e20 	rsb	lr, r2, #32
 800f97c:	2000      	movs	r0, #0
 800f97e:	681e      	ldr	r6, [r3, #0]
 800f980:	468a      	mov	sl, r1
 800f982:	4096      	lsls	r6, r2
 800f984:	4330      	orrs	r0, r6
 800f986:	f84a 0b04 	str.w	r0, [sl], #4
 800f98a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f98e:	459c      	cmp	ip, r3
 800f990:	fa20 f00e 	lsr.w	r0, r0, lr
 800f994:	d814      	bhi.n	800f9c0 <__lshift+0x94>
 800f996:	6048      	str	r0, [r1, #4]
 800f998:	b108      	cbz	r0, 800f99e <__lshift+0x72>
 800f99a:	f109 0502 	add.w	r5, r9, #2
 800f99e:	3d01      	subs	r5, #1
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	f7ff fe32 	bl	800f610 <_Bfree>
 800f9ac:	4640      	mov	r0, r8
 800f9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b2:	3101      	adds	r1, #1
 800f9b4:	005b      	lsls	r3, r3, #1
 800f9b6:	e7c7      	b.n	800f948 <__lshift+0x1c>
 800f9b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	e7cd      	b.n	800f95c <__lshift+0x30>
 800f9c0:	4651      	mov	r1, sl
 800f9c2:	e7dc      	b.n	800f97e <__lshift+0x52>
 800f9c4:	3904      	subs	r1, #4
 800f9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9ce:	459c      	cmp	ip, r3
 800f9d0:	d8f9      	bhi.n	800f9c6 <__lshift+0x9a>
 800f9d2:	e7e4      	b.n	800f99e <__lshift+0x72>

0800f9d4 <__mcmp>:
 800f9d4:	6903      	ldr	r3, [r0, #16]
 800f9d6:	690a      	ldr	r2, [r1, #16]
 800f9d8:	1a9b      	subs	r3, r3, r2
 800f9da:	b530      	push	{r4, r5, lr}
 800f9dc:	d10c      	bne.n	800f9f8 <__mcmp+0x24>
 800f9de:	0092      	lsls	r2, r2, #2
 800f9e0:	3014      	adds	r0, #20
 800f9e2:	3114      	adds	r1, #20
 800f9e4:	1884      	adds	r4, r0, r2
 800f9e6:	4411      	add	r1, r2
 800f9e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9f0:	4295      	cmp	r5, r2
 800f9f2:	d003      	beq.n	800f9fc <__mcmp+0x28>
 800f9f4:	d305      	bcc.n	800fa02 <__mcmp+0x2e>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	bd30      	pop	{r4, r5, pc}
 800f9fc:	42a0      	cmp	r0, r4
 800f9fe:	d3f3      	bcc.n	800f9e8 <__mcmp+0x14>
 800fa00:	e7fa      	b.n	800f9f8 <__mcmp+0x24>
 800fa02:	f04f 33ff 	mov.w	r3, #4294967295
 800fa06:	e7f7      	b.n	800f9f8 <__mcmp+0x24>

0800fa08 <__mdiff>:
 800fa08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa0c:	460d      	mov	r5, r1
 800fa0e:	4607      	mov	r7, r0
 800fa10:	4611      	mov	r1, r2
 800fa12:	4628      	mov	r0, r5
 800fa14:	4614      	mov	r4, r2
 800fa16:	f7ff ffdd 	bl	800f9d4 <__mcmp>
 800fa1a:	1e06      	subs	r6, r0, #0
 800fa1c:	d108      	bne.n	800fa30 <__mdiff+0x28>
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4638      	mov	r0, r7
 800fa22:	f7ff fdc1 	bl	800f5a8 <_Balloc>
 800fa26:	2301      	movs	r3, #1
 800fa28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa30:	bfa4      	itt	ge
 800fa32:	4623      	movge	r3, r4
 800fa34:	462c      	movge	r4, r5
 800fa36:	4638      	mov	r0, r7
 800fa38:	6861      	ldr	r1, [r4, #4]
 800fa3a:	bfa6      	itte	ge
 800fa3c:	461d      	movge	r5, r3
 800fa3e:	2600      	movge	r6, #0
 800fa40:	2601      	movlt	r6, #1
 800fa42:	f7ff fdb1 	bl	800f5a8 <_Balloc>
 800fa46:	692b      	ldr	r3, [r5, #16]
 800fa48:	60c6      	str	r6, [r0, #12]
 800fa4a:	6926      	ldr	r6, [r4, #16]
 800fa4c:	f105 0914 	add.w	r9, r5, #20
 800fa50:	f104 0214 	add.w	r2, r4, #20
 800fa54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fa58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fa5c:	f100 0514 	add.w	r5, r0, #20
 800fa60:	f04f 0e00 	mov.w	lr, #0
 800fa64:	f852 ab04 	ldr.w	sl, [r2], #4
 800fa68:	f859 4b04 	ldr.w	r4, [r9], #4
 800fa6c:	fa1e f18a 	uxtah	r1, lr, sl
 800fa70:	b2a3      	uxth	r3, r4
 800fa72:	1ac9      	subs	r1, r1, r3
 800fa74:	0c23      	lsrs	r3, r4, #16
 800fa76:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fa7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fa7e:	b289      	uxth	r1, r1
 800fa80:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fa84:	45c8      	cmp	r8, r9
 800fa86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fa8a:	4694      	mov	ip, r2
 800fa8c:	f845 3b04 	str.w	r3, [r5], #4
 800fa90:	d8e8      	bhi.n	800fa64 <__mdiff+0x5c>
 800fa92:	45bc      	cmp	ip, r7
 800fa94:	d304      	bcc.n	800faa0 <__mdiff+0x98>
 800fa96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fa9a:	b183      	cbz	r3, 800fabe <__mdiff+0xb6>
 800fa9c:	6106      	str	r6, [r0, #16]
 800fa9e:	e7c5      	b.n	800fa2c <__mdiff+0x24>
 800faa0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800faa4:	fa1e f381 	uxtah	r3, lr, r1
 800faa8:	141a      	asrs	r2, r3, #16
 800faaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800faae:	b29b      	uxth	r3, r3
 800fab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fab4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fab8:	f845 3b04 	str.w	r3, [r5], #4
 800fabc:	e7e9      	b.n	800fa92 <__mdiff+0x8a>
 800fabe:	3e01      	subs	r6, #1
 800fac0:	e7e9      	b.n	800fa96 <__mdiff+0x8e>

0800fac2 <__d2b>:
 800fac2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fac6:	460e      	mov	r6, r1
 800fac8:	2101      	movs	r1, #1
 800faca:	ec59 8b10 	vmov	r8, r9, d0
 800face:	4615      	mov	r5, r2
 800fad0:	f7ff fd6a 	bl	800f5a8 <_Balloc>
 800fad4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fad8:	4607      	mov	r7, r0
 800fada:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fade:	bb34      	cbnz	r4, 800fb2e <__d2b+0x6c>
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	f1b8 0300 	subs.w	r3, r8, #0
 800fae6:	d027      	beq.n	800fb38 <__d2b+0x76>
 800fae8:	a802      	add	r0, sp, #8
 800faea:	f840 3d08 	str.w	r3, [r0, #-8]!
 800faee:	f7ff fe00 	bl	800f6f2 <__lo0bits>
 800faf2:	9900      	ldr	r1, [sp, #0]
 800faf4:	b1f0      	cbz	r0, 800fb34 <__d2b+0x72>
 800faf6:	9a01      	ldr	r2, [sp, #4]
 800faf8:	f1c0 0320 	rsb	r3, r0, #32
 800fafc:	fa02 f303 	lsl.w	r3, r2, r3
 800fb00:	430b      	orrs	r3, r1
 800fb02:	40c2      	lsrs	r2, r0
 800fb04:	617b      	str	r3, [r7, #20]
 800fb06:	9201      	str	r2, [sp, #4]
 800fb08:	9b01      	ldr	r3, [sp, #4]
 800fb0a:	61bb      	str	r3, [r7, #24]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bf14      	ite	ne
 800fb10:	2102      	movne	r1, #2
 800fb12:	2101      	moveq	r1, #1
 800fb14:	6139      	str	r1, [r7, #16]
 800fb16:	b1c4      	cbz	r4, 800fb4a <__d2b+0x88>
 800fb18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fb1c:	4404      	add	r4, r0
 800fb1e:	6034      	str	r4, [r6, #0]
 800fb20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb24:	6028      	str	r0, [r5, #0]
 800fb26:	4638      	mov	r0, r7
 800fb28:	b003      	add	sp, #12
 800fb2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb32:	e7d5      	b.n	800fae0 <__d2b+0x1e>
 800fb34:	6179      	str	r1, [r7, #20]
 800fb36:	e7e7      	b.n	800fb08 <__d2b+0x46>
 800fb38:	a801      	add	r0, sp, #4
 800fb3a:	f7ff fdda 	bl	800f6f2 <__lo0bits>
 800fb3e:	9b01      	ldr	r3, [sp, #4]
 800fb40:	617b      	str	r3, [r7, #20]
 800fb42:	2101      	movs	r1, #1
 800fb44:	6139      	str	r1, [r7, #16]
 800fb46:	3020      	adds	r0, #32
 800fb48:	e7e5      	b.n	800fb16 <__d2b+0x54>
 800fb4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fb4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb52:	6030      	str	r0, [r6, #0]
 800fb54:	6918      	ldr	r0, [r3, #16]
 800fb56:	f7ff fdad 	bl	800f6b4 <__hi0bits>
 800fb5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fb5e:	e7e1      	b.n	800fb24 <__d2b+0x62>

0800fb60 <_calloc_r>:
 800fb60:	b538      	push	{r3, r4, r5, lr}
 800fb62:	fb02 f401 	mul.w	r4, r2, r1
 800fb66:	4621      	mov	r1, r4
 800fb68:	f000 f856 	bl	800fc18 <_malloc_r>
 800fb6c:	4605      	mov	r5, r0
 800fb6e:	b118      	cbz	r0, 800fb78 <_calloc_r+0x18>
 800fb70:	4622      	mov	r2, r4
 800fb72:	2100      	movs	r1, #0
 800fb74:	f7fd ff3d 	bl	800d9f2 <memset>
 800fb78:	4628      	mov	r0, r5
 800fb7a:	bd38      	pop	{r3, r4, r5, pc}

0800fb7c <_free_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4605      	mov	r5, r0
 800fb80:	2900      	cmp	r1, #0
 800fb82:	d045      	beq.n	800fc10 <_free_r+0x94>
 800fb84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb88:	1f0c      	subs	r4, r1, #4
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	bfb8      	it	lt
 800fb8e:	18e4      	addlt	r4, r4, r3
 800fb90:	f000 fa98 	bl	80100c4 <__malloc_lock>
 800fb94:	4a1f      	ldr	r2, [pc, #124]	; (800fc14 <_free_r+0x98>)
 800fb96:	6813      	ldr	r3, [r2, #0]
 800fb98:	4610      	mov	r0, r2
 800fb9a:	b933      	cbnz	r3, 800fbaa <_free_r+0x2e>
 800fb9c:	6063      	str	r3, [r4, #4]
 800fb9e:	6014      	str	r4, [r2, #0]
 800fba0:	4628      	mov	r0, r5
 800fba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fba6:	f000 ba8e 	b.w	80100c6 <__malloc_unlock>
 800fbaa:	42a3      	cmp	r3, r4
 800fbac:	d90c      	bls.n	800fbc8 <_free_r+0x4c>
 800fbae:	6821      	ldr	r1, [r4, #0]
 800fbb0:	1862      	adds	r2, r4, r1
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	bf04      	itt	eq
 800fbb6:	681a      	ldreq	r2, [r3, #0]
 800fbb8:	685b      	ldreq	r3, [r3, #4]
 800fbba:	6063      	str	r3, [r4, #4]
 800fbbc:	bf04      	itt	eq
 800fbbe:	1852      	addeq	r2, r2, r1
 800fbc0:	6022      	streq	r2, [r4, #0]
 800fbc2:	6004      	str	r4, [r0, #0]
 800fbc4:	e7ec      	b.n	800fba0 <_free_r+0x24>
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	685a      	ldr	r2, [r3, #4]
 800fbca:	b10a      	cbz	r2, 800fbd0 <_free_r+0x54>
 800fbcc:	42a2      	cmp	r2, r4
 800fbce:	d9fa      	bls.n	800fbc6 <_free_r+0x4a>
 800fbd0:	6819      	ldr	r1, [r3, #0]
 800fbd2:	1858      	adds	r0, r3, r1
 800fbd4:	42a0      	cmp	r0, r4
 800fbd6:	d10b      	bne.n	800fbf0 <_free_r+0x74>
 800fbd8:	6820      	ldr	r0, [r4, #0]
 800fbda:	4401      	add	r1, r0
 800fbdc:	1858      	adds	r0, r3, r1
 800fbde:	4282      	cmp	r2, r0
 800fbe0:	6019      	str	r1, [r3, #0]
 800fbe2:	d1dd      	bne.n	800fba0 <_free_r+0x24>
 800fbe4:	6810      	ldr	r0, [r2, #0]
 800fbe6:	6852      	ldr	r2, [r2, #4]
 800fbe8:	605a      	str	r2, [r3, #4]
 800fbea:	4401      	add	r1, r0
 800fbec:	6019      	str	r1, [r3, #0]
 800fbee:	e7d7      	b.n	800fba0 <_free_r+0x24>
 800fbf0:	d902      	bls.n	800fbf8 <_free_r+0x7c>
 800fbf2:	230c      	movs	r3, #12
 800fbf4:	602b      	str	r3, [r5, #0]
 800fbf6:	e7d3      	b.n	800fba0 <_free_r+0x24>
 800fbf8:	6820      	ldr	r0, [r4, #0]
 800fbfa:	1821      	adds	r1, r4, r0
 800fbfc:	428a      	cmp	r2, r1
 800fbfe:	bf04      	itt	eq
 800fc00:	6811      	ldreq	r1, [r2, #0]
 800fc02:	6852      	ldreq	r2, [r2, #4]
 800fc04:	6062      	str	r2, [r4, #4]
 800fc06:	bf04      	itt	eq
 800fc08:	1809      	addeq	r1, r1, r0
 800fc0a:	6021      	streq	r1, [r4, #0]
 800fc0c:	605c      	str	r4, [r3, #4]
 800fc0e:	e7c7      	b.n	800fba0 <_free_r+0x24>
 800fc10:	bd38      	pop	{r3, r4, r5, pc}
 800fc12:	bf00      	nop
 800fc14:	200028dc 	.word	0x200028dc

0800fc18 <_malloc_r>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	1ccd      	adds	r5, r1, #3
 800fc1c:	f025 0503 	bic.w	r5, r5, #3
 800fc20:	3508      	adds	r5, #8
 800fc22:	2d0c      	cmp	r5, #12
 800fc24:	bf38      	it	cc
 800fc26:	250c      	movcc	r5, #12
 800fc28:	2d00      	cmp	r5, #0
 800fc2a:	4606      	mov	r6, r0
 800fc2c:	db01      	blt.n	800fc32 <_malloc_r+0x1a>
 800fc2e:	42a9      	cmp	r1, r5
 800fc30:	d903      	bls.n	800fc3a <_malloc_r+0x22>
 800fc32:	230c      	movs	r3, #12
 800fc34:	6033      	str	r3, [r6, #0]
 800fc36:	2000      	movs	r0, #0
 800fc38:	bd70      	pop	{r4, r5, r6, pc}
 800fc3a:	f000 fa43 	bl	80100c4 <__malloc_lock>
 800fc3e:	4a21      	ldr	r2, [pc, #132]	; (800fcc4 <_malloc_r+0xac>)
 800fc40:	6814      	ldr	r4, [r2, #0]
 800fc42:	4621      	mov	r1, r4
 800fc44:	b991      	cbnz	r1, 800fc6c <_malloc_r+0x54>
 800fc46:	4c20      	ldr	r4, [pc, #128]	; (800fcc8 <_malloc_r+0xb0>)
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	b91b      	cbnz	r3, 800fc54 <_malloc_r+0x3c>
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f000 f97d 	bl	800ff4c <_sbrk_r>
 800fc52:	6020      	str	r0, [r4, #0]
 800fc54:	4629      	mov	r1, r5
 800fc56:	4630      	mov	r0, r6
 800fc58:	f000 f978 	bl	800ff4c <_sbrk_r>
 800fc5c:	1c43      	adds	r3, r0, #1
 800fc5e:	d124      	bne.n	800fcaa <_malloc_r+0x92>
 800fc60:	230c      	movs	r3, #12
 800fc62:	6033      	str	r3, [r6, #0]
 800fc64:	4630      	mov	r0, r6
 800fc66:	f000 fa2e 	bl	80100c6 <__malloc_unlock>
 800fc6a:	e7e4      	b.n	800fc36 <_malloc_r+0x1e>
 800fc6c:	680b      	ldr	r3, [r1, #0]
 800fc6e:	1b5b      	subs	r3, r3, r5
 800fc70:	d418      	bmi.n	800fca4 <_malloc_r+0x8c>
 800fc72:	2b0b      	cmp	r3, #11
 800fc74:	d90f      	bls.n	800fc96 <_malloc_r+0x7e>
 800fc76:	600b      	str	r3, [r1, #0]
 800fc78:	50cd      	str	r5, [r1, r3]
 800fc7a:	18cc      	adds	r4, r1, r3
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	f000 fa22 	bl	80100c6 <__malloc_unlock>
 800fc82:	f104 000b 	add.w	r0, r4, #11
 800fc86:	1d23      	adds	r3, r4, #4
 800fc88:	f020 0007 	bic.w	r0, r0, #7
 800fc8c:	1ac3      	subs	r3, r0, r3
 800fc8e:	d0d3      	beq.n	800fc38 <_malloc_r+0x20>
 800fc90:	425a      	negs	r2, r3
 800fc92:	50e2      	str	r2, [r4, r3]
 800fc94:	e7d0      	b.n	800fc38 <_malloc_r+0x20>
 800fc96:	428c      	cmp	r4, r1
 800fc98:	684b      	ldr	r3, [r1, #4]
 800fc9a:	bf16      	itet	ne
 800fc9c:	6063      	strne	r3, [r4, #4]
 800fc9e:	6013      	streq	r3, [r2, #0]
 800fca0:	460c      	movne	r4, r1
 800fca2:	e7eb      	b.n	800fc7c <_malloc_r+0x64>
 800fca4:	460c      	mov	r4, r1
 800fca6:	6849      	ldr	r1, [r1, #4]
 800fca8:	e7cc      	b.n	800fc44 <_malloc_r+0x2c>
 800fcaa:	1cc4      	adds	r4, r0, #3
 800fcac:	f024 0403 	bic.w	r4, r4, #3
 800fcb0:	42a0      	cmp	r0, r4
 800fcb2:	d005      	beq.n	800fcc0 <_malloc_r+0xa8>
 800fcb4:	1a21      	subs	r1, r4, r0
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f000 f948 	bl	800ff4c <_sbrk_r>
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	d0cf      	beq.n	800fc60 <_malloc_r+0x48>
 800fcc0:	6025      	str	r5, [r4, #0]
 800fcc2:	e7db      	b.n	800fc7c <_malloc_r+0x64>
 800fcc4:	200028dc 	.word	0x200028dc
 800fcc8:	200028e0 	.word	0x200028e0

0800fccc <__sfputc_r>:
 800fccc:	6893      	ldr	r3, [r2, #8]
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	b410      	push	{r4}
 800fcd4:	6093      	str	r3, [r2, #8]
 800fcd6:	da08      	bge.n	800fcea <__sfputc_r+0x1e>
 800fcd8:	6994      	ldr	r4, [r2, #24]
 800fcda:	42a3      	cmp	r3, r4
 800fcdc:	db01      	blt.n	800fce2 <__sfputc_r+0x16>
 800fcde:	290a      	cmp	r1, #10
 800fce0:	d103      	bne.n	800fcea <__sfputc_r+0x1e>
 800fce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fce6:	f7fe bb65 	b.w	800e3b4 <__swbuf_r>
 800fcea:	6813      	ldr	r3, [r2, #0]
 800fcec:	1c58      	adds	r0, r3, #1
 800fcee:	6010      	str	r0, [r2, #0]
 800fcf0:	7019      	strb	r1, [r3, #0]
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcf8:	4770      	bx	lr

0800fcfa <__sfputs_r>:
 800fcfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfc:	4606      	mov	r6, r0
 800fcfe:	460f      	mov	r7, r1
 800fd00:	4614      	mov	r4, r2
 800fd02:	18d5      	adds	r5, r2, r3
 800fd04:	42ac      	cmp	r4, r5
 800fd06:	d101      	bne.n	800fd0c <__sfputs_r+0x12>
 800fd08:	2000      	movs	r0, #0
 800fd0a:	e007      	b.n	800fd1c <__sfputs_r+0x22>
 800fd0c:	463a      	mov	r2, r7
 800fd0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd12:	4630      	mov	r0, r6
 800fd14:	f7ff ffda 	bl	800fccc <__sfputc_r>
 800fd18:	1c43      	adds	r3, r0, #1
 800fd1a:	d1f3      	bne.n	800fd04 <__sfputs_r+0xa>
 800fd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd20 <_vfiprintf_r>:
 800fd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd24:	460c      	mov	r4, r1
 800fd26:	b09d      	sub	sp, #116	; 0x74
 800fd28:	4617      	mov	r7, r2
 800fd2a:	461d      	mov	r5, r3
 800fd2c:	4606      	mov	r6, r0
 800fd2e:	b118      	cbz	r0, 800fd38 <_vfiprintf_r+0x18>
 800fd30:	6983      	ldr	r3, [r0, #24]
 800fd32:	b90b      	cbnz	r3, 800fd38 <_vfiprintf_r+0x18>
 800fd34:	f7ff fb34 	bl	800f3a0 <__sinit>
 800fd38:	4b7c      	ldr	r3, [pc, #496]	; (800ff2c <_vfiprintf_r+0x20c>)
 800fd3a:	429c      	cmp	r4, r3
 800fd3c:	d158      	bne.n	800fdf0 <_vfiprintf_r+0xd0>
 800fd3e:	6874      	ldr	r4, [r6, #4]
 800fd40:	89a3      	ldrh	r3, [r4, #12]
 800fd42:	0718      	lsls	r0, r3, #28
 800fd44:	d55e      	bpl.n	800fe04 <_vfiprintf_r+0xe4>
 800fd46:	6923      	ldr	r3, [r4, #16]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d05b      	beq.n	800fe04 <_vfiprintf_r+0xe4>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd50:	2320      	movs	r3, #32
 800fd52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd56:	2330      	movs	r3, #48	; 0x30
 800fd58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd5c:	9503      	str	r5, [sp, #12]
 800fd5e:	f04f 0b01 	mov.w	fp, #1
 800fd62:	46b8      	mov	r8, r7
 800fd64:	4645      	mov	r5, r8
 800fd66:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fd6a:	b10b      	cbz	r3, 800fd70 <_vfiprintf_r+0x50>
 800fd6c:	2b25      	cmp	r3, #37	; 0x25
 800fd6e:	d154      	bne.n	800fe1a <_vfiprintf_r+0xfa>
 800fd70:	ebb8 0a07 	subs.w	sl, r8, r7
 800fd74:	d00b      	beq.n	800fd8e <_vfiprintf_r+0x6e>
 800fd76:	4653      	mov	r3, sl
 800fd78:	463a      	mov	r2, r7
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7ff ffbc 	bl	800fcfa <__sfputs_r>
 800fd82:	3001      	adds	r0, #1
 800fd84:	f000 80c2 	beq.w	800ff0c <_vfiprintf_r+0x1ec>
 800fd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd8a:	4453      	add	r3, sl
 800fd8c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd8e:	f898 3000 	ldrb.w	r3, [r8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f000 80ba 	beq.w	800ff0c <_vfiprintf_r+0x1ec>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fda2:	9304      	str	r3, [sp, #16]
 800fda4:	9307      	str	r3, [sp, #28]
 800fda6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdaa:	931a      	str	r3, [sp, #104]	; 0x68
 800fdac:	46a8      	mov	r8, r5
 800fdae:	2205      	movs	r2, #5
 800fdb0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fdb4:	485e      	ldr	r0, [pc, #376]	; (800ff30 <_vfiprintf_r+0x210>)
 800fdb6:	f7f0 f9eb 	bl	8000190 <memchr>
 800fdba:	9b04      	ldr	r3, [sp, #16]
 800fdbc:	bb78      	cbnz	r0, 800fe1e <_vfiprintf_r+0xfe>
 800fdbe:	06d9      	lsls	r1, r3, #27
 800fdc0:	bf44      	itt	mi
 800fdc2:	2220      	movmi	r2, #32
 800fdc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdc8:	071a      	lsls	r2, r3, #28
 800fdca:	bf44      	itt	mi
 800fdcc:	222b      	movmi	r2, #43	; 0x2b
 800fdce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdd2:	782a      	ldrb	r2, [r5, #0]
 800fdd4:	2a2a      	cmp	r2, #42	; 0x2a
 800fdd6:	d02a      	beq.n	800fe2e <_vfiprintf_r+0x10e>
 800fdd8:	9a07      	ldr	r2, [sp, #28]
 800fdda:	46a8      	mov	r8, r5
 800fddc:	2000      	movs	r0, #0
 800fdde:	250a      	movs	r5, #10
 800fde0:	4641      	mov	r1, r8
 800fde2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fde6:	3b30      	subs	r3, #48	; 0x30
 800fde8:	2b09      	cmp	r3, #9
 800fdea:	d969      	bls.n	800fec0 <_vfiprintf_r+0x1a0>
 800fdec:	b360      	cbz	r0, 800fe48 <_vfiprintf_r+0x128>
 800fdee:	e024      	b.n	800fe3a <_vfiprintf_r+0x11a>
 800fdf0:	4b50      	ldr	r3, [pc, #320]	; (800ff34 <_vfiprintf_r+0x214>)
 800fdf2:	429c      	cmp	r4, r3
 800fdf4:	d101      	bne.n	800fdfa <_vfiprintf_r+0xda>
 800fdf6:	68b4      	ldr	r4, [r6, #8]
 800fdf8:	e7a2      	b.n	800fd40 <_vfiprintf_r+0x20>
 800fdfa:	4b4f      	ldr	r3, [pc, #316]	; (800ff38 <_vfiprintf_r+0x218>)
 800fdfc:	429c      	cmp	r4, r3
 800fdfe:	bf08      	it	eq
 800fe00:	68f4      	ldreq	r4, [r6, #12]
 800fe02:	e79d      	b.n	800fd40 <_vfiprintf_r+0x20>
 800fe04:	4621      	mov	r1, r4
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7fe fb26 	bl	800e458 <__swsetup_r>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d09d      	beq.n	800fd4c <_vfiprintf_r+0x2c>
 800fe10:	f04f 30ff 	mov.w	r0, #4294967295
 800fe14:	b01d      	add	sp, #116	; 0x74
 800fe16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1a:	46a8      	mov	r8, r5
 800fe1c:	e7a2      	b.n	800fd64 <_vfiprintf_r+0x44>
 800fe1e:	4a44      	ldr	r2, [pc, #272]	; (800ff30 <_vfiprintf_r+0x210>)
 800fe20:	1a80      	subs	r0, r0, r2
 800fe22:	fa0b f000 	lsl.w	r0, fp, r0
 800fe26:	4318      	orrs	r0, r3
 800fe28:	9004      	str	r0, [sp, #16]
 800fe2a:	4645      	mov	r5, r8
 800fe2c:	e7be      	b.n	800fdac <_vfiprintf_r+0x8c>
 800fe2e:	9a03      	ldr	r2, [sp, #12]
 800fe30:	1d11      	adds	r1, r2, #4
 800fe32:	6812      	ldr	r2, [r2, #0]
 800fe34:	9103      	str	r1, [sp, #12]
 800fe36:	2a00      	cmp	r2, #0
 800fe38:	db01      	blt.n	800fe3e <_vfiprintf_r+0x11e>
 800fe3a:	9207      	str	r2, [sp, #28]
 800fe3c:	e004      	b.n	800fe48 <_vfiprintf_r+0x128>
 800fe3e:	4252      	negs	r2, r2
 800fe40:	f043 0302 	orr.w	r3, r3, #2
 800fe44:	9207      	str	r2, [sp, #28]
 800fe46:	9304      	str	r3, [sp, #16]
 800fe48:	f898 3000 	ldrb.w	r3, [r8]
 800fe4c:	2b2e      	cmp	r3, #46	; 0x2e
 800fe4e:	d10e      	bne.n	800fe6e <_vfiprintf_r+0x14e>
 800fe50:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fe54:	2b2a      	cmp	r3, #42	; 0x2a
 800fe56:	d138      	bne.n	800feca <_vfiprintf_r+0x1aa>
 800fe58:	9b03      	ldr	r3, [sp, #12]
 800fe5a:	1d1a      	adds	r2, r3, #4
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	9203      	str	r2, [sp, #12]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	bfb8      	it	lt
 800fe64:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe68:	f108 0802 	add.w	r8, r8, #2
 800fe6c:	9305      	str	r3, [sp, #20]
 800fe6e:	4d33      	ldr	r5, [pc, #204]	; (800ff3c <_vfiprintf_r+0x21c>)
 800fe70:	f898 1000 	ldrb.w	r1, [r8]
 800fe74:	2203      	movs	r2, #3
 800fe76:	4628      	mov	r0, r5
 800fe78:	f7f0 f98a 	bl	8000190 <memchr>
 800fe7c:	b140      	cbz	r0, 800fe90 <_vfiprintf_r+0x170>
 800fe7e:	2340      	movs	r3, #64	; 0x40
 800fe80:	1b40      	subs	r0, r0, r5
 800fe82:	fa03 f000 	lsl.w	r0, r3, r0
 800fe86:	9b04      	ldr	r3, [sp, #16]
 800fe88:	4303      	orrs	r3, r0
 800fe8a:	f108 0801 	add.w	r8, r8, #1
 800fe8e:	9304      	str	r3, [sp, #16]
 800fe90:	f898 1000 	ldrb.w	r1, [r8]
 800fe94:	482a      	ldr	r0, [pc, #168]	; (800ff40 <_vfiprintf_r+0x220>)
 800fe96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe9a:	2206      	movs	r2, #6
 800fe9c:	f108 0701 	add.w	r7, r8, #1
 800fea0:	f7f0 f976 	bl	8000190 <memchr>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d037      	beq.n	800ff18 <_vfiprintf_r+0x1f8>
 800fea8:	4b26      	ldr	r3, [pc, #152]	; (800ff44 <_vfiprintf_r+0x224>)
 800feaa:	bb1b      	cbnz	r3, 800fef4 <_vfiprintf_r+0x1d4>
 800feac:	9b03      	ldr	r3, [sp, #12]
 800feae:	3307      	adds	r3, #7
 800feb0:	f023 0307 	bic.w	r3, r3, #7
 800feb4:	3308      	adds	r3, #8
 800feb6:	9303      	str	r3, [sp, #12]
 800feb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feba:	444b      	add	r3, r9
 800febc:	9309      	str	r3, [sp, #36]	; 0x24
 800febe:	e750      	b.n	800fd62 <_vfiprintf_r+0x42>
 800fec0:	fb05 3202 	mla	r2, r5, r2, r3
 800fec4:	2001      	movs	r0, #1
 800fec6:	4688      	mov	r8, r1
 800fec8:	e78a      	b.n	800fde0 <_vfiprintf_r+0xc0>
 800feca:	2300      	movs	r3, #0
 800fecc:	f108 0801 	add.w	r8, r8, #1
 800fed0:	9305      	str	r3, [sp, #20]
 800fed2:	4619      	mov	r1, r3
 800fed4:	250a      	movs	r5, #10
 800fed6:	4640      	mov	r0, r8
 800fed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fedc:	3a30      	subs	r2, #48	; 0x30
 800fede:	2a09      	cmp	r2, #9
 800fee0:	d903      	bls.n	800feea <_vfiprintf_r+0x1ca>
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d0c3      	beq.n	800fe6e <_vfiprintf_r+0x14e>
 800fee6:	9105      	str	r1, [sp, #20]
 800fee8:	e7c1      	b.n	800fe6e <_vfiprintf_r+0x14e>
 800feea:	fb05 2101 	mla	r1, r5, r1, r2
 800feee:	2301      	movs	r3, #1
 800fef0:	4680      	mov	r8, r0
 800fef2:	e7f0      	b.n	800fed6 <_vfiprintf_r+0x1b6>
 800fef4:	ab03      	add	r3, sp, #12
 800fef6:	9300      	str	r3, [sp, #0]
 800fef8:	4622      	mov	r2, r4
 800fefa:	4b13      	ldr	r3, [pc, #76]	; (800ff48 <_vfiprintf_r+0x228>)
 800fefc:	a904      	add	r1, sp, #16
 800fefe:	4630      	mov	r0, r6
 800ff00:	f7fd fe14 	bl	800db2c <_printf_float>
 800ff04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ff08:	4681      	mov	r9, r0
 800ff0a:	d1d5      	bne.n	800feb8 <_vfiprintf_r+0x198>
 800ff0c:	89a3      	ldrh	r3, [r4, #12]
 800ff0e:	065b      	lsls	r3, r3, #25
 800ff10:	f53f af7e 	bmi.w	800fe10 <_vfiprintf_r+0xf0>
 800ff14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff16:	e77d      	b.n	800fe14 <_vfiprintf_r+0xf4>
 800ff18:	ab03      	add	r3, sp, #12
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	4622      	mov	r2, r4
 800ff1e:	4b0a      	ldr	r3, [pc, #40]	; (800ff48 <_vfiprintf_r+0x228>)
 800ff20:	a904      	add	r1, sp, #16
 800ff22:	4630      	mov	r0, r6
 800ff24:	f7fe f8b8 	bl	800e098 <_printf_i>
 800ff28:	e7ec      	b.n	800ff04 <_vfiprintf_r+0x1e4>
 800ff2a:	bf00      	nop
 800ff2c:	08010a58 	.word	0x08010a58
 800ff30:	08010b94 	.word	0x08010b94
 800ff34:	08010a78 	.word	0x08010a78
 800ff38:	08010a38 	.word	0x08010a38
 800ff3c:	08010b9a 	.word	0x08010b9a
 800ff40:	08010b9e 	.word	0x08010b9e
 800ff44:	0800db2d 	.word	0x0800db2d
 800ff48:	0800fcfb 	.word	0x0800fcfb

0800ff4c <_sbrk_r>:
 800ff4c:	b538      	push	{r3, r4, r5, lr}
 800ff4e:	4c06      	ldr	r4, [pc, #24]	; (800ff68 <_sbrk_r+0x1c>)
 800ff50:	2300      	movs	r3, #0
 800ff52:	4605      	mov	r5, r0
 800ff54:	4608      	mov	r0, r1
 800ff56:	6023      	str	r3, [r4, #0]
 800ff58:	f7f4 fae8 	bl	800452c <_sbrk>
 800ff5c:	1c43      	adds	r3, r0, #1
 800ff5e:	d102      	bne.n	800ff66 <_sbrk_r+0x1a>
 800ff60:	6823      	ldr	r3, [r4, #0]
 800ff62:	b103      	cbz	r3, 800ff66 <_sbrk_r+0x1a>
 800ff64:	602b      	str	r3, [r5, #0]
 800ff66:	bd38      	pop	{r3, r4, r5, pc}
 800ff68:	20002ba0 	.word	0x20002ba0

0800ff6c <__sread>:
 800ff6c:	b510      	push	{r4, lr}
 800ff6e:	460c      	mov	r4, r1
 800ff70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff74:	f000 f8a8 	bl	80100c8 <_read_r>
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	bfab      	itete	ge
 800ff7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ff80:	181b      	addge	r3, r3, r0
 800ff82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff86:	bfac      	ite	ge
 800ff88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff8a:	81a3      	strhlt	r3, [r4, #12]
 800ff8c:	bd10      	pop	{r4, pc}

0800ff8e <__swrite>:
 800ff8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff92:	461f      	mov	r7, r3
 800ff94:	898b      	ldrh	r3, [r1, #12]
 800ff96:	05db      	lsls	r3, r3, #23
 800ff98:	4605      	mov	r5, r0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	4616      	mov	r6, r2
 800ff9e:	d505      	bpl.n	800ffac <__swrite+0x1e>
 800ffa0:	2302      	movs	r3, #2
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffa8:	f000 f868 	bl	801007c <_lseek_r>
 800ffac:	89a3      	ldrh	r3, [r4, #12]
 800ffae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffb6:	81a3      	strh	r3, [r4, #12]
 800ffb8:	4632      	mov	r2, r6
 800ffba:	463b      	mov	r3, r7
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc2:	f000 b817 	b.w	800fff4 <_write_r>

0800ffc6 <__sseek>:
 800ffc6:	b510      	push	{r4, lr}
 800ffc8:	460c      	mov	r4, r1
 800ffca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffce:	f000 f855 	bl	801007c <_lseek_r>
 800ffd2:	1c43      	adds	r3, r0, #1
 800ffd4:	89a3      	ldrh	r3, [r4, #12]
 800ffd6:	bf15      	itete	ne
 800ffd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffe2:	81a3      	strheq	r3, [r4, #12]
 800ffe4:	bf18      	it	ne
 800ffe6:	81a3      	strhne	r3, [r4, #12]
 800ffe8:	bd10      	pop	{r4, pc}

0800ffea <__sclose>:
 800ffea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffee:	f000 b813 	b.w	8010018 <_close_r>
	...

0800fff4 <_write_r>:
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	4c07      	ldr	r4, [pc, #28]	; (8010014 <_write_r+0x20>)
 800fff8:	4605      	mov	r5, r0
 800fffa:	4608      	mov	r0, r1
 800fffc:	4611      	mov	r1, r2
 800fffe:	2200      	movs	r2, #0
 8010000:	6022      	str	r2, [r4, #0]
 8010002:	461a      	mov	r2, r3
 8010004:	f7f4 fa42 	bl	800448c <_write>
 8010008:	1c43      	adds	r3, r0, #1
 801000a:	d102      	bne.n	8010012 <_write_r+0x1e>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	b103      	cbz	r3, 8010012 <_write_r+0x1e>
 8010010:	602b      	str	r3, [r5, #0]
 8010012:	bd38      	pop	{r3, r4, r5, pc}
 8010014:	20002ba0 	.word	0x20002ba0

08010018 <_close_r>:
 8010018:	b538      	push	{r3, r4, r5, lr}
 801001a:	4c06      	ldr	r4, [pc, #24]	; (8010034 <_close_r+0x1c>)
 801001c:	2300      	movs	r3, #0
 801001e:	4605      	mov	r5, r0
 8010020:	4608      	mov	r0, r1
 8010022:	6023      	str	r3, [r4, #0]
 8010024:	f7f4 fa4e 	bl	80044c4 <_close>
 8010028:	1c43      	adds	r3, r0, #1
 801002a:	d102      	bne.n	8010032 <_close_r+0x1a>
 801002c:	6823      	ldr	r3, [r4, #0]
 801002e:	b103      	cbz	r3, 8010032 <_close_r+0x1a>
 8010030:	602b      	str	r3, [r5, #0]
 8010032:	bd38      	pop	{r3, r4, r5, pc}
 8010034:	20002ba0 	.word	0x20002ba0

08010038 <_fstat_r>:
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	4c07      	ldr	r4, [pc, #28]	; (8010058 <_fstat_r+0x20>)
 801003c:	2300      	movs	r3, #0
 801003e:	4605      	mov	r5, r0
 8010040:	4608      	mov	r0, r1
 8010042:	4611      	mov	r1, r2
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	f7f4 fa49 	bl	80044dc <_fstat>
 801004a:	1c43      	adds	r3, r0, #1
 801004c:	d102      	bne.n	8010054 <_fstat_r+0x1c>
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	b103      	cbz	r3, 8010054 <_fstat_r+0x1c>
 8010052:	602b      	str	r3, [r5, #0]
 8010054:	bd38      	pop	{r3, r4, r5, pc}
 8010056:	bf00      	nop
 8010058:	20002ba0 	.word	0x20002ba0

0801005c <_isatty_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4c06      	ldr	r4, [pc, #24]	; (8010078 <_isatty_r+0x1c>)
 8010060:	2300      	movs	r3, #0
 8010062:	4605      	mov	r5, r0
 8010064:	4608      	mov	r0, r1
 8010066:	6023      	str	r3, [r4, #0]
 8010068:	f7f4 fa48 	bl	80044fc <_isatty>
 801006c:	1c43      	adds	r3, r0, #1
 801006e:	d102      	bne.n	8010076 <_isatty_r+0x1a>
 8010070:	6823      	ldr	r3, [r4, #0]
 8010072:	b103      	cbz	r3, 8010076 <_isatty_r+0x1a>
 8010074:	602b      	str	r3, [r5, #0]
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	20002ba0 	.word	0x20002ba0

0801007c <_lseek_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4c07      	ldr	r4, [pc, #28]	; (801009c <_lseek_r+0x20>)
 8010080:	4605      	mov	r5, r0
 8010082:	4608      	mov	r0, r1
 8010084:	4611      	mov	r1, r2
 8010086:	2200      	movs	r2, #0
 8010088:	6022      	str	r2, [r4, #0]
 801008a:	461a      	mov	r2, r3
 801008c:	f7f4 fa41 	bl	8004512 <_lseek>
 8010090:	1c43      	adds	r3, r0, #1
 8010092:	d102      	bne.n	801009a <_lseek_r+0x1e>
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	b103      	cbz	r3, 801009a <_lseek_r+0x1e>
 8010098:	602b      	str	r3, [r5, #0]
 801009a:	bd38      	pop	{r3, r4, r5, pc}
 801009c:	20002ba0 	.word	0x20002ba0

080100a0 <__ascii_mbtowc>:
 80100a0:	b082      	sub	sp, #8
 80100a2:	b901      	cbnz	r1, 80100a6 <__ascii_mbtowc+0x6>
 80100a4:	a901      	add	r1, sp, #4
 80100a6:	b142      	cbz	r2, 80100ba <__ascii_mbtowc+0x1a>
 80100a8:	b14b      	cbz	r3, 80100be <__ascii_mbtowc+0x1e>
 80100aa:	7813      	ldrb	r3, [r2, #0]
 80100ac:	600b      	str	r3, [r1, #0]
 80100ae:	7812      	ldrb	r2, [r2, #0]
 80100b0:	1c10      	adds	r0, r2, #0
 80100b2:	bf18      	it	ne
 80100b4:	2001      	movne	r0, #1
 80100b6:	b002      	add	sp, #8
 80100b8:	4770      	bx	lr
 80100ba:	4610      	mov	r0, r2
 80100bc:	e7fb      	b.n	80100b6 <__ascii_mbtowc+0x16>
 80100be:	f06f 0001 	mvn.w	r0, #1
 80100c2:	e7f8      	b.n	80100b6 <__ascii_mbtowc+0x16>

080100c4 <__malloc_lock>:
 80100c4:	4770      	bx	lr

080100c6 <__malloc_unlock>:
 80100c6:	4770      	bx	lr

080100c8 <_read_r>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	4c07      	ldr	r4, [pc, #28]	; (80100e8 <_read_r+0x20>)
 80100cc:	4605      	mov	r5, r0
 80100ce:	4608      	mov	r0, r1
 80100d0:	4611      	mov	r1, r2
 80100d2:	2200      	movs	r2, #0
 80100d4:	6022      	str	r2, [r4, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	f7f4 f9bb 	bl	8004452 <_read>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	d102      	bne.n	80100e6 <_read_r+0x1e>
 80100e0:	6823      	ldr	r3, [r4, #0]
 80100e2:	b103      	cbz	r3, 80100e6 <_read_r+0x1e>
 80100e4:	602b      	str	r3, [r5, #0]
 80100e6:	bd38      	pop	{r3, r4, r5, pc}
 80100e8:	20002ba0 	.word	0x20002ba0

080100ec <__ascii_wctomb>:
 80100ec:	b149      	cbz	r1, 8010102 <__ascii_wctomb+0x16>
 80100ee:	2aff      	cmp	r2, #255	; 0xff
 80100f0:	bf85      	ittet	hi
 80100f2:	238a      	movhi	r3, #138	; 0x8a
 80100f4:	6003      	strhi	r3, [r0, #0]
 80100f6:	700a      	strbls	r2, [r1, #0]
 80100f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80100fc:	bf98      	it	ls
 80100fe:	2001      	movls	r0, #1
 8010100:	4770      	bx	lr
 8010102:	4608      	mov	r0, r1
 8010104:	4770      	bx	lr
	...

08010108 <_init>:
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010a:	bf00      	nop
 801010c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801010e:	bc08      	pop	{r3}
 8010110:	469e      	mov	lr, r3
 8010112:	4770      	bx	lr

08010114 <_fini>:
 8010114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010116:	bf00      	nop
 8010118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801011a:	bc08      	pop	{r3}
 801011c:	469e      	mov	lr, r3
 801011e:	4770      	bx	lr
