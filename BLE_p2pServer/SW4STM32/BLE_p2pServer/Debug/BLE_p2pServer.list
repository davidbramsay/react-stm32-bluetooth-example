
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ac  20000004  0800791c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000b0  080079c8  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 000000b0  20000150  08007a61  00020150  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000001d  20000200  08007b11  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000220  08007b2e  00020220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013d8  20000234  08007b3f  00020234  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  2000160c  08007b3f  0002160c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001a8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000888  200301d0  200301d0  00030000  2**2
                  ALLOC
 17 .debug_line   0002557f  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   0004545d  00000000  00000000  000457e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00008485  00000000  00000000  0008ac3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00001e70  00000000  00000000  000930c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000ff28d  00000000  00000000  00094f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00002928  00000000  00000000  001941c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00015afe  00000000  00000000  00196af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0002de83  00000000  00000000  001ac5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      0000007b  00000000  00000000  001da471  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000061f8  00000000  00000000  001da4ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000234 	.word	0x20000234
 800015c:	00000000 	.word	0x00000000
 8000160:	08006f68 	.word	0x08006f68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000238 	.word	0x20000238
 800017c:	08006f68 	.word	0x08006f68

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000520:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000522:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000524:	3304      	adds	r3, #4

08000526 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000526:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000528:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800052a:	d3f9      	bcc.n	8000520 <CopyDataInit>
  bx lr
 800052c:	4770      	bx	lr

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800052e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000530:	3004      	adds	r0, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000532:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>
  bx lr
 8000536:	4770      	bx	lr

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopForever+0x8>)
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopForever+0xc>)
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopForever+0x10>)
 8000542:	2300      	movs	r3, #0
 8000544:	f7ff ffef 	bl	8000526 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <LoopForever+0x14>)
 800054a:	490d      	ldr	r1, [pc, #52]	; (8000580 <LoopForever+0x18>)
 800054c:	2300      	movs	r3, #0
 800054e:	f7ff fff0 	bl	8000532 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <LoopForever+0x1c>)
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <LoopForever+0x20>)
 8000556:	2300      	movs	r3, #0
 8000558:	f7ff ffeb 	bl	8000532 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800055c:	f001 fd1c 	bl	8001f98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000560:	f005 fd82 	bl	8006068 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000564:	f000 fd16 	bl	8000f94 <main>

08000568 <LoopForever>:

LoopForever:
  b LoopForever
 8000568:	e7fe      	b.n	8000568 <LoopForever>
 800056a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800056c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000570:	20000004 	.word	0x20000004
 8000574:	200000b0 	.word	0x200000b0
 8000578:	0800791c 	.word	0x0800791c
  INIT_BSS _sbss, _ebss
 800057c:	20000234 	.word	0x20000234
 8000580:	2000160c 	.word	0x2000160c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000584:	200301d0 	.word	0x200301d0
 8000588:	20030a58 	.word	0x20030a58

0800058c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_IRQHandler>

0800058e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800058e:	b570      	push	{r4, r5, r6, lr}
 8000590:	460e      	mov	r6, r1
 8000592:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000594:	460c      	mov	r4, r1
 8000596:	1ba3      	subs	r3, r4, r6
 8000598:	429d      	cmp	r5, r3
 800059a:	dc01      	bgt.n	80005a0 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800059c:	4628      	mov	r0, r5
 800059e:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80005a0:	f3af 8000 	nop.w
 80005a4:	f804 0b01 	strb.w	r0, [r4], #1
 80005a8:	e7f5      	b.n	8000596 <_read+0x8>
	...

080005ac <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80005ac:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <_sbrk+0x2c>)
 80005b0:	6819      	ldr	r1, [r3, #0]
{
 80005b2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80005b4:	b909      	cbnz	r1, 80005ba <_sbrk+0xe>
		heap_end = &end;
 80005b6:	4909      	ldr	r1, [pc, #36]	; (80005dc <_sbrk+0x30>)
 80005b8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80005ba:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80005bc:	4669      	mov	r1, sp
 80005be:	4402      	add	r2, r0
 80005c0:	428a      	cmp	r2, r1
 80005c2:	d906      	bls.n	80005d2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80005c4:	f005 fd4a 	bl	800605c <__errno>
 80005c8:	230c      	movs	r3, #12
 80005ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80005d0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80005d2:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80005d4:	e7fc      	b.n	80005d0 <_sbrk+0x24>
 80005d6:	bf00      	nop
 80005d8:	20000250 	.word	0x20000250
 80005dc:	20001610 	.word	0x20001610

080005e0 <_close>:

int _close(int file)
{
	return -1;
}
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	4770      	bx	lr

080005e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80005e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ea:	604b      	str	r3, [r1, #4]
	return 0;
}
 80005ec:	2000      	movs	r0, #0
 80005ee:	4770      	bx	lr

080005f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80005f0:	2001      	movs	r0, #1
 80005f2:	4770      	bx	lr

080005f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	4770      	bx	lr

080005f8 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80005fc:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000600:	4302      	orrs	r2, r0
 8000602:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4018      	ands	r0, r3
 8000608:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800060a:	9b01      	ldr	r3, [sp, #4]
}
 800060c:	b002      	add	sp, #8
 800060e:	4770      	bx	lr

08000610 <LL_C2_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000614:	b082      	sub	sp, #8
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000616:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800061a:	4302      	orrs	r2, r0
 800061c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000620:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000624:	4018      	ands	r0, r3
 8000626:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000628:	9b01      	ldr	r3, [sp, #4]
}
 800062a:	b002      	add	sp, #8
 800062c:	4770      	bx	lr
	...

08000630 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	b087      	sub	sp, #28
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000634:	f001 fd88 	bl	8002148 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000638:	f001 fd8e 	bl	8002158 <HAL_DBGMCU_EnableDBGStopMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800063c:	4a34      	ldr	r2, [pc, #208]	; (8000710 <APPD_Init+0xe0>)

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
  {
    if( aGpioConfigList[local_loop].enable != 0)
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800063e:	4f35      	ldr	r7, [pc, #212]	; (8000714 <APPD_Init+0xe4>)
 8000640:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  DbgTraceInit();
 800064c:	f004 fdc6 	bl	80051dc <DbgTraceInit>
  GPIO_InitTypeDef gpio_config = {0};
 8000650:	2214      	movs	r2, #20
 8000652:	2100      	movs	r1, #0
 8000654:	a801      	add	r0, sp, #4
 8000656:	f005 fd36 	bl	80060c6 <memset>
 800065a:	2300      	movs	r3, #0
    if( aGpioConfigList[local_loop].enable != 0)
 800065c:	482e      	ldr	r0, [pc, #184]	; (8000718 <APPD_Init+0xe8>)
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800065e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800071c <APPD_Init+0xec>
  gpioc_pin_list = 0;
 8000662:	461c      	mov	r4, r3
  gpiob_pin_list = 0;
 8000664:	461d      	mov	r5, r3
  gpioa_pin_list = 0;
 8000666:	461e      	mov	r6, r3
    if( aGpioConfigList[local_loop].enable != 0)
 8000668:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800066c:	7991      	ldrb	r1, [r2, #6]
 800066e:	b151      	cbz	r1, 8000686 <APPD_Init+0x56>
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000670:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
 8000674:	42b9      	cmp	r1, r7
 8000676:	d044      	beq.n	8000702 <APPD_Init+0xd2>
 8000678:	4561      	cmp	r1, ip
 800067a:	d045      	beq.n	8000708 <APPD_Init+0xd8>
 800067c:	f1b1 4f90 	cmp.w	r1, #1207959552	; 0x48000000
 8000680:	d101      	bne.n	8000686 <APPD_Init+0x56>
      {
        case (uint32_t)GPIOA:
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000682:	8892      	ldrh	r2, [r2, #4]
 8000684:	4316      	orrs	r6, r2
 8000686:	3301      	adds	r3, #1
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000688:	2b22      	cmp	r3, #34	; 0x22
 800068a:	d1ed      	bne.n	8000668 <APPD_Init+0x38>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2101      	movs	r1, #1
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	9102      	str	r1, [sp, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	9304      	str	r3, [sp, #16]

  if(gpioa_pin_list != 0)
 8000694:	b18e      	cbz	r6, 80006ba <APPD_Init+0x8a>
  {
    gpio_config.Pin = gpioa_pin_list;
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4608      	mov	r0, r1
    gpio_config.Pin = gpioa_pin_list;
 8000698:	9601      	str	r6, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	f7ff ffad 	bl	80005f8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800069e:	4608      	mov	r0, r1
 80006a0:	f7ff ffb6 	bl	8000610 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006a4:	a901      	add	r1, sp, #4
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ff99 	bl	80025e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	4631      	mov	r1, r6
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f002 f849 	bl	800274c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006ba:	b17d      	cbz	r5, 80006dc <APPD_Init+0xac>
  {
    gpio_config.Pin = gpiob_pin_list;
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	2002      	movs	r0, #2
    gpio_config.Pin = gpiob_pin_list;
 80006be:	9501      	str	r5, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	f7ff ff9a 	bl	80005f8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80006c4:	2002      	movs	r0, #2
 80006c6:	f7ff ffa3 	bl	8000610 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80006ca:	a901      	add	r1, sp, #4
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <APPD_Init+0xe4>)
 80006ce:	f001 ff87 	bl	80025e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	4629      	mov	r1, r5
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <APPD_Init+0xe4>)
 80006d8:	f002 f838 	bl	800274c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80006dc:	b17c      	cbz	r4, 80006fe <APPD_Init+0xce>
  {
    gpio_config.Pin = gpioc_pin_list;
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2004      	movs	r0, #4
    gpio_config.Pin = gpioc_pin_list;
 80006e0:	9401      	str	r4, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	f7ff ff89 	bl	80005f8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80006e6:	2004      	movs	r0, #4
 80006e8:	f7ff ff92 	bl	8000610 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80006ec:	a901      	add	r1, sp, #4
 80006ee:	480b      	ldr	r0, [pc, #44]	; (800071c <APPD_Init+0xec>)
 80006f0:	f001 ff76 	bl	80025e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	4621      	mov	r1, r4
 80006f8:	4808      	ldr	r0, [pc, #32]	; (800071c <APPD_Init+0xec>)
 80006fa:	f002 f827 	bl	800274c <HAL_GPIO_WritePin>
}
 80006fe:	b007      	add	sp, #28
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000702:	8892      	ldrh	r2, [r2, #4]
 8000704:	4315      	orrs	r5, r2
 8000706:	e7be      	b.n	8000686 <APPD_Init+0x56>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000708:	8892      	ldrh	r2, [r2, #4]
 800070a:	4314      	orrs	r4, r2
 800070c:	e7bb      	b.n	8000686 <APPD_Init+0x56>
 800070e:	bf00      	nop
 8000710:	58000800 	.word	0x58000800
 8000714:	48000400 	.word	0x48000400
 8000718:	08006f80 	.word	0x08006f80
 800071c:	48000800 	.word	0x48000800

08000720 <APPD_EnableCPU2>:
{
 8000720:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <APPD_EnableCPU2+0x34>)
{
 8000724:	b088      	sub	sp, #32
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000726:	aa01      	add	r2, sp, #4
 8000728:	f103 0618 	add.w	r6, r3, #24
 800072c:	4615      	mov	r5, r2
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	4614      	mov	r4, r2
 8000734:	c403      	stmia	r4!, {r0, r1}
 8000736:	3308      	adds	r3, #8
 8000738:	42b3      	cmp	r3, r6
 800073a:	4622      	mov	r2, r4
 800073c:	d1f7      	bne.n	800072e <APPD_EnableCPU2+0xe>
 800073e:	8819      	ldrh	r1, [r3, #0]
 8000740:	789b      	ldrb	r3, [r3, #2]
 8000742:	8021      	strh	r1, [r4, #0]
 8000744:	70a3      	strb	r3, [r4, #2]
  TL_TRACES_Init( );
 8000746:	f005 fb59 	bl	8005dfc <TL_TRACES_Init>
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800074a:	4628      	mov	r0, r5
 800074c:	f004 ff3a 	bl	80055c4 <SHCI_C2_DEBUG_Init>
}
 8000750:	b008      	add	sp, #32
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	08007090 	.word	0x08007090

08000758 <DbgOutputInit>:
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000758:	f000 bcf0 	b.w	800113c <MX_USART1_UART_Init>

0800075c <DbgOutputTraces>:
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800075c:	4613      	mov	r3, r2
 800075e:	460a      	mov	r2, r1
 8000760:	4601      	mov	r1, r0
 8000762:	2000      	movs	r0, #0
 8000764:	f000 bb6a 	b.w	8000e3c <HW_UART_Transmit_DMA>

08000768 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 8000768:	4770      	bx	lr

0800076a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800076a:	b508      	push	{r3, lr}
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800076c:	f7ff ffd8 	bl	8000720 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000770:	f000 ff2a 	bl	80015c8 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000774:	2100      	movs	r1, #0
 8000776:	2001      	movs	r0, #1
  return;
}
 8000778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800077c:	f005 bb6a 	b.w	8005e54 <UTIL_LPM_SetOffMode>

08000780 <APPE_Init>:
{
 8000780:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000786:	b088      	sub	sp, #32
 8000788:	6893      	ldr	r3, [r2, #8]
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800078a:	4c22      	ldr	r4, [pc, #136]	; (8000814 <APPE_Init+0x94>)
 800078c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000790:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init( );
 8000792:	f005 fb57 	bl	8005e44 <UTIL_LPM_Init>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000796:	4920      	ldr	r1, [pc, #128]	; (8000818 <APPE_Init+0x98>)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 f947 	bl	8000a2c <HW_TS_Init>
  APPD_Init();
 800079e:	f7ff ff47 	bl	8000630 <APPD_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80007a2:	2101      	movs	r1, #1
 80007a4:	4608      	mov	r0, r1
 80007a6:	f005 fb55 	bl	8005e54 <UTIL_LPM_SetOffMode>
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f001 fb64 	bl	8001e78 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f001 fb61 	bl	8001e78 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007b6:	2002      	movs	r0, #2
 80007b8:	f001 fb5e 	bl	8001e78 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80007bc:	2001      	movs	r0, #1
 80007be:	f001 fb83 	bl	8001ec8 <BSP_LED_On>
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80007c2:	2101      	movs	r1, #1
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fb9b 	bl	8001f00 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80007ca:	2101      	movs	r1, #1
 80007cc:	4608      	mov	r0, r1
 80007ce:	f001 fb97 	bl	8001f00 <BSP_PB_Init>
  TL_Init();
 80007d2:	f005 fa33 	bl	8005c3c <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <APPE_Init+0x9c>)
 80007d8:	2100      	movs	r1, #0
 80007da:	2010      	movs	r0, #16
 80007dc:	f005 fb6c 	bl	8005eb8 <UTIL_SEQ_RegTask>
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007e0:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <APPE_Init+0xa0>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <APPE_Init+0xa4>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007e6:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007e8:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007ea:	f004 ff13 	bl	8005614 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007ee:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 80007f2:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007f4:	f504 7306 	add.w	r3, r4, #536	; 0x218
 80007f8:	9303      	str	r3, [sp, #12]
  TL_MM_Init( &tl_mm_config );
 80007fa:	a802      	add	r0, sp, #8
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007fc:	f240 533c 	movw	r3, #1340	; 0x53c
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000800:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000804:	9305      	str	r3, [sp, #20]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000806:	9404      	str	r4, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 8000808:	f005 faca 	bl	8005da0 <TL_MM_Init>
  TL_Enable();
 800080c:	f005 fa14 	bl	8005c38 <TL_Enable>
}
 8000810:	b008      	add	sp, #32
 8000812:	bd10      	pop	{r4, pc}
 8000814:	200301d8 	.word	0x200301d8
 8000818:	20001538 	.word	0x20001538
 800081c:	08005661 	.word	0x08005661
 8000820:	08000769 	.word	0x08000769
 8000824:	0800076b 	.word	0x0800076b

08000828 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 8000828:	4770      	bx	lr

0800082a <UTIL_SEQ_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800082a:	f04f 30ff 	mov.w	r0, #4294967295
 800082e:	f005 bb8f 	b.w	8005f50 <UTIL_SEQ_Run>

08000832 <shci_notify_asynch_evt>:
}

void shci_notify_asynch_evt(void* pdata)
{
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000832:	2100      	movs	r1, #0
 8000834:	2010      	movs	r0, #16
 8000836:	f005 bb4f 	b.w	8005ed8 <UTIL_SEQ_SetTask>

0800083a <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800083a:	2002      	movs	r0, #2
 800083c:	f005 bb7a 	b.w	8005f34 <UTIL_SEQ_SetEvt>

08000840 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000840:	2002      	movs	r0, #2
 8000842:	f005 bbf1 	b.w	8006028 <UTIL_SEQ_WaitEvt>

08000846 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
  switch (GPIO_Pin)
 8000846:	2802      	cmp	r0, #2
 8000848:	d007      	beq.n	800085a <HAL_GPIO_EXTI_Callback+0x14>
 800084a:	2810      	cmp	r0, #16
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_EXTI_Callback+0x10>
 800084e:	2801      	cmp	r0, #1
 8000850:	d105      	bne.n	800085e <HAL_GPIO_EXTI_Callback+0x18>
    case BUTTON_SW1_PIN:
     APP_BLE_Key_Button1_Action();
      break; 

    case BUTTON_SW2_PIN:
      APP_BLE_Key_Button2_Action();
 8000852:	f001 b8f3 	b.w	8001a3c <APP_BLE_Key_Button2_Action>
     APP_BLE_Key_Button1_Action();
 8000856:	f001 b8ef 	b.w	8001a38 <APP_BLE_Key_Button1_Action>
      break; 

    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
 800085a:	f001 b8f3 	b.w	8001a44 <APP_BLE_Key_Button3_Action>
    default:
      break;

  }
  return;
}
 800085e:	4770      	bx	lr

08000860 <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <ReadRtcSsrValue+0x18>)
 8000862:	6a90      	ldr	r0, [r2, #40]	; 0x28

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000864:	6a93      	ldr	r3, [r2, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000866:	b280      	uxth	r0, r0
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000868:	b29b      	uxth	r3, r3

  while(first_read != second_read)
 800086a:	4298      	cmp	r0, r3
 800086c:	d100      	bne.n	8000870 <ReadRtcSsrValue+0x10>

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
  }

  return second_read;
}
 800086e:	4770      	bx	lr
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000870:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000872:	4618      	mov	r0, r3
 8000874:	b28b      	uxth	r3, r1
 8000876:	e7f8      	b.n	800086a <ReadRtcSsrValue+0xa>
 8000878:	40002800 	.word	0x40002800

0800087c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <UnlinkTimer+0x60>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4282      	cmp	r2, r0
 8000884:	f04f 0418 	mov.w	r4, #24
 8000888:	d115      	bne.n	80008b6 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	705a      	strb	r2, [r3, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000890:	fb04 3200 	mla	r2, r4, r0, r3
 8000894:	7e52      	ldrb	r2, [r2, #25]
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800089a:	2218      	movs	r2, #24
 800089c:	fb02 3000 	mla	r0, r2, r0, r3
 80008a0:	2201      	movs	r2, #1
 80008a2:	7402      	strb	r2, [r0, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	2a06      	cmp	r2, #6
 80008a8:	d104      	bne.n	80008b4 <UnlinkTimer+0x38>
 80008aa:	b919      	cbnz	r1, 80008b4 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295
 80008b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  return;
}
 80008b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 80008b6:	fb04 3500 	mla	r5, r4, r0, r3
 80008ba:	7e2e      	ldrb	r6, [r5, #24]
    next_id = aTimerContext[TimerID].NextID;
 80008bc:	7e6a      	ldrb	r2, [r5, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80008be:	7e6f      	ldrb	r7, [r5, #25]
 80008c0:	fb04 3606 	mla	r6, r4, r6, r3
    next_id = aTimerContext[TimerID].NextID;
 80008c4:	b2d2      	uxtb	r2, r2
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80008c6:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008c8:	2a06      	cmp	r2, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80008ca:	7677      	strb	r7, [r6, #25]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80008cc:	bf1f      	itttt	ne
 80008ce:	7e2d      	ldrbne	r5, [r5, #24]
 80008d0:	fb04 3202 	mlane	r2, r4, r2, r3
 80008d4:	b2ed      	uxtbne	r5, r5
 80008d6:	7615      	strbne	r5, [r2, #24]
 80008d8:	e7df      	b.n	800089a <UnlinkTimer+0x1e>
 80008da:	bf00      	nop
 80008dc:	200000b0 	.word	0x200000b0

080008e0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80008e0:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80008e2:	4c0d      	ldr	r4, [pc, #52]	; (8000918 <ReturnTimeElapsed+0x38>)
 80008e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80008e8:	3301      	adds	r3, #1
 80008ea:	d013      	beq.n	8000914 <ReturnTimeElapsed+0x34>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80008ec:	f7ff ffb8 	bl	8000860 <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 80008f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80008f4:	4283      	cmp	r3, r0
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <ReturnTimeElapsed+0x3c>)
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
      return_value = SSRValueOnLastSetup + wrap_counter;
 80008f8:	bf3b      	ittet	cc
 80008fa:	f8d4 1094 	ldrcc.w	r1, [r4, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80008fe:	881a      	ldrhcc	r2, [r3, #0]
      return_value = SSRValueOnLastSetup - return_value;
 8000900:	f8d4 2094 	ldrcs.w	r2, [r4, #148]	; 0x94
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000904:	1852      	addcc	r2, r2, r1
 8000906:	1a10      	subs	r0, r2, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000908:	789a      	ldrb	r2, [r3, #2]
    return_value = return_value >> WakeupTimerDivider;
 800090a:	78db      	ldrb	r3, [r3, #3]
    return_value = return_value*AsynchPrescalerUserConfig;
 800090c:	4350      	muls	r0, r2
    return_value = return_value >> WakeupTimerDivider;
 800090e:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 8000910:	b280      	uxth	r0, r0
 8000912:	bd10      	pop	{r4, pc}
    return_value = 0;
 8000914:	2000      	movs	r0, #0
 8000916:	e7fb      	b.n	8000910 <ReturnTimeElapsed+0x30>
 8000918:	200000b0 	.word	0x200000b0
 800091c:	20000258 	.word	0x20000258

08000920 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000924:	4e3d      	ldr	r6, [pc, #244]	; (8000a1c <RescheduleTimerList+0xfc>)

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <RescheduleTimerList+0x100>)
 8000928:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	f8d8 3000 	ldr.w	r3, [r8]
 8000932:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000936:	d003      	beq.n	8000940 <RescheduleTimerList+0x20>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	f012 0f04 	tst.w	r2, #4
 800093e:	e7fa      	b.n	8000936 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000940:	689a      	ldr	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000942:	4d38      	ldr	r5, [pc, #224]	; (8000a24 <RescheduleTimerList+0x104>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000948:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 800094a:	782f      	ldrb	r7, [r5, #0]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800094c:	2318      	movs	r3, #24
  localTimerID = CurrentRunningTimerID;
 800094e:	b2ff      	uxtb	r7, r7
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000950:	fb03 5307 	mla	r3, r3, r7, r5
 8000954:	68dc      	ldr	r4, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000956:	f7ff ffc3 	bl	80008e0 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 800095a:	42a0      	cmp	r0, r4
 800095c:	d907      	bls.n	800096e <RescheduleTimerList+0x4e>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800095e:	2301      	movs	r3, #1
 8000960:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
    wakeup_timer_value = 0;
 8000964:	2300      	movs	r3, #0
  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000966:	2418      	movs	r4, #24
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000968:	f04f 0c00 	mov.w	ip, #0
 800096c:	e01b      	b.n	80009a6 <RescheduleTimerList+0x86>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800096e:	8933      	ldrh	r3, [r6, #8]
 8000970:	4403      	add	r3, r0
 8000972:	42a3      	cmp	r3, r4
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000974:	bf39      	ittee	cc
 8000976:	8933      	ldrhcc	r3, [r6, #8]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000978:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 800097a:	1a23      	subcs	r3, r4, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800097c:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 800097e:	bf34      	ite	cc
 8000980:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 8000982:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000984:	f885 2098 	strb.w	r2, [r5, #152]	; 0x98
 8000988:	e7ed      	b.n	8000966 <RescheduleTimerList+0x46>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800098a:	fb04 5207 	mla	r2, r4, r7, r5
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800098e:	fb04 5707 	mla	r7, r4, r7, r5
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000992:	68d1      	ldr	r1, [r2, #12]
 8000994:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000996:	bf97      	itett	ls
 8000998:	68d1      	ldrls	r1, [r2, #12]
      aTimerContext[localTimerID].CountLeft = 0;
 800099a:	f8c2 c00c 	strhi.w	ip, [r2, #12]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800099e:	1a09      	subls	r1, r1, r0
 80009a0:	60d1      	strls	r1, [r2, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 80009a2:	7e7f      	ldrb	r7, [r7, #25]
 80009a4:	b2ff      	uxtb	r7, r7
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009a6:	2f06      	cmp	r7, #6
 80009a8:	d1ef      	bne.n	800098a <RescheduleTimerList+0x6a>
  if(Value == 0)
 80009aa:	b943      	cbnz	r3, 80009be <RescheduleTimerList+0x9e>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80009ac:	f7ff ff58 	bl	8000860 <ReadRtcSsrValue>
 80009b0:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80009b4:	2003      	movs	r0, #3
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 80009b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80009ba:	f001 bc53 	b.w	8002264 <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d802      	bhi.n	80009c8 <RescheduleTimerList+0xa8>
 80009c2:	78f2      	ldrb	r2, [r6, #3]
 80009c4:	2a01      	cmp	r2, #1
 80009c6:	d026      	beq.n	8000a16 <RescheduleTimerList+0xf6>
      Value -= 1;
 80009c8:	3b01      	subs	r3, #1
 80009ca:	b29c      	uxth	r4, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80009cc:	f8d8 3000 	ldr.w	r3, [r8]
 80009d0:	68da      	ldr	r2, [r3, #12]
 80009d2:	0752      	lsls	r2, r2, #29
 80009d4:	d5fc      	bpl.n	80009d0 <RescheduleTimerList+0xb0>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80009d6:	68d9      	ldr	r1, [r3, #12]
 80009d8:	b2c9      	uxtb	r1, r1
 80009da:	f461 6190 	orn	r1, r1, #1152	; 0x480
 80009de:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <RescheduleTimerList+0x108>)
 80009e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009e6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80009e8:	2003      	movs	r0, #3
 80009ea:	f001 fc4b 	bl	8002284 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <RescheduleTimerList+0x100>)
 80009f0:	695a      	ldr	r2, [r3, #20]
 80009f2:	0c12      	lsrs	r2, r2, #16
 80009f4:	0412      	lsls	r2, r2, #16
 80009f6:	4322      	orrs	r2, r4
 80009f8:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80009fa:	f7ff ff31 	bl	8000860 <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80009fe:	6873      	ldr	r3, [r6, #4]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a00:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	6893      	ldr	r3, [r2, #8]
 8000a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0c:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000a0e:	f3af 8000 	nop.w
}
 8000a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a16:	4614      	mov	r4, r2
 8000a18:	e7d8      	b.n	80009cc <RescheduleTimerList+0xac>
 8000a1a:	bf00      	nop
 8000a1c:	20000258 	.word	0x20000258
 8000a20:	40002800 	.word	0x40002800
 8000a24:	200000b0 	.word	0x200000b0
 8000a28:	58000800 	.word	0x58000800

08000a2c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000a2c:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a2e:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000a30:	4e3e      	ldr	r6, [pc, #248]	; (8000b2c <HW_TS_Init+0x100>)
  phrtc = hrtc;
 8000a32:	4c3f      	ldr	r4, [pc, #252]	; (8000b30 <HW_TS_Init+0x104>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a34:	23ca      	movs	r3, #202	; 0xca
 8000a36:	626b      	str	r3, [r5, #36]	; 0x24
 8000a38:	2353      	movs	r3, #83	; 0x53
 8000a3a:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000a3c:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 8000a3e:	6061      	str	r1, [r4, #4]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000a46:	68b3      	ldr	r3, [r6, #8]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	f1c3 0304 	rsb	r3, r3, #4
 8000a50:	b2d9      	uxtb	r1, r3
 8000a52:	70e1      	strb	r1, [r4, #3]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000a54:	6932      	ldr	r2, [r6, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a56:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 8000a5a:	fa93 f3a3 	rbit	r3, r3
 8000a5e:	fab3 f383 	clz	r3, r3
 8000a62:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000a66:	40da      	lsrs	r2, r3
 8000a68:	3201      	adds	r2, #1
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	70a2      	strb	r2, [r4, #2]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000a6e:	6933      	ldr	r3, [r6, #16]
 8000a70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a74:	3301      	adds	r3, #1
 8000a76:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	4353      	muls	r3, r2
 8000a7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000a80:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000a82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a86:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000a88:	bf88      	it	hi
 8000a8a:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a8e:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <HW_TS_Init+0x108>)
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000a90:	bf98      	it	ls
 8000a92:	b29b      	uxthls	r3, r3
 8000a94:	8123      	strh	r3, [r4, #8]
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a9c:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a9e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aa6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d137      	bne.n	8000b1e <HW_TS_Init+0xf2>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <HW_TS_Init+0x10c>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000abe:	2106      	movs	r1, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000ac0:	7418      	strb	r0, [r3, #16]
 8000ac2:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8000ac6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8000aca:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8000ace:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 8000ad2:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000ad6:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000ad8:	68ab      	ldr	r3, [r5, #8]
 8000ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ade:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000ae0:	68eb      	ldr	r3, [r5, #12]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8000ae8:	60eb      	str	r3, [r5, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000aea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000aee:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000af0:	2003      	movs	r0, #3
 8000af2:	f001 fbc7 	bl	8002284 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000af6:	6863      	ldr	r3, [r4, #4]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	6893      	ldr	r3, [r2, #8]
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b02:	6863      	ldr	r3, [r4, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	22ff      	movs	r2, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000b08:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f001 fb3c 	bl	800218c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000b14:	2003      	movs	r0, #3

  return;
}
 8000b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000b1a:	f001 bb6b 	b.w	80021f4 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000b1e:	68eb      	ldr	r3, [r5, #12]
 8000b20:	055b      	lsls	r3, r3, #21
 8000b22:	d5ee      	bpl.n	8000b02 <HW_TS_Init+0xd6>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f001 fb9d 	bl	8002264 <HAL_NVIC_SetPendingIRQ>
 8000b2a:	e7ea      	b.n	8000b02 <HW_TS_Init+0xd6>
 8000b2c:	40002800 	.word	0x40002800
 8000b30:	20000258 	.word	0x20000258
 8000b34:	58000800 	.word	0x58000800
 8000b38:	200000b0 	.word	0x200000b0

08000b3c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b40:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000b46:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000b8c <HW_TS_Create+0x50>
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	f04f 0a18 	mov.w	sl, #24
 8000b50:	fb0a 9405 	mla	r4, sl, r5, r9
 8000b54:	fa5f fe85 	uxtb.w	lr, r5
 8000b58:	f894 c010 	ldrb.w	ip, [r4, #16]
 8000b5c:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 8000b60:	f1bc 0f00 	cmp.w	ip, #0
 8000b64:	d10b      	bne.n	8000b7e <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000b66:	2501      	movs	r5, #1
 8000b68:	7425      	strb	r5, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b6a:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000b6e:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 8000b70:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
    *pTimerId = loop;

    localreturnstatus = hw_ts_Successful;
 8000b72:	4630      	mov	r0, r6
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000b74:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 8000b76:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	3501      	adds	r5, #1
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000b80:	2d06      	cmp	r5, #6
 8000b82:	d1e5      	bne.n	8000b50 <HW_TS_Create+0x14>
 8000b84:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8000b88:	2001      	movs	r0, #1
  return(localreturnstatus);
 8000b8a:	e7f6      	b.n	8000b7a <HW_TS_Create+0x3e>
 8000b8c:	200000b0 	.word	0x200000b0

08000b90 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b94:	4680      	mov	r8, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b96:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9a:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b9c:	4c23      	ldr	r4, [pc, #140]	; (8000c2c <HW_TS_Stop+0x9c>)

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000b9e:	4e24      	ldr	r6, [pc, #144]	; (8000c30 <HW_TS_Stop+0xa0>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f001 fb35 	bl	8002210 <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ba6:	6867      	ldr	r7, [r4, #4]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	22ca      	movs	r2, #202	; 0xca
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
 8000bae:	2253      	movs	r2, #83	; 0x53
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000bb2:	2318      	movs	r3, #24
 8000bb4:	fb03 6308 	mla	r3, r3, r8, r6
 8000bb8:	7c1b      	ldrb	r3, [r3, #16]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d124      	bne.n	8000c08 <HW_TS_Stop+0x78>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4640      	mov	r0, r8
 8000bc2:	f7ff fe5b 	bl	800087c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000bc6:	7833      	ldrb	r3, [r6, #0]
 8000bc8:	b2db      	uxtb	r3, r3

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d127      	bne.n	8000c1e <HW_TS_Stop+0x8e>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HW_TS_Stop+0xa4>)
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000bd8:	d003      	beq.n	8000be2 <HW_TS_Stop+0x52>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	f012 0f04 	tst.w	r2, #4
 8000be0:	e7fa      	b.n	8000bd8 <HW_TS_Stop+0x48>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000be8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	0752      	lsls	r2, r2, #29
 8000bee:	d5fc      	bpl.n	8000bea <HW_TS_Stop+0x5a>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000bf8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HW_TS_Stop+0xa8>)
 8000bfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c00:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000c02:	2003      	movs	r0, #3
 8000c04:	f001 fb3e 	bl	8002284 <HAL_NVIC_ClearPendingIRQ>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000c08:	6863      	ldr	r3, [r4, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	22ff      	movs	r2, #255	; 0xff
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000c10:	2003      	movs	r0, #3
 8000c12:	f001 faef 	bl	80021f4 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c16:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8000c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000c1e:	7872      	ldrb	r2, [r6, #1]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d0f1      	beq.n	8000c08 <HW_TS_Stop+0x78>
      RescheduleTimerList();
 8000c24:	f7ff fe7c 	bl	8000920 <RescheduleTimerList>
 8000c28:	e7ee      	b.n	8000c08 <HW_TS_Stop+0x78>
 8000c2a:	bf00      	nop
 8000c2c:	20000258 	.word	0x20000258
 8000c30:	200000b0 	.word	0x200000b0
 8000c34:	40002800 	.word	0x40002800
 8000c38:	58000800 	.word	0x58000800

08000c3c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000c40:	4c4b      	ldr	r4, [pc, #300]	; (8000d70 <HW_TS_Start+0x134>)
 8000c42:	2318      	movs	r3, #24
 8000c44:	fb03 4300 	mla	r3, r3, r0, r4
{
 8000c48:	4605      	mov	r5, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000c4a:	7c1b      	ldrb	r3, [r3, #16]
 8000c4c:	2b02      	cmp	r3, #2
{
 8000c4e:	460f      	mov	r7, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000c50:	d101      	bne.n	8000c56 <HW_TS_Start+0x1a>
  {
    HW_TS_Stop( timer_id );
 8000c52:	f7ff ff9d 	bl	8000b90 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c56:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5a:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f001 fad7 	bl	8002210 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c62:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <HW_TS_Start+0x138>)
 8000c64:	6853      	ldr	r3, [r2, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	21ca      	movs	r1, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000c6a:	2618      	movs	r6, #24
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c6c:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000c6e:	fb06 4905 	mla	r9, r6, r5, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c72:	2153      	movs	r1, #83	; 0x53
 8000c74:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000c76:	2302      	movs	r3, #2
 8000c78:	f889 3010 	strb.w	r3, [r9, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000c7c:	f8c9 700c 	str.w	r7, [r9, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000c80:	f8c9 7008 	str.w	r7, [r9, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c84:	7823      	ldrb	r3, [r4, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b06      	cmp	r3, #6
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d11b      	bne.n	8000cc6 <HW_TS_Start+0x8a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c8e:	7822      	ldrb	r2, [r4, #0]
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	7062      	strb	r2, [r4, #1]
    CurrentRunningTimerID = TimerID;
 8000c94:	7025      	strb	r5, [r4, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c96:	f889 3019 	strb.w	r3, [r9, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    time_elapsed = 0;
 8000ca2:	2000      	movs	r0, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000ca4:	7823      	ldrb	r3, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000ca6:	7862      	ldrb	r2, [r4, #1]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d05a      	beq.n	8000d62 <HW_TS_Start+0x126>
  {
    RescheduleTimerList();
 8000cac:	f7ff fe38 	bl	8000920 <RescheduleTimerList>
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f001 fa9b 	bl	80021f4 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cbe:	f388 8810 	msr	PRIMASK, r8
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8000cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    time_elapsed = ReturnTimeElapsed();
 8000cc6:	f7ff fe0b 	bl	80008e0 <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000cca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000cce:	4403      	add	r3, r0
 8000cd0:	f8c9 300c 	str.w	r3, [r9, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 8000cd4:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000cd8:	7823      	ldrb	r3, [r4, #0]
 8000cda:	fb06 4303 	mla	r3, r6, r3, r4
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d323      	bcc.n	8000d2c <HW_TS_Start+0xf0>
      timer_id_lookup = CurrentRunningTimerID;
 8000ce4:	7823      	ldrb	r3, [r4, #0]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ce6:	b2db      	uxtb	r3, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ce8:	fb06 4203 	mla	r2, r6, r3, r4
 8000cec:	7e52      	ldrb	r2, [r2, #25]
 8000cee:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000cf0:	2a06      	cmp	r2, #6
 8000cf2:	d004      	beq.n	8000cfe <HW_TS_Start+0xc2>
 8000cf4:	fb06 4202 	mla	r2, r6, r2, r4
 8000cf8:	68d2      	ldr	r2, [r2, #12]
 8000cfa:	4291      	cmp	r1, r2
 8000cfc:	d212      	bcs.n	8000d24 <HW_TS_Start+0xe8>
  next_id = aTimerContext[RefTimerID].NextID;
 8000cfe:	2118      	movs	r1, #24
 8000d00:	fb01 4203 	mla	r2, r1, r3, r4
 8000d04:	7e52      	ldrb	r2, [r2, #25]
 8000d06:	b2d2      	uxtb	r2, r2
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d08:	2a06      	cmp	r2, #6
    aTimerContext[next_id].PreviousID = TimerID;
 8000d0a:	bf1c      	itt	ne
 8000d0c:	fb01 4102 	mlane	r1, r1, r2, r4
 8000d10:	760d      	strbne	r5, [r1, #24]
  aTimerContext[TimerID].NextID = next_id;
 8000d12:	2118      	movs	r1, #24
 8000d14:	fb01 4605 	mla	r6, r1, r5, r4
 8000d18:	7672      	strb	r2, [r6, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000d1a:	7633      	strb	r3, [r6, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000d1c:	fb01 4303 	mla	r3, r1, r3, r4
 8000d20:	765d      	strb	r5, [r3, #25]
 8000d22:	e7bf      	b.n	8000ca4 <HW_TS_Start+0x68>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d24:	fb06 4303 	mla	r3, r6, r3, r4
 8000d28:	7e5b      	ldrb	r3, [r3, #25]
 8000d2a:	e7dc      	b.n	8000ce6 <HW_TS_Start+0xaa>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d2c:	7822      	ldrb	r2, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 8000d2e:	7823      	ldrb	r3, [r4, #0]
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d30:	b2d2      	uxtb	r2, r2
  if(RefTimerID != CurrentRunningTimerID)
 8000d32:	429a      	cmp	r2, r3
 8000d34:	fb06 f302 	mul.w	r3, r6, r2
 8000d38:	d00f      	beq.n	8000d5a <HW_TS_Start+0x11e>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000d3a:	4423      	add	r3, r4
 8000d3c:	7e19      	ldrb	r1, [r3, #24]
 8000d3e:	b2c9      	uxtb	r1, r1
    aTimerContext[previous_id].NextID = TimerID;
 8000d40:	fb06 4601 	mla	r6, r6, r1, r4
 8000d44:	7675      	strb	r5, [r6, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d46:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000d4a:	f889 1018 	strb.w	r1, [r9, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d4e:	761d      	strb	r5, [r3, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d50:	7823      	ldrb	r3, [r4, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	7063      	strb	r3, [r4, #1]
      CurrentRunningTimerID = TimerID;
 8000d56:	7025      	strb	r5, [r4, #0]
 8000d58:	e7a4      	b.n	8000ca4 <HW_TS_Start+0x68>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d5a:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d5e:	4423      	add	r3, r4
 8000d60:	e7f5      	b.n	8000d4e <HW_TS_Start+0x112>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000d62:	2318      	movs	r3, #24
 8000d64:	fb03 4405 	mla	r4, r3, r5, r4
 8000d68:	68e3      	ldr	r3, [r4, #12]
 8000d6a:	1a18      	subs	r0, r3, r0
 8000d6c:	60e0      	str	r0, [r4, #12]
 8000d6e:	e79f      	b.n	8000cb0 <HW_TS_Start+0x74>
 8000d70:	200000b0 	.word	0x200000b0
 8000d74:	20000258 	.word	0x20000258

08000d78 <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 8000d78:	4710      	bx	r2
	...

08000d7c <HW_TS_RTC_Wakeup_Handler>:
{
 8000d7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d80:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d86:	4e2a      	ldr	r6, [pc, #168]	; (8000e30 <HW_TS_RTC_Wakeup_Handler+0xb4>)
 8000d88:	6873      	ldr	r3, [r6, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f04f 0bca 	mov.w	fp, #202	; 0xca
 8000d90:	f04f 0853 	mov.w	r8, #83	; 0x53
 8000d94:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
 8000d98:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000da2:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 8000da4:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <HW_TS_RTC_Wakeup_Handler+0xb8>)
 8000da6:	7814      	ldrb	r4, [r2, #0]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000da8:	2518      	movs	r5, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8000daa:	b2e4      	uxtb	r4, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000dac:	fb05 2504 	mla	r5, r5, r4, r2
 8000db0:	7c29      	ldrb	r1, [r5, #16]
 8000db2:	2902      	cmp	r1, #2
 8000db4:	d12f      	bne.n	8000e16 <HW_TS_RTC_Wakeup_Handler+0x9a>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000db6:	f8d5 a004 	ldr.w	sl, [r5, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000dba:	f8d5 9014 	ldr.w	r9, [r5, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000dbe:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 8000dc2:	b31b      	cbz	r3, 8000e0c <HW_TS_RTC_Wakeup_Handler+0x90>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000dc4:	7c69      	ldrb	r1, [r5, #17]
 8000dc6:	b2c9      	uxtb	r1, r1
 8000dc8:	2901      	cmp	r1, #1
 8000dca:	d119      	bne.n	8000e00 <HW_TS_RTC_Wakeup_Handler+0x84>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f7ff fd55 	bl	800087c <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dd2:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dd6:	68a9      	ldr	r1, [r5, #8]
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f7ff ff2f 	bl	8000c3c <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dde:	6873      	ldr	r3, [r6, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000de2:	4652      	mov	r2, sl
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000de4:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000de8:	4621      	mov	r1, r4
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dea:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000dee:	4648      	mov	r0, r9
 8000df0:	f7ff ffc2 	bl	8000d78 <HW_TS_RTC_Int_AppNot>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000df4:	6873      	ldr	r3, [r6, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	22ff      	movs	r2, #255	; 0xff
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e00:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Stop(local_current_running_timer_id);
 8000e04:	4620      	mov	r0, r4
 8000e06:	f7ff fec3 	bl	8000b90 <HW_TS_Stop>
 8000e0a:	e7e8      	b.n	8000dde <HW_TS_RTC_Wakeup_Handler+0x62>
      RescheduleTimerList();
 8000e0c:	f7ff fd88 	bl	8000920 <RescheduleTimerList>
 8000e10:	f387 8810 	msr	PRIMASK, r7
 8000e14:	e7ee      	b.n	8000df4 <HW_TS_RTC_Wakeup_Handler+0x78>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	0752      	lsls	r2, r2, #29
 8000e1a:	d5fc      	bpl.n	8000e16 <HW_TS_RTC_Wakeup_Handler+0x9a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e24:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <HW_TS_RTC_Wakeup_Handler+0xbc>)
 8000e28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	e7ef      	b.n	8000e10 <HW_TS_RTC_Wakeup_Handler+0x94>
 8000e30:	20000258 	.word	0x20000258
 8000e34:	200000b0 	.word	0x200000b0
 8000e38:	58000800 	.word	0x58000800

08000e3c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000e3c:	b508      	push	{r3, lr}
    HAL_StatusTypeDef hal_status = HAL_OK;
    hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 8000e3e:	b118      	cbz	r0, 8000e48 <HW_UART_Transmit_DMA+0xc>
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d00f      	beq.n	8000e64 <HW_UART_Transmit_DMA+0x28>
    hw_status_t hw_status = hw_uart_ok;
 8000e44:	2000      	movs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 8000e46:	bd08      	pop	{r3, pc}
            HW_huart1TxCb = cb;
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HW_UART_Transmit_DMA+0x34>)
 8000e4a:	6003      	str	r3, [r0, #0]
            huart1.Instance = USART1;
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <HW_UART_Transmit_DMA+0x38>)
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HW_UART_Transmit_DMA+0x3c>)
            hlpuart1.Instance = LPUART1;
 8000e50:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8000e52:	f002 fe7b 	bl	8003b4c <HAL_UART_Transmit_DMA>
    switch (hal_status)
 8000e56:	2802      	cmp	r0, #2
 8000e58:	d0f5      	beq.n	8000e46 <HW_UART_Transmit_DMA+0xa>
 8000e5a:	2803      	cmp	r0, #3
 8000e5c:	d0f3      	beq.n	8000e46 <HW_UART_Transmit_DMA+0xa>
 8000e5e:	2801      	cmp	r0, #1
 8000e60:	d1f0      	bne.n	8000e44 <HW_UART_Transmit_DMA+0x8>
 8000e62:	e7f0      	b.n	8000e46 <HW_UART_Transmit_DMA+0xa>
            HW_hlpuart1TxCb = cb;
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HW_UART_Transmit_DMA+0x40>)
 8000e66:	6003      	str	r3, [r0, #0]
            hlpuart1.Instance = LPUART1;
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HW_UART_Transmit_DMA+0x44>)
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HW_UART_Transmit_DMA+0x48>)
 8000e6c:	e7f0      	b.n	8000e50 <HW_UART_Transmit_DMA+0x14>
 8000e6e:	bf00      	nop
 8000e70:	200013bc 	.word	0x200013bc
 8000e74:	200014ac 	.word	0x200014ac
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	200013b0 	.word	0x200013b0
 8000e80:	200013c0 	.word	0x200013c0
 8000e84:	40008000 	.word	0x40008000

08000e88 <HAL_UART_TxCpltCallback>:
    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    switch ((uint32_t)huart->Instance)
 8000e88:	6803      	ldr	r3, [r0, #0]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_UART_TxCpltCallback+0x20>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_UART_TxCpltCallback+0x18>
 8000e90:	f502 4238 	add.w	r2, r2, #47104	; 0xb800
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d105      	bne.n	8000ea4 <HAL_UART_TxCpltCallback+0x1c>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_UART_TxCpltCallback+0x24>)
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b113      	cbz	r3, 8000ea4 <HAL_UART_TxCpltCallback+0x1c>
            {
                HW_hlpuart1TxCb();
 8000e9e:	4718      	bx	r3
            if(HW_hlpuart1TxCb)
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_UART_TxCpltCallback+0x28>)
 8000ea2:	e7fa      	b.n	8000e9a <HAL_UART_TxCpltCallback+0x12>
        default:
            break;
    }

    return;
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40008000 	.word	0x40008000
 8000eac:	200013bc 	.word	0x200013bc
 8000eb0:	200013b0 	.word	0x200013b0

08000eb4 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000eb8:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec2:	4018      	ands	r0, r3
 8000ec4:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000ec6:	9b01      	ldr	r3, [sp, #4]
}
 8000ec8:	b002      	add	sp, #8
 8000eca:	4770      	bx	lr

08000ecc <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000ed0:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ed4:	4302      	orrs	r2, r0
 8000ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4018      	ands	r0, r3
 8000edc:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000ede:	9b01      	ldr	r3, [sp, #4]
}
 8000ee0:	b002      	add	sp, #8
 8000ee2:	4770      	bx	lr

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee8:	2248      	movs	r2, #72	; 0x48
 8000eea:	2100      	movs	r1, #0
 8000eec:	a808      	add	r0, sp, #32
 8000eee:	f005 f8ea 	bl	80060c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef2:	221c      	movs	r2, #28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	a801      	add	r0, sp, #4
 8000ef8:	f005 f8e5 	bl	80060c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efc:	2100      	movs	r1, #0
 8000efe:	2250      	movs	r2, #80	; 0x50
 8000f00:	a81a      	add	r0, sp, #104	; 0x68
 8000f02:	f005 f8e0 	bl	80060c6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f06:	f001 fc33 	bl	8002770 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0e:	2400      	movs	r4, #0
 8000f10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000f14:	f023 0318 	bic.w	r3, r3, #24
 8000f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8000f20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f28:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8000f2c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f30:	9413      	str	r4, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f36:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	2207      	movs	r2, #7
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f40:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f44:	2701      	movs	r7, #1
 8000f46:	f44f 7680 	mov.w	r6, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4a:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4e:	930c      	str	r3, [sp, #48]	; 0x30
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f50:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f52:	e9cd 760a 	strd	r7, r6, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f56:	f001 fcb7 	bl	80028c8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f5a:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f60:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f64:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f68:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f6c:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f6e:	f001 ff83 	bl	8002e78 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000f72:	f643 0303 	movw	r3, #14339	; 0x3803
 8000f76:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000f78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8000f7c:	e9cd 352b 	strd	r3, r5, [sp, #172]	; 0xac
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000f82:	2310      	movs	r3, #16
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f84:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f88:	962a      	str	r6, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000f8a:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f002 f915 	bl	80031ba <HAL_RCCEx_PeriphCLKConfig>
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f90:	b02f      	add	sp, #188	; 0xbc
 8000f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f94 <main>:
{
 8000f94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000f96:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  HAL_Init();
 8000f9a:	f001 f8a1 	bl	80020e0 <HAL_Init>
 8000f9e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000fa2:	015e      	lsls	r6, r3, #5
 8000fa4:	d513      	bpl.n	8000fce <main+0x3a>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000fa6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000faa:	00dd      	lsls	r5, r3, #3
 8000fac:	d40f      	bmi.n	8000fce <main+0x3a>

static void Reset_BackupDomain( void )
{
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000fae:	f001 fbdf 	bl	8002770 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8000fb2:	f001 fbdd 	bl	8002770 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fb6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fc2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000fce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fd2:	223f      	movs	r2, #63	; 0x3f
 8000fd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fda:	6523      	str	r3, [r4, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000fdc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000fe4:	9b01      	ldr	r3, [sp, #4]
 8000fe6:	4b4d      	ldr	r3, [pc, #308]	; (800111c <main+0x188>)
 8000fe8:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fea:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000ff2:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000ffa:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8001002:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800100a:	615a      	str	r2, [r3, #20]
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800100c:	2000      	movs	r0, #0
 800100e:	f004 fa0d 	bl	800542c <OTP_Read>
  if (p_otp)
 8001012:	b158      	cbz	r0, 800102c <main+0x98>
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001014:	4b42      	ldr	r3, [pc, #264]	; (8001120 <main+0x18c>)
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001016:	7982      	ldrb	r2, [r0, #6]
 8001018:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800101c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001020:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001024:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001028:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  SystemClock_Config();
 800102c:	f7ff ff5a 	bl	8000ee4 <SystemClock_Config>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001030:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <main+0x190>)
  hrtc.Instance = RTC;
 8001032:	4d3d      	ldr	r5, [pc, #244]	; (8001128 <main+0x194>)
 8001034:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001038:	2400      	movs	r4, #0
 800103a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800103e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001042:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8001046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2004      	movs	r0, #4
 800104c:	f7ff ff3e 	bl	8000ecc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ff3b 	bl	8000ecc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff ff38 	bl	8000ecc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800105c:	2004      	movs	r0, #4
 800105e:	f7ff ff29 	bl	8000eb4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff26 	bl	8000eb4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ff23 	bl	8000eb4 <LL_AHB1_GRP1_EnableClock>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800106e:	4622      	mov	r2, r4
 8001070:	210f      	movs	r1, #15
 8001072:	200e      	movs	r0, #14
 8001074:	f001 f88a 	bl	800218c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001078:	200e      	movs	r0, #14
 800107a:	f001 f8bb 	bl	80021f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800107e:	4622      	mov	r2, r4
 8001080:	210f      	movs	r1, #15
 8001082:	203a      	movs	r0, #58	; 0x3a
 8001084:	f001 f882 	bl	800218c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001088:	203a      	movs	r0, #58	; 0x3a
 800108a:	f001 f8b3 	bl	80021f4 <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <main+0x198>)
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001090:	220f      	movs	r2, #15
 8001092:	f647 73ff 	movw	r3, #32767	; 0x7fff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001096:	e9c0 5400 	strd	r5, r4, [r0]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800109a:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800109e:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010a0:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010a4:	6144      	str	r4, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010a6:	f002 fa7d 	bl	80035a4 <HAL_RTC_Init>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010aa:	23ca      	movs	r3, #202	; 0xca
 80010ac:	626b      	str	r3, [r5, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010ae:	2353      	movs	r3, #83	; 0x53
 80010b0:	626b      	str	r3, [r5, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010b2:	68ab      	ldr	r3, [r5, #8]
 80010b4:	f023 0307 	bic.w	r3, r3, #7
 80010b8:	60ab      	str	r3, [r5, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80010ba:	23ff      	movs	r3, #255	; 0xff
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010bc:	2210      	movs	r2, #16
 80010be:	626b      	str	r3, [r5, #36]	; 0x24
 80010c0:	4621      	mov	r1, r4
 80010c2:	a802      	add	r0, sp, #8
 80010c4:	f004 ffff 	bl	80060c6 <memset>
	  htim2.Instance = TIM1;
 80010c8:	4d19      	ldr	r5, [pc, #100]	; (8001130 <main+0x19c>)
	  htim2.Init.Prescaler = 65536;
 80010ca:	491a      	ldr	r1, [pc, #104]	; (8001134 <main+0x1a0>)
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	60ac      	str	r4, [r5, #8]
	  htim2.Init.Prescaler = 65536;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	e9c5 1300 	strd	r1, r3, [r5]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010dc:	e9c5 0303 	strd	r0, r3, [r5, #12]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e0:	4628      	mov	r0, r5
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	61ac      	str	r4, [r5, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e4:	f002 fc60 	bl	80039a8 <HAL_TIM_Base_Init>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ec:	a902      	add	r1, sp, #8
 80010ee:	4628      	mov	r0, r5
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	9302      	str	r3, [sp, #8]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f2:	f002 fc7d 	bl	80039f0 <HAL_TIM_ConfigClockSource>
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f6:	4628      	mov	r0, r5
 80010f8:	f002 fc56 	bl	80039a8 <HAL_TIM_Base_Init>
	  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80010fc:	4628      	mov	r0, r5
 80010fe:	f002 fc03 	bl	8003908 <HAL_TIM_Base_Start_IT>
  APPE_Init();
 8001102:	f7ff fb3d 	bl	8000780 <APPE_Init>
  BSP_LED_On(LED_GREEN);
 8001106:	2001      	movs	r0, #1
 8001108:	f000 fede 	bl	8001ec8 <BSP_LED_On>
		ready_to_send = 1;
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <main+0x1a4>)
 800110e:	2501      	movs	r5, #1
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f004 ff1c 	bl	8005f50 <UTIL_SEQ_Run>
		ready_to_send = 1;
 8001118:	7025      	strb	r5, [r4, #0]
 800111a:	e7f9      	b.n	8001110 <main+0x17c>
 800111c:	58000c00 	.word	0x58000c00
 8001120:	cafecafe 	.word	0xcafecafe
 8001124:	58000800 	.word	0x58000800
 8001128:	40002800 	.word	0x40002800
 800112c:	20001538 	.word	0x20001538
 8001130:	200015bc 	.word	0x200015bc
 8001134:	40012c00 	.word	0x40012c00
 8001138:	20000262 	.word	0x20000262

0800113c <MX_USART1_UART_Init>:
{
 800113c:	b538      	push	{r3, r4, r5, lr}
  huart1.Init.BaudRate = 115200;
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <MX_USART1_UART_Init+0x48>)
  huart1.Instance = USART1;
 8001140:	4c11      	ldr	r4, [pc, #68]	; (8001188 <MX_USART1_UART_Init+0x4c>)
  huart1.Init.BaudRate = 115200;
 8001142:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	2500      	movs	r5, #0
  huart1.Init.BaudRate = 115200;
 8001148:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800114c:	230c      	movs	r3, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001152:	4620      	mov	r0, r4
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001158:	e9c4 3507 	strd	r3, r5, [r4, #28]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001160:	6125      	str	r5, [r4, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001162:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001166:	f003 fb8b 	bl	8004880 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	4629      	mov	r1, r5
 800116c:	4620      	mov	r0, r4
 800116e:	f003 fc0b 	bl	8004988 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001172:	4629      	mov	r1, r5
 8001174:	4620      	mov	r0, r4
 8001176:	f003 fc2b 	bl	80049d0 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800117a:	4620      	mov	r0, r4
}
 800117c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001180:	f003 bbe7 	b.w	8004952 <HAL_UARTEx_DisableFifoMode>
 8001184:	40013800 	.word	0x40013800
 8001188:	200014ac 	.word	0x200014ac

0800118c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001190:	f000 ffc8 	bl	8002124 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001194:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001196:	4606      	mov	r6, r0
  if (wait < HAL_MAX_DELAY)
 8001198:	d002      	beq.n	80011a0 <HAL_Delay+0x14>
  {
    wait += HAL_GetTickFreq();
 800119a:	f000 ffcf 	bl	800213c <HAL_GetTickFreq>
 800119e:	4404      	add	r4, r0
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011a0:	4d06      	ldr	r5, [pc, #24]	; (80011bc <HAL_Delay+0x30>)
 80011a2:	e004      	b.n	80011ae <HAL_Delay+0x22>
 80011a4:	692b      	ldr	r3, [r5, #16]
 80011a6:	f023 0304 	bic.w	r3, r3, #4
 80011aa:	612b      	str	r3, [r5, #16]
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80011ac:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	f000 ffb9 	bl	8002124 <HAL_GetTick>
 80011b2:	1b80      	subs	r0, r0, r6
 80011b4:	42a0      	cmp	r0, r4
 80011b6:	d3f5      	bcc.n	80011a4 <HAL_Delay+0x18>
  }
}
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 80011c0:	4770      	bx	lr

080011c2 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80011c6:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011ca:	4302      	orrs	r2, r0
 80011cc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	4018      	ands	r0, r3
 80011d2:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80011d4:	9b01      	ldr	r3, [sp, #4]
}
 80011d6:	b002      	add	sp, #8
 80011d8:	4770      	bx	lr

080011da <HAL_MspInit>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011de:	b082      	sub	sp, #8
 80011e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011e6:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80011e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ee:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80011f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	b002      	add	sp, #8
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	2214      	movs	r2, #20
{
 80011fc:	b08b      	sub	sp, #44	; 0x2c
 80011fe:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	2100      	movs	r1, #0
 8001202:	eb0d 0002 	add.w	r0, sp, r2
 8001206:	f004 ff5e 	bl	80060c6 <memset>
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 800120a:	6833      	ldr	r3, [r6, #0]
 800120c:	4a53      	ldr	r2, [pc, #332]	; (800135c <HAL_UART_MspInit+0x164>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d158      	bne.n	80012c4 <HAL_UART_MspInit+0xcc>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2001      	movs	r0, #1
 8001218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001228:	9b00      	ldr	r3, [sp, #0]
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2702      	movs	r7, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	f7ff ffc9 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	230c      	movs	r3, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001234:	2408      	movs	r4, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	e9cd 3705 	strd	r3, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	e9cd 5307 	strd	r5, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001246:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f001 f9ca 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001258:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	e9cd 5507 	strd	r5, r5, [sp, #28]

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800125e:	4c40      	ldr	r4, [pc, #256]	; (8001360 <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f001 f9be 	bl	80025e0 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001264:	483f      	ldr	r0, [pc, #252]	; (8001364 <HAL_UART_MspInit+0x16c>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001266:	6225      	str	r5, [r4, #32]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001268:	2311      	movs	r3, #17
 800126a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800126e:	2310      	movs	r3, #16
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001270:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001274:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001278:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800127c:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001280:	f001 f852 	bl	8002328 <HAL_DMA_Init>
 8001284:	b108      	cbz	r0, 800128a <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8001286:	f7ff ff9b 	bl	80011c0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 800128a:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800128e:	e9cd 3501 	strd	r3, r5, [sp, #4]
    pSyncConfig.SyncEnable = DISABLE;
    pSyncConfig.EventEnable = DISABLE;
    pSyncConfig.RequestNumber = 1;
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8001292:	a901      	add	r1, sp, #4
    pSyncConfig.RequestNumber = 1;
 8001294:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8001296:	4832      	ldr	r0, [pc, #200]	; (8001360 <HAL_UART_MspInit+0x168>)
    pSyncConfig.SyncEnable = DISABLE;
 8001298:	f88d 500c 	strb.w	r5, [sp, #12]
    pSyncConfig.EventEnable = DISABLE;
 800129c:	f88d 500d 	strb.w	r5, [sp, #13]
    pSyncConfig.RequestNumber = 1;
 80012a0:	9304      	str	r3, [sp, #16]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80012a2:	f001 f975 	bl	8002590 <HAL_DMAEx_ConfigMuxSync>
 80012a6:	b108      	cbz	r0, 80012ac <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80012a8:	f7ff ff8a 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80012b0:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80012b2:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80012b4:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80012b6:	f000 ff69 	bl	800218c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80012ba:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012bc:	f000 ff9a 	bl	80021f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012c0:	b00b      	add	sp, #44	; 0x2c
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART1)
 80012c4:	4a28      	ldr	r2, [pc, #160]	; (8001368 <HAL_UART_MspInit+0x170>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d1fa      	bne.n	80012c0 <HAL_UART_MspInit+0xc8>
  SET_BIT(RCC->APB2ENR, Periphs);
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2001      	movs	r0, #1
 80012d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80012e0:	9b01      	ldr	r3, [sp, #4]
 80012e2:	f7ff ff6e 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2002      	movs	r0, #2
 80012e8:	f7ff ff6b 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f2:	2407      	movs	r4, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	a905      	add	r1, sp, #20
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001300:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	e9cd 5507 	strd	r5, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f001 f96b 	bl	80025e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800130a:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2201      	movs	r2, #1
 8001312:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	a905      	add	r1, sp, #20
 8001316:	4815      	ldr	r0, [pc, #84]	; (800136c <HAL_UART_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001318:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	e9cd 2307 	strd	r2, r3, [sp, #28]
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800131e:	4c14      	ldr	r4, [pc, #80]	; (8001370 <HAL_UART_MspInit+0x178>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f001 f95e 	bl	80025e0 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001324:	4913      	ldr	r1, [pc, #76]	; (8001374 <HAL_UART_MspInit+0x17c>)
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001326:	6225      	str	r5, [r4, #32]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001328:	230f      	movs	r3, #15
 800132a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132e:	2310      	movs	r3, #16
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001330:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001334:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001336:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001338:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800133c:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001340:	f000 fff2 	bl	8002328 <HAL_DMA_Init>
 8001344:	b108      	cbz	r0, 800134a <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001346:	f7ff ff3b 	bl	80011c0 <Error_Handler>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800134e:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001350:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001352:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001354:	f000 ff1a 	bl	800218c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001358:	2024      	movs	r0, #36	; 0x24
 800135a:	e7af      	b.n	80012bc <HAL_UART_MspInit+0xc4>
 800135c:	40008000 	.word	0x40008000
 8001360:	2000155c 	.word	0x2000155c
 8001364:	40020044 	.word	0x40020044
 8001368:	40013800 	.word	0x40013800
 800136c:	48000400 	.word	0x48000400
 8001370:	2000144c 	.word	0x2000144c
 8001374:	40020444 	.word	0x40020444

08001378 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001378:	6802      	ldr	r2, [r0, #0]
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_RTC_MspInit+0x58>)
 800137c:	429a      	cmp	r2, r3
{
 800137e:	b513      	push	{r0, r1, r4, lr}
 8001380:	4604      	mov	r4, r0
  if(hrtc->Instance==RTC)
 8001382:	d122      	bne.n	80013ca <HAL_RTC_MspInit+0x52>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001384:	f001 f9f4 	bl	8002770 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8001388:	f001 f9f2 	bl	8002770 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
    __HAL_RCC_RTCAPB_CLK_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001390:	4620      	mov	r0, r4
 8001392:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001396:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800139a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800139e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80013a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013b4:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80013be:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013c0:	b002      	add	sp, #8
 80013c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80013c6:	f002 ba83 	b.w	80038d0 <HAL_RTCEx_EnableBypassShadow>
}
 80013ca:	b002      	add	sp, #8
 80013cc:	bd10      	pop	{r4, pc}
 80013ce:	bf00      	nop
 80013d0:	40002800 	.word	0x40002800

080013d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d4:	4770      	bx	lr

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	e7fe      	b.n	80013da <BusFault_Handler>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler>

080013de <SVC_Handler>:
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 be92 	b.w	800210c <HAL_IncTick>

080013e8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80013e8:	4801      	ldr	r0, [pc, #4]	; (80013f0 <DMA1_Channel4_IRQHandler+0x8>)
 80013ea:	f001 b886 	b.w	80024fa <HAL_DMA_IRQHandler>
 80013ee:	bf00      	nop
 80013f0:	2000155c 	.word	0x2000155c

080013f4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013f4:	4801      	ldr	r0, [pc, #4]	; (80013fc <USART1_IRQHandler+0x8>)
 80013f6:	f002 bc41 	b.w	8003c7c <HAL_UART_IRQHandler>
 80013fa:	bf00      	nop
 80013fc:	200014ac 	.word	0x200014ac

08001400 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001400:	4801      	ldr	r0, [pc, #4]	; (8001408 <LPUART1_IRQHandler+0x8>)
 8001402:	f002 bc3b 	b.w	8003c7c <HAL_UART_IRQHandler>
 8001406:	bf00      	nop
 8001408:	200013c0 	.word	0x200013c0

0800140c <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800140c:	4801      	ldr	r0, [pc, #4]	; (8001414 <DMA2_Channel4_IRQHandler+0x8>)
 800140e:	f001 b874 	b.w	80024fa <HAL_DMA_IRQHandler>
 8001412:	bf00      	nop
 8001414:	2000144c 	.word	0x2000144c

08001418 <EXTI4_IRQHandler>:
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8001418:	2010      	movs	r0, #16
 800141a:	f001 b99d 	b.w	8002758 <HAL_GPIO_EXTI_IRQHandler>

0800141e <EXTI0_IRQHandler>:
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800141e:	2001      	movs	r0, #1
 8001420:	f001 b99a 	b.w	8002758 <HAL_GPIO_EXTI_IRQHandler>

08001424 <RTC_WKUP_IRQHandler>:
}

void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 8001424:	f7ff bcaa 	b.w	8000d7c <HW_TS_RTC_Wakeup_Handler>

08001428 <IPCC_C1_TX_IRQHandler>:
}

void IPCC_C1_TX_IRQHandler(void)
{
  HW_IPCC_Tx_Handler();
 8001428:	f000 bc92 	b.w	8001d50 <HW_IPCC_Tx_Handler>

0800142c <IPCC_C1_RX_IRQHandler>:
  return;
}

void IPCC_C1_RX_IRQHandler(void)
{
  HW_IPCC_Rx_Handler();
 800142c:	f000 bcf0 	b.w	8001e10 <HW_IPCC_Rx_Handler>

08001430 <Switch_OFF_GPIO>:
  return;
}

static void Switch_OFF_GPIO(){
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8001430:	2001      	movs	r0, #1
 8001432:	f000 bd57 	b.w	8001ee4 <BSP_LED_Off>

08001436 <Adv_Cancel_Req>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8001436:	2100      	movs	r1, #0
 8001438:	2001      	movs	r0, #1
 800143a:	f004 bd4d 	b.w	8005ed8 <UTIL_SEQ_SetTask>

0800143e <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 800143e:	b510      	push	{r4, lr}
 8001440:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001442:	6840      	ldr	r0, [r0, #4]
 8001444:	3008      	adds	r0, #8
 8001446:	f004 fbbb 	bl	8005bc0 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800144a:	b110      	cbz	r0, 8001452 <BLE_UserEvtRx+0x14>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800144c:	2301      	movs	r3, #1
 800144e:	7023      	strb	r3, [r4, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001450:	bd10      	pop	{r4, pc}
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001452:	7020      	strb	r0, [r4, #0]
}
 8001454:	e7fc      	b.n	8001450 <BLE_UserEvtRx+0x12>

08001456 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 8001456:	b110      	cbz	r0, 800145e <BLE_StatusNot+0x8>
 8001458:	2801      	cmp	r0, #1
 800145a:	d003      	beq.n	8001464 <BLE_StatusNot+0xe>
 800145c:	4770      	bx	lr
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_PauseTask(task_id_list);
 800145e:	200f      	movs	r0, #15
 8001460:	f004 bd4e 	b.w	8005f00 <UTIL_SEQ_PauseTask>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
 8001464:	200f      	movs	r0, #15
 8001466:	f004 bd59 	b.w	8005f1c <UTIL_SEQ_ResumeTask>
	...

0800146c <Connection_Interval_Update_Req>:
{
 800146c:	b507      	push	{r0, r1, r2, lr}
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800146e:	4819      	ldr	r0, [pc, #100]	; (80014d4 <Connection_Interval_Update_Req+0x68>)
 8001470:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8001474:	2b01      	cmp	r3, #1
 8001476:	d929      	bls.n	80014cc <Connection_Interval_Update_Req+0x60>
  if(mutex == 1) { 
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <Connection_Interval_Update_Req+0x6c>)
 800147a:	7813      	ldrb	r3, [r2, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d125      	bne.n	80014cc <Connection_Interval_Update_Req+0x60>
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8001480:	4916      	ldr	r1, [pc, #88]	; (80014dc <Connection_Interval_Update_Req+0x70>)
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8001482:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
    mutex = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	7013      	strb	r3, [r2, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8001488:	780a      	ldrb	r2, [r1, #0]
 800148a:	3201      	adds	r2, #1
 800148c:	f002 0201 	and.w	r2, r2, #1
 8001490:	700a      	strb	r2, [r1, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 8001492:	4913      	ldr	r1, [pc, #76]	; (80014e0 <Connection_Interval_Update_Req+0x74>)
 8001494:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001498:	edd2 6a00 	vldr	s13, [r2]
 800149c:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80014a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80014a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014a8:	9100      	str	r1, [sp, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 2a90 	vmov	r2, s15
 80014b2:	b292      	uxth	r2, r2
    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80014b4:	4611      	mov	r1, r2
 80014b6:	f003 fe3d 	bl	8005134 <aci_l2cap_connection_parameter_update_req>
    if( result == BLE_STATUS_SUCCESS )
 80014ba:	b928      	cbnz	r0, 80014c8 <Connection_Interval_Update_Req+0x5c>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <Connection_Interval_Update_Req+0x78>)
}
 80014be:	b003      	add	sp, #12
 80014c0:	f85d eb04 	ldr.w	lr, [sp], #4
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 80014c4:	f004 be08 	b.w	80060d8 <iprintf>
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <Connection_Interval_Update_Req+0x7c>)
 80014ca:	e7f8      	b.n	80014be <Connection_Interval_Update_Req+0x52>
}
 80014cc:	b003      	add	sp, #12
 80014ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80014d2:	bf00      	nop
 80014d4:	20000150 	.word	0x20000150
 80014d8:	20001600 	.word	0x20001600
 80014dc:	20001601 	.word	0x20001601
 80014e0:	20000004 	.word	0x20000004
 80014e4:	0800724c 	.word	0x0800724c
 80014e8:	0800727a 	.word	0x0800727a

080014ec <Adv_Cancel>:
{
 80014ec:	b510      	push	{r4, lr}
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80014ee:	4c0c      	ldr	r4, [pc, #48]	; (8001520 <Adv_Cancel+0x34>)
  BSP_LED_Off(LED_GREEN);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f000 fcf7 	bl	8001ee4 <BSP_LED_Off>
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80014f6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d00f      	beq.n	800151e <Adv_Cancel+0x32>
    result = aci_gap_set_non_discoverable();
 80014fe:	f003 fa8b 	bl	8004a18 <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001502:	2300      	movs	r3, #0
 8001504:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    if (result == BLE_STATUS_SUCCESS)
 8001508:	b938      	cbnz	r0, 800151a <Adv_Cancel+0x2e>
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <Adv_Cancel+0x38>)
 800150c:	f004 fde4 	bl	80060d8 <iprintf>
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <Adv_Cancel+0x3c>)
}
 8001512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8001516:	f004 bddf 	b.w	80060d8 <iprintf>
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <Adv_Cancel+0x40>)
 800151c:	e7f9      	b.n	8001512 <Adv_Cancel+0x26>
}
 800151e:	bd10      	pop	{r4, pc}
 8001520:	20000150 	.word	0x20000150
 8001524:	080072b8 	.word	0x080072b8
 8001528:	080072a2 	.word	0x080072a2
 800152c:	080072be 	.word	0x080072be

08001530 <Adv_Request.constprop.2>:
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 8001530:	b570      	push	{r4, r5, r6, lr}
    Min_Inter = AdvIntervalMin;
 8001532:	4c1e      	ldr	r4, [pc, #120]	; (80015ac <Adv_Request.constprop.2+0x7c>)
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 8001534:	b088      	sub	sp, #32
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001536:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
    Min_Inter = AdvIntervalMin;
 800153a:	f8b4 5094 	ldrh.w	r5, [r4, #148]	; 0x94
    Max_Inter = AdvIntervalMax;
 800153e:	f8b4 6096 	ldrh.w	r6, [r4, #150]	; 0x96
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001542:	f7ff fb25 	bl	8000b90 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8001546:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
 800154a:	4819      	ldr	r0, [pc, #100]	; (80015b0 <Adv_Request.constprop.2+0x80>)
 800154c:	f004 fdc4 	bl	80060d8 <iprintf>
    ret = aci_gap_set_discoverable(
 8001550:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8001554:	9204      	str	r2, [sp, #16]
 8001556:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800155a:	9203      	str	r2, [sp, #12]
    BleApplicationContext.Device_Connection_Status = New_Status;
 800155c:	2301      	movs	r3, #1
    ret = aci_gap_set_discoverable(
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <Adv_Request.constprop.2+0x84>)
    BleApplicationContext.Device_Connection_Status = New_Status;
 8001560:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    ret = aci_gap_set_discoverable(
 8001564:	9202      	str	r2, [sp, #8]
 8001566:	2300      	movs	r3, #0
 8001568:	2208      	movs	r2, #8
 800156a:	e9cd 3200 	strd	r3, r2, [sp]
 800156e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001572:	4632      	mov	r2, r6
 8001574:	4629      	mov	r1, r5
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fa6c 	bl	8004a54 <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <Adv_Request.constprop.2+0x88>)
 800157e:	200e      	movs	r0, #14
 8001580:	f003 fb64 	bl	8004c4c <aci_gap_update_adv_data>
    if (ret == BLE_STATUS_SUCCESS)
 8001584:	4601      	mov	r1, r0
 8001586:	b950      	cbnz	r0, 800159e <Adv_Request.constprop.2+0x6e>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <Adv_Request.constprop.2+0x8c>)
 800158a:	f004 fe19 	bl	80061c0 <puts>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800158e:	490c      	ldr	r1, [pc, #48]	; (80015c0 <Adv_Request.constprop.2+0x90>)
 8001590:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
}
 8001594:	b008      	add	sp, #32
 8001596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800159a:	f7ff bb4f 	b.w	8000c3c <HW_TS_Start>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800159e:	4809      	ldr	r0, [pc, #36]	; (80015c4 <Adv_Request.constprop.2+0x94>)
}
 80015a0:	b008      	add	sp, #32
 80015a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80015a6:	f004 bd97 	b.w	80060d8 <iprintf>
 80015aa:	bf00      	nop
 80015ac:	20000150 	.word	0x20000150
 80015b0:	080072e1 	.word	0x080072e1
 80015b4:	080070ab 	.word	0x080070ab
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	080072fb 	.word	0x080072fb
 80015c0:	0001e046 	.word	0x0001e046
 80015c4:	08007320 	.word	0x08007320

080015c8 <APP_BLE_Init>:
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <APP_BLE_Init+0x1e4>)
{
 80015cc:	b096      	sub	sp, #88	; 0x58
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80015ce:	aa0a      	add	r2, sp, #40	; 0x28
 80015d0:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80015d4:	4615      	mov	r5, r2
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	4614      	mov	r4, r2
 80015dc:	c403      	stmia	r4!, {r0, r1}
 80015de:	3308      	adds	r3, #8
 80015e0:	42b3      	cmp	r3, r6
 80015e2:	4622      	mov	r2, r4
 80015e4:	d1f7      	bne.n	80015d6 <APP_BLE_Init+0xe>
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	7123      	strb	r3, [r4, #4]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80015ec:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <APP_BLE_Init+0x1e8>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80015ee:	6020      	str	r0, [r4, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80015f0:	a908      	add	r1, sp, #32
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80015f2:	9308      	str	r3, [sp, #32]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80015f4:	486f      	ldr	r0, [pc, #444]	; (80017b4 <APP_BLE_Init+0x1ec>)
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80015f6:	4b70      	ldr	r3, [pc, #448]	; (80017b8 <APP_BLE_Init+0x1f0>)
 80015f8:	9309      	str	r3, [sp, #36]	; 0x24
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80015fa:	f003 fe33 	bl	8005264 <hci_init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80015fe:	2101      	movs	r1, #1
 8001600:	2002      	movs	r0, #2
 8001602:	f004 fc27 	bl	8005e54 <UTIL_LPM_SetOffMode>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8001606:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <APP_BLE_Init+0x1f4>)
 8001608:	2100      	movs	r1, #0
 800160a:	2008      	movs	r0, #8
 800160c:	f004 fc54 	bl	8005eb8 <UTIL_SEQ_RegTask>
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8001610:	4628      	mov	r0, r5
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8001612:	4d6b      	ldr	r5, [pc, #428]	; (80017c0 <APP_BLE_Init+0x1f8>)
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8001614:	2400      	movs	r4, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8001616:	f003 ffc7 	bl	80055a8 <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800161a:	f8ad 4018 	strh.w	r4, [sp, #24]
  hci_reset();
 800161e:	f003 fd13 	bl	8005048 <hci_reset>
 8001622:	682b      	ldr	r3, [r5, #0]
  if(udn != 0xFFFFFFFF)
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	f000 80b8 	beq.w	800179a <APP_BLE_Init+0x1d2>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800162a:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <APP_BLE_Init+0x1fc>)
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800162c:	4c66      	ldr	r4, [pc, #408]	; (80017c8 <APP_BLE_Init+0x200>)
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	7023      	strb	r3, [r4, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001632:	0a19      	lsrs	r1, r3, #8
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8001634:	0c1b      	lsrs	r3, r3, #16
 8001636:	70a3      	strb	r3, [r4, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8001638:	70e2      	strb	r2, [r4, #3]
 800163a:	0a13      	lsrs	r3, r2, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800163c:	0c12      	lsrs	r2, r2, #16
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800163e:	7061      	strb	r1, [r4, #1]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8001640:	7123      	strb	r3, [r4, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8001642:	7162      	strb	r2, [r4, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001644:	4622      	mov	r2, r4
 8001646:	2106      	movs	r1, #6
 8001648:	2000      	movs	r0, #0
 800164a:	f003 fc87 	bl	8004f5c <aci_hal_write_config_data>
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800164e:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <APP_BLE_Init+0x204>)
 8001650:	7962      	ldrb	r2, [r4, #5]
 8001652:	741a      	strb	r2, [r3, #16]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8001654:	7922      	ldrb	r2, [r4, #4]
 8001656:	745a      	strb	r2, [r3, #17]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8001658:	78e2      	ldrb	r2, [r4, #3]
 800165a:	749a      	strb	r2, [r3, #18]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800165c:	78a2      	ldrb	r2, [r4, #2]
 800165e:	74da      	strb	r2, [r3, #19]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8001660:	7862      	ldrb	r2, [r4, #1]
 8001662:	751a      	strb	r2, [r3, #20]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001664:	7822      	ldrb	r2, [r4, #0]
 8001666:	755a      	strb	r2, [r3, #21]
  srd_bd_addr[1] =  0x0000ED6E;
 8001668:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800166c:	9309      	str	r3, [sp, #36]	; 0x24
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800166e:	682b      	ldr	r3, [r5, #0]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001670:	9308      	str	r3, [sp, #32]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8001672:	aa08      	add	r2, sp, #32
 8001674:	2106      	movs	r1, #6
 8001676:	202e      	movs	r0, #46	; 0x2e
 8001678:	f003 fc70 	bl	8004f5c <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <APP_BLE_Init+0x208>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800167e:	4d55      	ldr	r5, [pc, #340]	; (80017d4 <APP_BLE_Init+0x20c>)
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8001680:	2110      	movs	r1, #16
 8001682:	2018      	movs	r0, #24
 8001684:	f003 fc6a 	bl	8004f5c <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001688:	4a53      	ldr	r2, [pc, #332]	; (80017d8 <APP_BLE_Init+0x210>)
 800168a:	2110      	movs	r1, #16
 800168c:	2008      	movs	r0, #8
 800168e:	f003 fc65 	bl	8004f5c <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8001692:	2118      	movs	r1, #24
 8001694:	2001      	movs	r0, #1
 8001696:	f003 fc8d 	bl	8004fb4 <aci_hal_set_tx_power_level>
  aci_gatt_init();
 800169a:	f003 fb69 	bl	8004d70 <aci_gatt_init>
    aci_gap_init(role, 0,
 800169e:	f10d 031e 	add.w	r3, sp, #30
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	ab07      	add	r3, sp, #28
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2207      	movs	r2, #7
 80016aa:	f10d 031a 	add.w	r3, sp, #26
 80016ae:	2100      	movs	r1, #0
 80016b0:	2001      	movs	r0, #1
 80016b2:	f003 fa89 	bl	8004bc8 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <APP_BLE_Init+0x214>)
 80016b8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	2307      	movs	r3, #7
 80016c2:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80016c6:	f003 fc19 	bl	8004efc <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 80016ca:	ab06      	add	r3, sp, #24
 80016cc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80016da:	f003 fc0f 	bl	8004efc <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 80016de:	2202      	movs	r2, #2
 80016e0:	4611      	mov	r1, r2
 80016e2:	2000      	movs	r0, #0
 80016e4:	f003 fcfe 	bl	80050e4 <hci_le_set_default_phy>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80016e8:	2003      	movs	r0, #3
 80016ea:	7028      	strb	r0, [r5, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80016ec:	f003 fa0e 	bl	8004b0c <aci_gap_set_io_capability>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80016f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80016f4:	2301      	movs	r3, #1
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80016f6:	82aa      	strh	r2, [r5, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80016f8:	2210      	movs	r2, #16
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80016fa:	706b      	strb	r3, [r5, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80016fc:	75aa      	strb	r2, [r5, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 80016fe:	2300      	movs	r3, #0
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001700:	4a37      	ldr	r2, [pc, #220]	; (80017e0 <APP_BLE_Init+0x218>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8001702:	70eb      	strb	r3, [r5, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001704:	61aa      	str	r2, [r5, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8001706:	70ab      	strb	r3, [r5, #2]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8001708:	18ea      	adds	r2, r5, r3
 800170a:	7113      	strb	r3, [r2, #4]
 800170c:	3301      	adds	r3, #1
  for (index = 0; index < 16; index++)
 800170e:	2b10      	cmp	r3, #16
 8001710:	d1fa      	bne.n	8001708 <APP_BLE_Init+0x140>
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <APP_BLE_Init+0x218>)
 8001714:	2400      	movs	r4, #0
 8001716:	e9cd 2403 	strd	r2, r4, [sp, #12]
 800171a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	2308      	movs	r3, #8
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4611      	mov	r1, r2
 8001726:	4623      	mov	r3, r4
 8001728:	4620      	mov	r0, r4
 800172a:	f003 fa11 	bl	8004b50 <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800172e:	78ab      	ldrb	r3, [r5, #2]
 8001730:	b10b      	cbz	r3, 8001736 <APP_BLE_Init+0x16e>
     aci_gap_configure_whitelist();
 8001732:	f003 fab5 	bl	8004ca0 <aci_gap_configure_whitelist>
  SVCCTL_Init();
 8001736:	f004 fa2f 	bl	8005b98 <SVCCTL_Init>
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800173a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <APP_BLE_Init+0x21c>)
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 8001740:	84eb      	strh	r3, [r5, #38]	; 0x26
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8001742:	2100      	movs	r1, #0
 8001744:	2001      	movs	r0, #1
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001746:	f885 4090 	strb.w	r4, [r5, #144]	; 0x90
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800174a:	f004 fbb5 	bl	8005eb8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800174e:	2100      	movs	r1, #0
 8001750:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <APP_BLE_Init+0x220>)
 8001752:	2004      	movs	r0, #4
 8001754:	f004 fbb0 	bl	8005eb8 <UTIL_SEQ_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 8001758:	2006      	movs	r0, #6
 800175a:	f003 fc51 	bl	8005000 <aci_hal_set_radio_activity_mask>
  index_con_int = 0; 
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <APP_BLE_Init+0x224>)
 8001760:	701c      	strb	r4, [r3, #0]
  mutex = 1; 
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <APP_BLE_Init+0x228>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8001768:	f000 fa80 	bl	8001c6c <P2PS_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800176c:	2200      	movs	r2, #0
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <APP_BLE_Init+0x22c>)
 8001770:	4921      	ldr	r1, [pc, #132]	; (80017f8 <APP_BLE_Init+0x230>)
 8001772:	4610      	mov	r0, r2
 8001774:	f7ff f9e2 	bl	8000b3c <HW_TS_Create>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8001778:	2200      	movs	r2, #0
 800177a:	4920      	ldr	r1, [pc, #128]	; (80017fc <APP_BLE_Init+0x234>)
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <APP_BLE_Init+0x238>)
 800177e:	4610      	mov	r0, r2
 8001780:	f7ff f9dc 	bl	8000b3c <HW_TS_Create>
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	f8a5 3094 	strh.w	r3, [r5, #148]	; 0x94
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800178a:	852c      	strh	r4, [r5, #40]	; 0x28
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800178c:	23a0      	movs	r3, #160	; 0xa0
 800178e:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
   Adv_Request(APP_BLE_FAST_ADV);
 8001792:	f7ff fecd 	bl	8001530 <Adv_Request.constprop.2>
}
 8001796:	b016      	add	sp, #88	; 0x58
 8001798:	bd70      	pop	{r4, r5, r6, pc}
    otp_addr = OTP_Read(0);
 800179a:	4620      	mov	r0, r4
 800179c:	f003 fe46 	bl	800542c <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80017a0:	4c18      	ldr	r4, [pc, #96]	; (8001804 <APP_BLE_Init+0x23c>)
 80017a2:	2800      	cmp	r0, #0
 80017a4:	bf18      	it	ne
 80017a6:	4604      	movne	r4, r0
 80017a8:	e74c      	b.n	8001644 <APP_BLE_Init+0x7c>
 80017aa:	bf00      	nop
 80017ac:	080070b9 	.word	0x080070b9
 80017b0:	20030028 	.word	0x20030028
 80017b4:	0800143f 	.word	0x0800143f
 80017b8:	08001457 	.word	0x08001457
 80017bc:	080052b1 	.word	0x080052b1
 80017c0:	1fff7580 	.word	0x1fff7580
 80017c4:	1fff7584 	.word	0x1fff7584
 80017c8:	20000263 	.word	0x20000263
 80017cc:	20000004 	.word	0x20000004
 80017d0:	080070e6 	.word	0x080070e6
 80017d4:	20000150 	.word	0x20000150
 80017d8:	080070f6 	.word	0x080070f6
 80017dc:	0800734d 	.word	0x0800734d
 80017e0:	0001b207 	.word	0x0001b207
 80017e4:	080014ed 	.word	0x080014ed
 80017e8:	0800146d 	.word	0x0800146d
 80017ec:	20001601 	.word	0x20001601
 80017f0:	20001600 	.word	0x20001600
 80017f4:	08001437 	.word	0x08001437
 80017f8:	200001e1 	.word	0x200001e1
 80017fc:	200001e2 	.word	0x200001e2
 8001800:	08001431 	.word	0x08001431
 8001804:	080070b3 	.word	0x080070b3

08001808 <SVCCTL_App_Notification>:
{
 8001808:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (event_pckt->evt)
 800180a:	7843      	ldrb	r3, [r0, #1]
 800180c:	2b3e      	cmp	r3, #62	; 0x3e
{
 800180e:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8001810:	d01a      	beq.n	8001848 <SVCCTL_App_Notification+0x40>
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d06b      	beq.n	80018ee <SVCCTL_App_Notification+0xe6>
 8001816:	2b05      	cmp	r3, #5
 8001818:	d162      	bne.n	80018e0 <SVCCTL_App_Notification+0xd8>
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800181a:	4b6b      	ldr	r3, [pc, #428]	; (80019c8 <SVCCTL_App_Notification+0x1c0>)
 800181c:	8881      	ldrh	r1, [r0, #4]
 800181e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001820:	4291      	cmp	r1, r2
 8001822:	461c      	mov	r4, r3
 8001824:	d106      	bne.n	8001834 <SVCCTL_App_Notification+0x2c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8001826:	2300      	movs	r3, #0
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8001828:	4868      	ldr	r0, [pc, #416]	; (80019cc <SVCCTL_App_Notification+0x1c4>)
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800182a:	84e3      	strh	r3, [r4, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800182c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8001830:	f004 fcc6 	bl	80061c0 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8001834:	f7ff fe7c 	bl	8001530 <Adv_Request.constprop.2>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8001838:	4865      	ldr	r0, [pc, #404]	; (80019d0 <SVCCTL_App_Notification+0x1c8>)
 800183a:	2301      	movs	r3, #1
 800183c:	7003      	strb	r3, [r0, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800183e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001840:	8043      	strh	r3, [r0, #2]
          P2PS_APP_Notification(&handleNotification);
 8001842:	f000 fa0d 	bl	8001c60 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8001846:	e04b      	b.n	80018e0 <SVCCTL_App_Notification+0xd8>
      switch (meta_evt->subevent)
 8001848:	78c3      	ldrb	r3, [r0, #3]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d024      	beq.n	8001898 <SVCCTL_App_Notification+0x90>
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d026      	beq.n	80018a0 <SVCCTL_App_Notification+0x98>
 8001852:	2b01      	cmp	r3, #1
 8001854:	d144      	bne.n	80018e0 <SVCCTL_App_Notification+0xd8>
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001856:	4d5c      	ldr	r5, [pc, #368]	; (80019c8 <SVCCTL_App_Notification+0x1c0>)
 8001858:	f895 0091 	ldrb.w	r0, [r5, #145]	; 0x91
 800185c:	f7ff f998 	bl	8000b90 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8001860:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 8001864:	485b      	ldr	r0, [pc, #364]	; (80019d4 <SVCCTL_App_Notification+0x1cc>)
 8001866:	f004 fc37 	bl	80060d8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800186a:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 800186e:	2b04      	cmp	r3, #4
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8001870:	bf0c      	ite	eq
 8001872:	2306      	moveq	r3, #6
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8001874:	2305      	movne	r3, #5
 8001876:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800187a:	f8b4 3005 	ldrh.w	r3, [r4, #5]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800187e:	4c54      	ldr	r4, [pc, #336]	; (80019d0 <SVCCTL_App_Notification+0x1c8>)
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8001880:	84eb      	strh	r3, [r5, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001882:	2600      	movs	r6, #0
          P2PS_APP_Notification(&handleNotification);
 8001884:	4620      	mov	r0, r4
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001886:	8063      	strh	r3, [r4, #2]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001888:	7026      	strb	r6, [r4, #0]
          P2PS_APP_Notification(&handleNotification);
 800188a:	f000 f9e9 	bl	8001c60 <P2PS_APP_Notification>
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800188e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001890:	7026      	strb	r6, [r4, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001892:	8063      	strh	r3, [r4, #2]
          P2PS_APP_Notification(&handleNotification);
 8001894:	4620      	mov	r0, r4
 8001896:	e7d4      	b.n	8001842 <SVCCTL_App_Notification+0x3a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8001898:	484f      	ldr	r0, [pc, #316]	; (80019d8 <SVCCTL_App_Notification+0x1d0>)
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 800189a:	f004 fc91 	bl	80061c0 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800189e:	e01f      	b.n	80018e0 <SVCCTL_App_Notification+0xd8>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 80018a0:	484e      	ldr	r0, [pc, #312]	; (80019dc <SVCCTL_App_Notification+0x1d4>)
 80018a2:	f004 fc8d 	bl	80061c0 <puts>
          if (evt_le_phy_update_complete->Status == 0)
 80018a6:	7923      	ldrb	r3, [r4, #4]
 80018a8:	b9eb      	cbnz	r3, 80018e6 <SVCCTL_App_Notification+0xde>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 80018aa:	484d      	ldr	r0, [pc, #308]	; (80019e0 <SVCCTL_App_Notification+0x1d8>)
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 80018ac:	f004 fc88 	bl	80061c0 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <SVCCTL_App_Notification+0x1c0>)
 80018b2:	f10d 0207 	add.w	r2, sp, #7
 80018b6:	f10d 0106 	add.w	r1, sp, #6
 80018ba:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 80018bc:	f003 fbe2 	bl	8005084 <hci_le_read_phy>
          if (ret == BLE_STATUS_SUCCESS)
 80018c0:	b998      	cbnz	r0, 80018ea <SVCCTL_App_Notification+0xe2>
            APP_DBG_MSG("Read_PHY success \n");
 80018c2:	4848      	ldr	r0, [pc, #288]	; (80019e4 <SVCCTL_App_Notification+0x1dc>)
 80018c4:	f004 fc7c 	bl	80061c0 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80018c8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80018cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80018d0:	2902      	cmp	r1, #2
 80018d2:	d102      	bne.n	80018da <SVCCTL_App_Notification+0xd2>
 80018d4:	2a02      	cmp	r2, #2
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 80018d6:	bf08      	it	eq
 80018d8:	4611      	moveq	r1, r2
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 80018da:	4843      	ldr	r0, [pc, #268]	; (80019e8 <SVCCTL_App_Notification+0x1e0>)
 80018dc:	f004 fbfc 	bl	80060d8 <iprintf>
}
 80018e0:	2001      	movs	r0, #1
 80018e2:	b002      	add	sp, #8
 80018e4:	bd70      	pop	{r4, r5, r6, pc}
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 80018e6:	4841      	ldr	r0, [pc, #260]	; (80019ec <SVCCTL_App_Notification+0x1e4>)
 80018e8:	e7e0      	b.n	80018ac <SVCCTL_App_Notification+0xa4>
            APP_DBG_MSG("Read conf not succeess \n");
 80018ea:	4841      	ldr	r0, [pc, #260]	; (80019f0 <SVCCTL_App_Notification+0x1e8>)
 80018ec:	e7d5      	b.n	800189a <SVCCTL_App_Notification+0x92>
      switch (blue_evt->ecode)
 80018ee:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 80018f2:	f240 4205 	movw	r2, #1029	; 0x405
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d034      	beq.n	8001964 <SVCCTL_App_Notification+0x15c>
 80018fa:	d812      	bhi.n	8001922 <SVCCTL_App_Notification+0x11a>
 80018fc:	f240 4201 	movw	r2, #1025	; 0x401
 8001900:	4293      	cmp	r3, r2
 8001902:	d04d      	beq.n	80019a0 <SVCCTL_App_Notification+0x198>
 8001904:	d806      	bhi.n	8001914 <SVCCTL_App_Notification+0x10c>
 8001906:	2b04      	cmp	r3, #4
 8001908:	d054      	beq.n	80019b4 <SVCCTL_App_Notification+0x1ac>
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190e:	d1e7      	bne.n	80018e0 <SVCCTL_App_Notification+0xd8>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 8001910:	4838      	ldr	r0, [pc, #224]	; (80019f4 <SVCCTL_App_Notification+0x1ec>)
 8001912:	e7c2      	b.n	800189a <SVCCTL_App_Notification+0x92>
      switch (blue_evt->ecode)
 8001914:	f240 4203 	movw	r2, #1027	; 0x403
 8001918:	4293      	cmp	r3, r2
 800191a:	d021      	beq.n	8001960 <SVCCTL_App_Notification+0x158>
 800191c:	d91b      	bls.n	8001956 <SVCCTL_App_Notification+0x14e>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 800191e:	4836      	ldr	r0, [pc, #216]	; (80019f8 <SVCCTL_App_Notification+0x1f0>)
 8001920:	e7bb      	b.n	800189a <SVCCTL_App_Notification+0x92>
      switch (blue_evt->ecode)
 8001922:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8001926:	d026      	beq.n	8001976 <SVCCTL_App_Notification+0x16e>
 8001928:	d809      	bhi.n	800193e <SVCCTL_App_Notification+0x136>
 800192a:	f240 4206 	movw	r2, #1030	; 0x406
 800192e:	4293      	cmp	r3, r2
 8001930:	d021      	beq.n	8001976 <SVCCTL_App_Notification+0x16e>
 8001932:	f240 4207 	movw	r2, #1031	; 0x407
 8001936:	4293      	cmp	r3, r2
 8001938:	d1d2      	bne.n	80018e0 <SVCCTL_App_Notification+0xd8>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 800193a:	4830      	ldr	r0, [pc, #192]	; (80019fc <SVCCTL_App_Notification+0x1f4>)
 800193c:	e7ad      	b.n	800189a <SVCCTL_App_Notification+0x92>
      switch (blue_evt->ecode)
 800193e:	f240 420a 	movw	r2, #1034	; 0x40a
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <SVCCTL_App_Notification+0x172>
 8001946:	d31a      	bcc.n	800197e <SVCCTL_App_Notification+0x176>
 8001948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800194c:	d1c8      	bne.n	80018e0 <SVCCTL_App_Notification+0xd8>
          mutex = 1;
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <SVCCTL_App_Notification+0x1f8>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
      break;
 8001954:	e7c4      	b.n	80018e0 <SVCCTL_App_Notification+0xd8>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8001956:	482b      	ldr	r0, [pc, #172]	; (8001a04 <SVCCTL_App_Notification+0x1fc>)
 8001958:	f004 fc32 	bl	80061c0 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 800195c:	482a      	ldr	r0, [pc, #168]	; (8001a08 <SVCCTL_App_Notification+0x200>)
 800195e:	e79c      	b.n	800189a <SVCCTL_App_Notification+0x92>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8001960:	482a      	ldr	r0, [pc, #168]	; (8001a0c <SVCCTL_App_Notification+0x204>)
 8001962:	e79a      	b.n	800189a <SVCCTL_App_Notification+0x92>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 8001964:	482a      	ldr	r0, [pc, #168]	; (8001a10 <SVCCTL_App_Notification+0x208>)
 8001966:	f004 fc2b 	bl	80061c0 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <SVCCTL_App_Notification+0x1c0>)
 800196c:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800196e:	f003 f9b5 	bl	8004cdc <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8001972:	4828      	ldr	r0, [pc, #160]	; (8001a14 <SVCCTL_App_Notification+0x20c>)
 8001974:	e791      	b.n	800189a <SVCCTL_App_Notification+0x92>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8001976:	4828      	ldr	r0, [pc, #160]	; (8001a18 <SVCCTL_App_Notification+0x210>)
 8001978:	e78f      	b.n	800189a <SVCCTL_App_Notification+0x92>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 800197a:	4828      	ldr	r0, [pc, #160]	; (8001a1c <SVCCTL_App_Notification+0x214>)
 800197c:	e78d      	b.n	800189a <SVCCTL_App_Notification+0x92>
          APP_DBG_MSG("numeric_value = %ld\n",
 800197e:	f8d0 1007 	ldr.w	r1, [r0, #7]
 8001982:	4827      	ldr	r0, [pc, #156]	; (8001a20 <SVCCTL_App_Notification+0x218>)
 8001984:	f004 fba8 	bl	80060d8 <iprintf>
          APP_DBG_MSG("Hex_value = %lx\n",
 8001988:	f8d4 1007 	ldr.w	r1, [r4, #7]
 800198c:	4825      	ldr	r0, [pc, #148]	; (8001a24 <SVCCTL_App_Notification+0x21c>)
 800198e:	f004 fba3 	bl	80060d8 <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <SVCCTL_App_Notification+0x1c0>)
 8001994:	2101      	movs	r1, #1
 8001996:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 8001998:	f003 f9c4 	bl	8004d24 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 800199c:	4822      	ldr	r0, [pc, #136]	; (8001a28 <SVCCTL_App_Notification+0x220>)
 800199e:	e77c      	b.n	800189a <SVCCTL_App_Notification+0x92>
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 80019a0:	79c1      	ldrb	r1, [r0, #7]
 80019a2:	4822      	ldr	r0, [pc, #136]	; (8001a2c <SVCCTL_App_Notification+0x224>)
 80019a4:	f004 fb98 	bl	80060d8 <iprintf>
            if (pairing_complete->Status == 0)
 80019a8:	79e3      	ldrb	r3, [r4, #7]
 80019aa:	b90b      	cbnz	r3, 80019b0 <SVCCTL_App_Notification+0x1a8>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 80019ac:	4820      	ldr	r0, [pc, #128]	; (8001a30 <SVCCTL_App_Notification+0x228>)
 80019ae:	e774      	b.n	800189a <SVCCTL_App_Notification+0x92>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 80019b0:	4820      	ldr	r0, [pc, #128]	; (8001a34 <SVCCTL_App_Notification+0x22c>)
 80019b2:	e772      	b.n	800189a <SVCCTL_App_Notification+0x92>
          BSP_LED_On(LED_GREEN);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f000 fa87 	bl	8001ec8 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80019ba:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <SVCCTL_App_Notification+0x1c0>)
 80019bc:	210a      	movs	r1, #10
 80019be:	f893 0092 	ldrb.w	r0, [r3, #146]	; 0x92
 80019c2:	f7ff f93b 	bl	8000c3c <HW_TS_Start>
          break; /* RADIO_ACTIVITY_EVENT */
 80019c6:	e78b      	b.n	80018e0 <SVCCTL_App_Notification+0xd8>
 80019c8:	20000150 	.word	0x20000150
 80019cc:	08007355 	.word	0x08007355
 80019d0:	200015fc 	.word	0x200015fc
 80019d4:	0800744f 	.word	0x0800744f
 80019d8:	0800737c 	.word	0x0800737c
 80019dc:	080073a7 	.word	0x080073a7
 80019e0:	080073c0 	.word	0x080073c0
 80019e4:	08007409 	.word	0x08007409
 80019e8:	0800741b 	.word	0x0800741b
 80019ec:	080073e4 	.word	0x080073e4
 80019f0:	08007437 	.word	0x08007437
 80019f4:	08007480 	.word	0x08007480
 80019f8:	08007515 	.word	0x08007515
 80019fc:	080076a0 	.word	0x080076a0
 8001a00:	20001600 	.word	0x20001600
 8001a04:	080074a9 	.word	0x080074a9
 8001a08:	080074ce 	.word	0x080074ce
 8001a0c:	080074eb 	.word	0x080074eb
 8001a10:	08007542 	.word	0x08007542
 8001a14:	08007560 	.word	0x08007560
 8001a18:	08007579 	.word	0x08007579
 8001a1c:	0800759a 	.word	0x0800759a
 8001a20:	080075c4 	.word	0x080075c4
 8001a24:	080075d9 	.word	0x080075d9
 8001a28:	080075ea 	.word	0x080075ea
 8001a2c:	08007626 	.word	0x08007626
 8001a30:	0800767c 	.word	0x0800767c
 8001a34:	0800768e 	.word	0x0800768e

08001a38 <APP_BLE_Key_Button1_Action>:
  P2PS_APP_SW1_Button_Action();
 8001a38:	f000 b92a 	b.w	8001c90 <P2PS_APP_SW1_Button_Action>

08001a3c <APP_BLE_Key_Button2_Action>:
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2004      	movs	r0, #4
 8001a40:	f004 ba4a 	b.w	8005ed8 <UTIL_SEQ_SetTask>

08001a44 <APP_BLE_Key_Button3_Action>:
}
 8001a44:	4770      	bx	lr

08001a46 <hci_notify_asynch_evt>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001a46:	2100      	movs	r1, #0
 8001a48:	2008      	movs	r0, #8
 8001a4a:	f004 ba45 	b.w	8005ed8 <UTIL_SEQ_SetTask>

08001a4e <hci_cmd_resp_release>:
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f004 ba70 	b.w	8005f34 <UTIL_SEQ_SetEvt>

08001a54 <hci_cmd_resp_wait>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f004 bae7 	b.w	8006028 <UTIL_SEQ_WaitEvt>
	...

08001a5c <P2PS_APP_LED_BUTTON_context_Init>:
/* USER CODE END P2PS_APP_Init */
  return;
}

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8001a5c:	b538      	push	{r3, r4, r5, lr}
  
  BSP_LED_Off(LED_BLUE);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 fa40 	bl	8001ee4 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <P2PS_APP_LED_BUTTON_context_Init+0x24>)
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8001a66:	2200      	movs	r2, #0
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001a68:	2101      	movs	r1, #1
  P2P_Server_App_Context.OTATimestamp=0x0000000000000000;
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	2500      	movs	r5, #0
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8001a6e:	7059      	strb	r1, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8001a70:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.OTA12HrFormat=0x00;
 8001a72:	741a      	strb	r2, [r3, #16]
  P2P_Server_App_Context.OTADaylightSavings=0x00;
 8001a74:	745a      	strb	r2, [r3, #17]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8001a76:	70d9      	strb	r1, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001a78:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.OTATimestamp=0x0000000000000000;
 8001a7a:	e9c3 4502 	strd	r4, r5, [r3, #8]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8001a7e:	bd38      	pop	{r3, r4, r5, pc}
 8001a80:	200001e8 	.word	0x200001e8

08001a84 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8001a84:	e92d 4800 	stmdb	sp!, {fp, lr}
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <P2PS_Send_Notification+0x6c>)
 8001a8a:	791a      	ldrb	r2, [r3, #4]
{
 8001a8c:	b08a      	sub	sp, #40	; 0x28
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8001a8e:	bb4a      	cbnz	r2, 8001ae4 <P2PS_Send_Notification+0x60>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8001a90:	2201      	movs	r2, #1
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001a92:	711a      	strb	r2, [r3, #4]
  }
  
  //const uint16_t test_data[8] = {0x0123, 0x4567, 0x89AB, 0xCDEF, 0x0A0A, 0x1B1B, 0x2C2C, 0x3D3D};
  //const uint8_t test_data[8] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};

   if(P2P_Server_App_Context.Notification_Status){ 
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b33b      	cbz	r3, 8001ae8 <P2PS_Send_Notification+0x64>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <P2PS_Send_Notification+0x70>)
 8001a9a:	f004 fb1d 	bl	80060d8 <iprintf>
    APP_DBG_MSG(" \n\r");
 8001a9e:	4816      	ldr	r0, [pc, #88]	; (8001af8 <P2PS_Send_Notification+0x74>)
 8001aa0:	f004 fb1a 	bl	80060d8 <iprintf>
    //P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.OTATimestamp, 8);

    RTC_TimeTypeDef cTime;
    RTC_DateTypeDef cDate;

    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	a905      	add	r1, sp, #20
 8001aa8:	4814      	ldr	r0, [pc, #80]	; (8001afc <P2PS_Send_Notification+0x78>)
 8001aaa:	f001 fecb 	bl	8003844 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	a901      	add	r1, sp, #4
 8001ab2:	4812      	ldr	r0, [pc, #72]	; (8001afc <P2PS_Send_Notification+0x78>)
 8001ab4:	f001 feed 	bl	8003892 <HAL_RTC_GetDate>
 8001ab8:	9b05      	ldr	r3, [sp, #20]

    uint64_t sendval = (cDate.WeekDay << (8*3)) | (cDate.Month << (8*2)) | (cDate.Date << (8*1)) | cDate.Year;
    sendval <<= 32;
 8001aba:	9801      	ldr	r0, [sp, #4]
 8001abc:	ba19      	rev	r1, r3
 8001abe:	fa90 fc80 	rev.w	ip, r0
 8001ac2:	f04f 0b00 	mov.w	fp, #0
    sendval |= (cTime.Hours << (8*3)) | (cTime.Minutes << (8*2)) | (cTime.Seconds << (8*1)) | (cTime.TimeFormat);
 8001ac6:	ea4b 0201 	orr.w	r2, fp, r1
 8001aca:	ea4c 73e1 	orr.w	r3, ip, r1, asr #31
 8001ace:	a90a      	add	r1, sp, #40	; 0x28
 8001ad0:	e961 2308 	strd	r2, r3, [r1, #-32]!

    P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, 8);
 8001ad4:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8001ad8:	2208      	movs	r2, #8
 8001ada:	f003 fd51 	bl	8005580 <P2PS_STM_App_Update_Int8>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
}
 8001ade:	b00a      	add	sp, #40	; 0x28
 8001ae0:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	e7d4      	b.n	8001a92 <P2PS_Send_Notification+0xe>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <P2PS_Send_Notification+0x7c>)
 8001aea:	f004 faf5 	bl	80060d8 <iprintf>
  return;
 8001aee:	e7f6      	b.n	8001ade <P2PS_Send_Notification+0x5a>
 8001af0:	200001e8 	.word	0x200001e8
 8001af4:	080076c7 	.word	0x080076c7
 8001af8:	08007705 	.word	0x08007705
 8001afc:	20001538 	.word	0x20001538
 8001b00:	08007709 	.word	0x08007709

08001b04 <P2PS_STM_App_Notification>:
{
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch(pNotification->P2P_Evt_Opcode)
 8001b08:	7803      	ldrb	r3, [r0, #0]
 8001b0a:	2b01      	cmp	r3, #1
{
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	4605      	mov	r5, r0
  switch(pNotification->P2P_Evt_Opcode)
 8001b10:	d00f      	beq.n	8001b32 <P2PS_STM_App_Notification+0x2e>
 8001b12:	d304      	bcc.n	8001b1e <P2PS_STM_App_Notification+0x1a>
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d011      	beq.n	8001b3c <P2PS_STM_App_Notification+0x38>
}
 8001b18:	b006      	add	sp, #24
 8001b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      P2P_Server_App_Context.Notification_Status = 1;
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <P2PS_STM_App_Notification+0x138>)
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8001b20:	4847      	ldr	r0, [pc, #284]	; (8001c40 <P2PS_STM_App_Notification+0x13c>)
      P2P_Server_App_Context.Notification_Status = 1;
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8001b26:	f004 fb4b 	bl	80061c0 <puts>
      APP_DBG_MSG(" \n\r");
 8001b2a:	4846      	ldr	r0, [pc, #280]	; (8001c44 <P2PS_STM_App_Notification+0x140>)
 8001b2c:	f004 fad4 	bl	80060d8 <iprintf>
      break;
 8001b30:	e7f2      	b.n	8001b18 <P2PS_STM_App_Notification+0x14>
      P2P_Server_App_Context.Notification_Status = 0;
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <P2PS_STM_App_Notification+0x138>)
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8001b34:	4844      	ldr	r0, [pc, #272]	; (8001c48 <P2PS_STM_App_Notification+0x144>)
      P2P_Server_App_Context.Notification_Status = 0;
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e7f4      	b.n	8001b26 <P2PS_STM_App_Notification+0x22>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8001b3c:	6843      	ldr	r3, [r0, #4]
 8001b3e:	7818      	ldrb	r0, [r3, #0]
 8001b40:	b9d0      	cbnz	r0, 8001b78 <P2PS_STM_App_Notification+0x74>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8001b42:	785c      	ldrb	r4, [r3, #1]
 8001b44:	2c01      	cmp	r4, #1
 8001b46:	d109      	bne.n	8001b5c <P2PS_STM_App_Notification+0x58>
          BSP_LED_On(LED_BLUE);
 8001b48:	f000 f9be 	bl	8001ec8 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8001b4c:	483f      	ldr	r0, [pc, #252]	; (8001c4c <P2PS_STM_App_Notification+0x148>)
 8001b4e:	f004 fb37 	bl	80061c0 <puts>
          APP_DBG_MSG(" \n\r");
 8001b52:	483c      	ldr	r0, [pc, #240]	; (8001c44 <P2PS_STM_App_Notification+0x140>)
 8001b54:	f004 fac0 	bl	80060d8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <P2PS_STM_App_Notification+0x138>)
 8001b5a:	709c      	strb	r4, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8001b5c:	686b      	ldr	r3, [r5, #4]
 8001b5e:	785c      	ldrb	r4, [r3, #1]
 8001b60:	b954      	cbnz	r4, 8001b78 <P2PS_STM_App_Notification+0x74>
          BSP_LED_Off(LED_BLUE);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f000 f9be 	bl	8001ee4 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8001b68:	4839      	ldr	r0, [pc, #228]	; (8001c50 <P2PS_STM_App_Notification+0x14c>)
 8001b6a:	f004 fb29 	bl	80061c0 <puts>
          APP_DBG_MSG(" \n\r");
 8001b6e:	4835      	ldr	r0, [pc, #212]	; (8001c44 <P2PS_STM_App_Notification+0x140>)
 8001b70:	f004 fab2 	bl	80060d8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <P2PS_STM_App_Notification+0x138>)
 8001b76:	709c      	strb	r4, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8001b78:	686b      	ldr	r3, [r5, #4]
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	2a01      	cmp	r2, #1
 8001b7e:	d1cb      	bne.n	8001b18 <P2PS_STM_App_Notification+0x14>
    	memcpy(&P2P_Server_App_Context.OTATimestamp, &(pNotification->DataTransfered.pPayload[2]), 8);
 8001b80:	f853 0f02 	ldr.w	r0, [r3, #2]!
 8001b84:	4c2d      	ldr	r4, [pc, #180]	; (8001c3c <P2PS_STM_App_Notification+0x138>)
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	f104 0208 	add.w	r2, r4, #8
 8001b8c:	c203      	stmia	r2!, {r0, r1}
    	P2P_Server_App_Context.OTA12HrFormat = pNotification->DataTransfered.pPayload[10];
 8001b8e:	686b      	ldr	r3, [r5, #4]
 8001b90:	7a9a      	ldrb	r2, [r3, #10]
 8001b92:	7422      	strb	r2, [r4, #16]
    	P2P_Server_App_Context.OTADaylightSavings = pNotification->DataTransfered.pPayload[11];
 8001b94:	7ade      	ldrb	r6, [r3, #11]
 8001b96:	7466      	strb	r6, [r4, #17]
    	RTC_TimeTypeDef sTime = {0};
 8001b98:	2212      	movs	r2, #18
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	f10d 0006 	add.w	r0, sp, #6
 8001ba0:	f004 fa91 	bl	80060c6 <memset>
    	RTC_DateTypeDef sDate = {0};
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
    	memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 8001ba8:	7aa2      	ldrb	r2, [r4, #10]
 8001baa:	7a63      	ldrb	r3, [r4, #9]
    	sTime.Hours      = timestampvals[3];
 8001bac:	7ae1      	ldrb	r1, [r4, #11]
    	memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 8001bae:	7b27      	ldrb	r7, [r4, #12]
 8001bb0:	f894 800d 	ldrb.w	r8, [r4, #13]
 8001bb4:	f894 900e 	ldrb.w	r9, [r4, #14]
 8001bb8:	f894 a00f 	ldrb.w	sl, [r4, #15]
    	sTime.Hours      = timestampvals[3];
 8001bbc:	f88d 1004 	strb.w	r1, [sp, #4]
    	sTime.Minutes    = timestampvals[2];
 8001bc0:	f88d 2005 	strb.w	r2, [sp, #5]
    	sTime.Seconds    = timestampvals[1];
 8001bc4:	f88d 3006 	strb.w	r3, [sp, #6]
    	if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 8001bc8:	b116      	cbz	r6, 8001bd0 <P2PS_STM_App_Notification+0xcc>
 8001bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bce:	9304      	str	r3, [sp, #16]
    	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	a901      	add	r1, sp, #4
 8001bd4:	481f      	ldr	r0, [pc, #124]	; (8001c54 <P2PS_STM_App_Notification+0x150>)
 8001bd6:	f001 fd4c 	bl	8003672 <HAL_RTC_SetTime>
 8001bda:	b108      	cbz	r0, 8001be0 <P2PS_STM_App_Notification+0xdc>
    	    Error_Handler();
 8001bdc:	f7ff faf0 	bl	80011c0 <Error_Handler>
    	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001be0:	2201      	movs	r2, #1
 8001be2:	4669      	mov	r1, sp
 8001be4:	481b      	ldr	r0, [pc, #108]	; (8001c54 <P2PS_STM_App_Notification+0x150>)
    	sDate.WeekDay = timestampvals[7];
 8001be6:	f88d a000 	strb.w	sl, [sp]
    	sDate.Month   = timestampvals[6];
 8001bea:	f88d 9001 	strb.w	r9, [sp, #1]
    	sDate.Date    = timestampvals[5];
 8001bee:	f88d 8002 	strb.w	r8, [sp, #2]
    	sDate.Year    = timestampvals[4];
 8001bf2:	f88d 7003 	strb.w	r7, [sp, #3]
    	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001bf6:	f001 fdb6 	bl	8003766 <HAL_RTC_SetDate>
 8001bfa:	b108      	cbz	r0, 8001c00 <P2PS_STM_App_Notification+0xfc>
    	    Error_Handler();
 8001bfc:	f7ff fae0 	bl	80011c0 <Error_Handler>
    	if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8001c00:	686b      	ldr	r3, [r5, #4]
 8001c02:	785e      	ldrb	r6, [r3, #1]
 8001c04:	2e01      	cmp	r6, #1
 8001c06:	d109      	bne.n	8001c1c <P2PS_STM_App_Notification+0x118>
          BSP_LED_On(LED_BLUE);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 f95d 	bl	8001ec8 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <P2PS_STM_App_Notification+0x154>)
 8001c10:	f004 fad6 	bl	80061c0 <puts>
          APP_DBG_MSG(" \n\r");
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <P2PS_STM_App_Notification+0x140>)
 8001c16:	f004 fa5f 	bl	80060d8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8001c1a:	70a6      	strb	r6, [r4, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8001c1c:	686b      	ldr	r3, [r5, #4]
 8001c1e:	785d      	ldrb	r5, [r3, #1]
 8001c20:	2d00      	cmp	r5, #0
 8001c22:	f47f af79 	bne.w	8001b18 <P2PS_STM_App_Notification+0x14>
          BSP_LED_Off(LED_BLUE);
 8001c26:	4628      	mov	r0, r5
 8001c28:	f000 f95c 	bl	8001ee4 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <P2PS_STM_App_Notification+0x158>)
 8001c2e:	f004 fac7 	bl	80061c0 <puts>
          APP_DBG_MSG(" \n\r");
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <P2PS_STM_App_Notification+0x140>)
 8001c34:	f004 fa50 	bl	80060d8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8001c38:	70a5      	strb	r5, [r4, #2]
  return;
 8001c3a:	e76d      	b.n	8001b18 <P2PS_STM_App_Notification+0x14>
 8001c3c:	200001e8 	.word	0x200001e8
 8001c40:	08007754 	.word	0x08007754
 8001c44:	08007705 	.word	0x08007705
 8001c48:	08007785 	.word	0x08007785
 8001c4c:	080077b7 	.word	0x080077b7
 8001c50:	080077dc 	.word	0x080077dc
 8001c54:	20001538 	.word	0x20001538
 8001c58:	08007802 	.word	0x08007802
 8001c5c:	08007828 	.word	0x08007828

08001c60 <P2PS_APP_Notification>:
  switch(pNotification->P2P_Evt_Opcode)
 8001c60:	7803      	ldrb	r3, [r0, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <P2PS_APP_Notification+0xa>
       P2PS_APP_LED_BUTTON_context_Init();       
 8001c66:	f7ff bef9 	b.w	8001a5c <P2PS_APP_LED_BUTTON_context_Init>
}
 8001c6a:	4770      	bx	lr

08001c6c <P2PS_APP_Init>:
{
 8001c6c:	b508      	push	{r3, lr}
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8001c6e:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <P2PS_APP_Init+0x1c>)
 8001c70:	2100      	movs	r1, #0
 8001c72:	2002      	movs	r0, #2
 8001c74:	f004 f920 	bl	8005eb8 <UTIL_SEQ_RegTask>
  P2P_Server_App_Context.Notification_Status=0; 
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <P2PS_APP_Init+0x20>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  P2PS_APP_LED_BUTTON_context_Init();
 8001c82:	f7ff beeb 	b.w	8001a5c <P2PS_APP_LED_BUTTON_context_Init>
 8001c86:	bf00      	nop
 8001c88:	08001a85 	.word	0x08001a85
 8001c8c:	200001e8 	.word	0x200001e8

08001c90 <P2PS_APP_SW1_Button_Action>:
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8001c90:	2100      	movs	r1, #0
 8001c92:	2002      	movs	r0, #2
 8001c94:	f004 b920 	b.w	8005ed8 <UTIL_SEQ_SetTask>

08001c98 <HW_IPCC_Enable>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HW_IPCC_Enable+0x28>)
 8001c9a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cac:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001cae:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001cb0:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HW_IPCC_Enable+0x2c>)
 8001cb4:	68d3      	ldr	r3, [r2, #12]
 8001cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cba:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	58000800 	.word	0x58000800
 8001cc4:	58000400 	.word	0x58000400

08001cc8 <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 8001ccc:	b507      	push	{r0, r1, r2, lr}
 8001cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cd4:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cdc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001cde:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HW_IPCC_Init+0x3c>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cf0:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001cf2:	202c      	movs	r0, #44	; 0x2c
 8001cf4:	f000 fa7e 	bl	80021f4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001cf8:	202d      	movs	r0, #45	; 0x2d

  return;
}
 8001cfa:	b003      	add	sp, #12
 8001cfc:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d00:	f000 ba78 	b.w	80021f4 <HAL_NVIC_EnableIRQ>
 8001d04:	58000c00 	.word	0x58000c00

08001d08 <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001d08:	4a02      	ldr	r2, [pc, #8]	; (8001d14 <HW_IPCC_BLE_Init+0xc>)
 8001d0a:	6853      	ldr	r3, [r2, #4]
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 8001d12:	4770      	bx	lr
 8001d14:	58000c00 	.word	0x58000c00

08001d18 <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HW_IPCC_BLE_SendCmd+0xc>)
 8001d1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d1e:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	58000c00 	.word	0x58000c00

08001d28 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001d28:	4a02      	ldr	r2, [pc, #8]	; (8001d34 <HW_IPCC_SYS_Init+0xc>)
 8001d2a:	6853      	ldr	r3, [r2, #4]
 8001d2c:	f023 0302 	bic.w	r3, r3, #2
 8001d30:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 8001d32:	4770      	bx	lr
 8001d34:	58000c00 	.word	0x58000c00

08001d38 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <HW_IPCC_SYS_SendCmd+0x14>)
 8001d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d3e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d46:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	58000c00 	.word	0x58000c00

08001d50 <HW_IPCC_Tx_Handler>:
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HW_IPCC_Tx_Handler+0x7c>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	f012 0f02 	tst.w	r2, #2
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	d109      	bne.n	8001d72 <HW_IPCC_Tx_Handler+0x22>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	0389      	lsls	r1, r1, #14
 8001d62:	d406      	bmi.n	8001d72 <HW_IPCC_Tx_Handler+0x22>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d6a:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 8001d6c:	f003 fff8 	bl	8005d60 <HW_IPCC_SYS_CmdEvtNot>
}
 8001d70:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001d72:	68d3      	ldr	r3, [r2, #12]
 8001d74:	079b      	lsls	r3, r3, #30
 8001d76:	d407      	bmi.n	8001d88 <HW_IPCC_Tx_Handler+0x38>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001d78:	6853      	ldr	r3, [r2, #4]
 8001d7a:	039c      	lsls	r4, r3, #14
 8001d7c:	d404      	bmi.n	8001d88 <HW_IPCC_Tx_Handler+0x38>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001d7e:	6853      	ldr	r3, [r2, #4]
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	6053      	str	r3, [r2, #4]
 8001d86:	e7f1      	b.n	8001d6c <HW_IPCC_Tx_Handler+0x1c>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001d88:	4c10      	ldr	r4, [pc, #64]	; (8001dcc <HW_IPCC_Tx_Handler+0x7c>)
 8001d8a:	68e3      	ldr	r3, [r4, #12]
 8001d8c:	f013 0f08 	tst.w	r3, #8
 8001d90:	4623      	mov	r3, r4
 8001d92:	d10d      	bne.n	8001db0 <HW_IPCC_Tx_Handler+0x60>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001d94:	6862      	ldr	r2, [r4, #4]
 8001d96:	0310      	lsls	r0, r2, #12
 8001d98:	d40a      	bmi.n	8001db0 <HW_IPCC_Tx_Handler+0x60>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001d9a:	6863      	ldr	r3, [r4, #4]
 8001d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da0:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HW_IPCC_Tx_Handler+0x80>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001da8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dac:	60a3      	str	r3, [r4, #8]
 8001dae:	e7df      	b.n	8001d70 <HW_IPCC_Tx_Handler+0x20>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	0691      	lsls	r1, r2, #26
 8001db4:	d4dc      	bmi.n	8001d70 <HW_IPCC_Tx_Handler+0x20>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	0292      	lsls	r2, r2, #10
 8001dba:	d4d9      	bmi.n	8001d70 <HW_IPCC_Tx_Handler+0x20>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001dc2:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8001dc4:	f003 ffa0 	bl	8005d08 <HW_IPCC_BLE_AclDataAckNot>
  return;
 8001dc8:	e7d2      	b.n	8001d70 <HW_IPCC_Tx_Handler+0x20>
 8001dca:	bf00      	nop
 8001dcc:	58000c00 	.word	0x58000c00
 8001dd0:	2000026c 	.word	0x2000026c

08001dd4 <HW_IPCC_MM_SendFreeBuf>:
{
 8001dd4:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001dd6:	4c08      	ldr	r4, [pc, #32]	; (8001df8 <HW_IPCC_MM_SendFreeBuf+0x24>)
 8001dd8:	68e3      	ldr	r3, [r4, #12]
 8001dda:	071b      	lsls	r3, r3, #28
 8001ddc:	d506      	bpl.n	8001dec <HW_IPCC_MM_SendFreeBuf+0x18>
    FreeBufCb = cb;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HW_IPCC_MM_SendFreeBuf+0x28>)
 8001de0:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001de2:	6863      	ldr	r3, [r4, #4]
 8001de4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001de8:	6063      	str	r3, [r4, #4]
}
 8001dea:	bd10      	pop	{r4, pc}
    cb();
 8001dec:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001dee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001df2:	60a3      	str	r3, [r4, #8]
  return;
 8001df4:	e7f9      	b.n	8001dea <HW_IPCC_MM_SendFreeBuf+0x16>
 8001df6:	bf00      	nop
 8001df8:	58000c00 	.word	0x58000c00
 8001dfc:	2000026c 	.word	0x2000026c

08001e00 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001e00:	4a02      	ldr	r2, [pc, #8]	; (8001e0c <HW_IPCC_TRACES_Init+0xc>)
 8001e02:	6853      	ldr	r3, [r2, #4]
 8001e04:	f023 0308 	bic.w	r3, r3, #8
 8001e08:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8001e0a:	4770      	bx	lr
 8001e0c:	58000c00 	.word	0x58000c00

08001e10 <HW_IPCC_Rx_Handler>:
{
 8001e10:	b538      	push	{r3, r4, r5, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001e12:	4c12      	ldr	r4, [pc, #72]	; (8001e5c <HW_IPCC_Rx_Handler+0x4c>)
 8001e14:	69e3      	ldr	r3, [r4, #28]
 8001e16:	f013 0f02 	tst.w	r3, #2
 8001e1a:	4625      	mov	r5, r4
 8001e1c:	d007      	beq.n	8001e2e <HW_IPCC_Rx_Handler+0x1e>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001e1e:	6863      	ldr	r3, [r4, #4]
 8001e20:	079b      	lsls	r3, r3, #30
 8001e22:	d404      	bmi.n	8001e2e <HW_IPCC_Rx_Handler+0x1e>
  HW_IPCC_SYS_EvtNot();
 8001e24:	f003 ffa6 	bl	8005d74 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60a3      	str	r3, [r4, #8]
  return;
 8001e2c:	e009      	b.n	8001e42 <HW_IPCC_Rx_Handler+0x32>
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001e2e:	69eb      	ldr	r3, [r5, #28]
 8001e30:	07d8      	lsls	r0, r3, #31
 8001e32:	d507      	bpl.n	8001e44 <HW_IPCC_Rx_Handler+0x34>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001e34:	686b      	ldr	r3, [r5, #4]
 8001e36:	07d9      	lsls	r1, r3, #31
 8001e38:	d404      	bmi.n	8001e44 <HW_IPCC_Rx_Handler+0x34>
  HW_IPCC_BLE_RxEvtNot();
 8001e3a:	f003 ff4f 	bl	8005cdc <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001e3e:	2301      	movs	r3, #1
 8001e40:	60ab      	str	r3, [r5, #8]
}
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001e44:	4c05      	ldr	r4, [pc, #20]	; (8001e5c <HW_IPCC_Rx_Handler+0x4c>)
 8001e46:	69e3      	ldr	r3, [r4, #28]
 8001e48:	071a      	lsls	r2, r3, #28
 8001e4a:	d5fa      	bpl.n	8001e42 <HW_IPCC_Rx_Handler+0x32>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001e4c:	6863      	ldr	r3, [r4, #4]
 8001e4e:	071b      	lsls	r3, r3, #28
 8001e50:	d4f7      	bmi.n	8001e42 <HW_IPCC_Rx_Handler+0x32>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 8001e52:	f003 ffe5 	bl	8005e20 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001e56:	2308      	movs	r3, #8
 8001e58:	e7e7      	b.n	8001e2a <HW_IPCC_Rx_Handler+0x1a>
 8001e5a:	bf00      	nop
 8001e5c:	58000c00 	.word	0x58000c00

08001e60 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001e64:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e68:	4302      	orrs	r2, r0
 8001e6a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4018      	ands	r0, r3
 8001e70:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001e72:	9b01      	ldr	r3, [sp, #4]
}
 8001e74:	b002      	add	sp, #8
 8001e76:	4770      	bx	lr

08001e78 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	4604      	mov	r4, r0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001e7e:	2214      	movs	r2, #20
 8001e80:	2100      	movs	r1, #0
 8001e82:	a801      	add	r0, sp, #4
 8001e84:	f004 f91f 	bl	80060c6 <memset>
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f7ff ffe9 	bl	8001e60 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <BSP_LED_Init+0x48>)
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull = GPIO_NOPULL;
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001e90:	4d0c      	ldr	r5, [pc, #48]	; (8001ec4 <BSP_LED_Init+0x4c>)
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001e92:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001e96:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001e9a:	9601      	str	r6, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001e9c:	2700      	movs	r7, #0
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e9cd 3702 	strd	r3, r7, [sp, #8]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001ea4:	a901      	add	r1, sp, #4
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001eaa:	f000 fb99 	bl	80025e0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001eae:	463a      	mov	r2, r7
 8001eb0:	4631      	mov	r1, r6
 8001eb2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001eb6:	f000 fc49 	bl	800274c <HAL_GPIO_WritePin>
}
 8001eba:	b007      	add	sp, #28
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	08007106 	.word	0x08007106
 8001ec4:	2000001c 	.word	0x2000001c

08001ec8 <BSP_LED_On>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <BSP_LED_On+0x14>)
 8001eca:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <BSP_LED_On+0x18>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ed6:	f000 bc39 	b.w	800274c <HAL_GPIO_WritePin>
 8001eda:	bf00      	nop
 8001edc:	08007106 	.word	0x08007106
 8001ee0:	2000001c 	.word	0x2000001c

08001ee4 <BSP_LED_Off>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <BSP_LED_Off+0x14>)
 8001ee6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <BSP_LED_Off+0x18>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ef2:	f000 bc2b 	b.w	800274c <HAL_GPIO_WritePin>
 8001ef6:	bf00      	nop
 8001ef8:	08007106 	.word	0x08007106
 8001efc:	2000001c 	.word	0x2000001c

08001f00 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	4604      	mov	r4, r0
 8001f06:	460e      	mov	r6, r1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001f08:	2214      	movs	r2, #20
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	a801      	add	r0, sp, #4
 8001f0e:	f004 f8da 	bl	80060c6 <memset>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001f12:	b9cc      	cbnz	r4, 8001f48 <BSP_PB_Init+0x48>
 8001f14:	2004      	movs	r0, #4
 8001f16:	f7ff ffa3 	bl	8001e60 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001f1a:	b9d6      	cbnz	r6, 8001f52 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <BSP_PB_Init+0x8c>)
 8001f1e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
    gpioinitstruct.Pull = GPIO_PULLUP;
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f22:	2501      	movs	r5, #1
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001f24:	88db      	ldrh	r3, [r3, #6]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001f26:	e9cd 3601 	strd	r3, r6, [sp, #4]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e9cd 5303 	strd	r5, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <BSP_PB_Init+0x90>)
 8001f32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001f36:	a901      	add	r1, sp, #4
 8001f38:	68e0      	ldr	r0, [r4, #12]
 8001f3a:	f000 fb51 	bl	80025e0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001f3e:	4628      	mov	r0, r5
 8001f40:	f7ff f924 	bl	800118c <HAL_Delay>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8001f44:	b006      	add	sp, #24
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001f48:	1e63      	subs	r3, r4, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d8e5      	bhi.n	8001f1a <BSP_PB_Init+0x1a>
 8001f4e:	2008      	movs	r0, #8
 8001f50:	e7e1      	b.n	8001f16 <BSP_PB_Init+0x16>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001f52:	2e01      	cmp	r6, #1
 8001f54:	d1f6      	bne.n	8001f44 <BSP_PB_Init+0x44>
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001f56:	4d0d      	ldr	r5, [pc, #52]	; (8001f8c <BSP_PB_Init+0x8c>)
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001f58:	9603      	str	r6, [sp, #12]
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001f5a:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001f5e:	a901      	add	r1, sp, #4
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001f60:	88db      	ldrh	r3, [r3, #6]
 8001f62:	9301      	str	r3, [sp, #4]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BSP_PB_Init+0x94>)
 8001f66:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <BSP_PB_Init+0x90>)
 8001f6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001f6e:	442c      	add	r4, r5
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001f70:	68d8      	ldr	r0, [r3, #12]
 8001f72:	f000 fb35 	bl	80025e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001f76:	f994 400c 	ldrsb.w	r4, [r4, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f000 f904 	bl	800218c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001f84:	4620      	mov	r0, r4
 8001f86:	f000 f935 	bl	80021f4 <HAL_NVIC_EnableIRQ>
}
 8001f8a:	e7db      	b.n	8001f44 <BSP_PB_Init+0x44>
 8001f8c:	08007106 	.word	0x08007106
 8001f90:	2000001c 	.word	0x2000001c
 8001f94:	10210000 	.word	0x10210000

08001f98 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <SystemInit+0x60>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001f9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fa2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fae:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8001fba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001fbe:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001fc6:	4462      	add	r2, ip
 8001fc8:	4002      	ands	r2, r0
 8001fca:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001fcc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001fd0:	f022 0205 	bic.w	r2, r2, #5
 8001fd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001fd8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <SystemInit+0x64>)
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001fe8:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ff2:	6199      	str	r1, [r3, #24]
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00
 8001ffc:	22041000 	.word	0x22041000

08002000 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002000:	b530      	push	{r4, r5, lr}
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002002:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8002006:	4921      	ldr	r1, [pc, #132]	; (800208c <SystemCoreClockUpdate+0x8c>)
 8002008:	6823      	ldr	r3, [r4, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800200a:	68a0      	ldr	r0, [r4, #8]
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <SystemCoreClockUpdate+0x90>)
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800200e:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002012:	f000 000c 	and.w	r0, r0, #12
 8002016:	2808      	cmp	r0, #8
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002018:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800201c:	d012      	beq.n	8002044 <SystemCoreClockUpdate+0x44>
 800201e:	280c      	cmp	r0, #12
 8002020:	d012      	beq.n	8002048 <SystemCoreClockUpdate+0x48>
 8002022:	2804      	cmp	r0, #4
 8002024:	d130      	bne.n	8002088 <SystemCoreClockUpdate+0x88>
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <SystemCoreClockUpdate+0x94>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8002028:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002034:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800203c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002040:	6013      	str	r3, [r2, #0]

}
 8002042:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <SystemCoreClockUpdate+0x98>)
 8002046:	e7ef      	b.n	8002028 <SystemCoreClockUpdate+0x28>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002048:	68e0      	ldr	r0, [r4, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800204a:	68e3      	ldr	r3, [r4, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800204c:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002050:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002054:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002056:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800205a:	d10e      	bne.n	800207a <SystemCoreClockUpdate+0x7a>
        pllvco = (HSI_VALUE / pllm);
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <SystemCoreClockUpdate+0x94>)
        pllvco = (HSE_VALUE / pllm);
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002062:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002066:	68c4      	ldr	r4, [r0, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002068:	68c0      	ldr	r0, [r0, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800206a:	f3c4 2406 	ubfx	r4, r4, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800206e:	0f40      	lsrs	r0, r0, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002070:	4363      	muls	r3, r4
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002072:	3001      	adds	r0, #1
      SystemCoreClock = pllvco/pllr;
 8002074:	fbb3 f3f0 	udiv	r3, r3, r0
 8002078:	e7d6      	b.n	8002028 <SystemCoreClockUpdate+0x28>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800207a:	2803      	cmp	r0, #3
 800207c:	d101      	bne.n	8002082 <SystemCoreClockUpdate+0x82>
        pllvco = (HSE_VALUE / pllm);
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <SystemCoreClockUpdate+0x98>)
 8002080:	e7ed      	b.n	800205e <SystemCoreClockUpdate+0x5e>
        pllvco = (msirange / pllm);
 8002082:	fbb5 f3f3 	udiv	r3, r5, r3
 8002086:	e7ec      	b.n	8002062 <SystemCoreClockUpdate+0x62>
      SystemCoreClock = msirange;
 8002088:	6015      	str	r5, [r2, #0]
      break;
 800208a:	e7ce      	b.n	800202a <SystemCoreClockUpdate+0x2a>
 800208c:	08007118 	.word	0x08007118
 8002090:	20000034 	.word	0x20000034
 8002094:	00f42400 	.word	0x00f42400
 8002098:	01e84800 	.word	0x01e84800

0800209c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800209c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800209e:	4d0f      	ldr	r5, [pc, #60]	; (80020dc <HAL_InitTick+0x40>)
 80020a0:	782b      	ldrb	r3, [r5, #0]
{
 80020a2:	4606      	mov	r6, r0
  if (uwTickFreq != 0U)
 80020a4:	b90b      	cbnz	r3, 80020aa <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80020aa:	f001 f827 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 80020ae:	782a      	ldrb	r2, [r5, #0]
 80020b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80020b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80020bc:	f000 f8bc 	bl	8002238 <HAL_SYSTICK_Config>
 80020c0:	4604      	mov	r4, r0
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d1ef      	bne.n	80020a6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	2e0f      	cmp	r6, #15
 80020c8:	d8ed      	bhi.n	80020a6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ca:	4602      	mov	r2, r0
 80020cc:	4631      	mov	r1, r6
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	f000 f85b 	bl	800218c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d6:	606e      	str	r6, [r5, #4]
 80020d8:	4620      	mov	r0, r4
 80020da:	e7e5      	b.n	80020a8 <HAL_InitTick+0xc>
 80020dc:	20000038 	.word	0x20000038

080020e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_Init+0x28>)
 80020e2:	6813      	ldr	r3, [r2, #0]
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80020e8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ee:	f000 f83b 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff ffd2 	bl	800209c <HAL_InitTick>
 80020f8:	4604      	mov	r4, r0
 80020fa:	b918      	cbnz	r0, 8002104 <HAL_Init+0x24>
    HAL_MspInit();
 80020fc:	f7ff f86d 	bl	80011da <HAL_MspInit>
}
 8002100:	4620      	mov	r0, r4
 8002102:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002104:	2401      	movs	r4, #1
 8002106:	e7fb      	b.n	8002100 <HAL_Init+0x20>
 8002108:	58004000 	.word	0x58004000

0800210c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800210c:	4a03      	ldr	r2, [pc, #12]	; (800211c <HAL_IncTick+0x10>)
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_IncTick+0x14>)
 8002110:	6811      	ldr	r1, [r2, #0]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	440b      	add	r3, r1
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20001604 	.word	0x20001604
 8002120:	20000038 	.word	0x20000038

08002124 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002124:	4b01      	ldr	r3, [pc, #4]	; (800212c <HAL_GetTick+0x8>)
 8002126:	6818      	ldr	r0, [r3, #0]
}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20001604 	.word	0x20001604

08002130 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <HAL_GetTickPrio+0x8>)
 8002132:	6858      	ldr	r0, [r3, #4]
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000038 	.word	0x20000038

0800213c <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 800213c:	4b01      	ldr	r3, [pc, #4]	; (8002144 <HAL_GetTickFreq+0x8>)
 800213e:	7818      	ldrb	r0, [r3, #0]
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000038 	.word	0x20000038

08002148 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002148:	4a02      	ldr	r2, [pc, #8]	; (8002154 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800214a:	6853      	ldr	r3, [r2, #4]
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8002152:	4770      	bx	lr
 8002154:	e0042000 	.word	0xe0042000

08002158 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002158:	4a02      	ldr	r2, [pc, #8]	; (8002164 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800215a:	6853      	ldr	r3, [r2, #4]
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8002162:	4770      	bx	lr
 8002164:	e0042000 	.word	0xe0042000

08002168 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800216a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	0200      	lsls	r0, r0, #8
 800217a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002182:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002184:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218e:	b570      	push	{r4, r5, r6, lr}
 8002190:	68dc      	ldr	r4, [r3, #12]
 8002192:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002196:	f1c4 0507 	rsb	r5, r4, #7
 800219a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	bf28      	it	cs
 80021a2:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a8:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021aa:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	bf8c      	ite	hi
 80021b0:	3c03      	subhi	r4, #3
 80021b2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	ea21 0303 	bic.w	r3, r1, r3
 80021b8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ba:	fa06 f404 	lsl.w	r4, r6, r4
 80021be:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80021c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	bfa8      	it	ge
 80021ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80021ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	bfbc      	itt	lt
 80021d4:	f000 000f 	andlt.w	r0, r0, #15
 80021d8:	4a05      	ldrlt	r2, [pc, #20]	; (80021f0 <HAL_NVIC_SetPriority+0x64>)
 80021da:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	bfaa      	itet	ge
 80021de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021e8:	bd70      	pop	{r4, r5, r6, pc}
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00
 80021f0:	e000ed14 	.word	0xe000ed14

080021f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021f4:	2800      	cmp	r0, #0
 80021f6:	db08      	blt.n	800220a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f8:	0942      	lsrs	r2, r0, #5
 80021fa:	2301      	movs	r3, #1
 80021fc:	f000 001f 	and.w	r0, r0, #31
 8002200:	fa03 f000 	lsl.w	r0, r3, r0
 8002204:	4b01      	ldr	r3, [pc, #4]	; (800220c <HAL_NVIC_EnableIRQ+0x18>)
 8002206:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100

08002210 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002210:	2800      	cmp	r0, #0
 8002212:	db0d      	blt.n	8002230 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002214:	0943      	lsrs	r3, r0, #5
 8002216:	2201      	movs	r2, #1
 8002218:	f000 001f 	and.w	r0, r0, #31
 800221c:	fa02 f000 	lsl.w	r0, r2, r0
 8002220:	3320      	adds	r3, #32
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_NVIC_DisableIRQ+0x24>)
 8002224:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002228:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800222c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000e100 	.word	0xe000e100

08002238 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	3801      	subs	r0, #1
 800223a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800223e:	d20a      	bcs.n	8002256 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002244:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	21f0      	movs	r1, #240	; 0xf0
 8002248:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002256:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002264:	2800      	cmp	r0, #0
 8002266:	db09      	blt.n	800227c <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002268:	0943      	lsrs	r3, r0, #5
 800226a:	2201      	movs	r2, #1
 800226c:	f000 001f 	and.w	r0, r0, #31
 8002270:	fa02 f000 	lsl.w	r0, r2, r0
 8002274:	3340      	adds	r3, #64	; 0x40
 8002276:	4a02      	ldr	r2, [pc, #8]	; (8002280 <HAL_NVIC_SetPendingIRQ+0x1c>)
 8002278:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002284:	2800      	cmp	r0, #0
 8002286:	db09      	blt.n	800229c <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002288:	0943      	lsrs	r3, r0, #5
 800228a:	2201      	movs	r2, #1
 800228c:	f000 001f 	and.w	r0, r0, #31
 8002290:	fa02 f000 	lsl.w	r0, r2, r0
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	4a02      	ldr	r2, [pc, #8]	; (80022a0 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8002298:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a6:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 80022aa:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80022ac:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80022ae:	b114      	cbz	r4, 80022b6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022b0:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 80022b4:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80022b6:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
 80022ba:	f004 051c 	and.w	r5, r4, #28
 80022be:	2401      	movs	r4, #1
 80022c0:	40ac      	lsls	r4, r5
 80022c2:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022c4:	6804      	ldr	r4, [r0, #0]
 80022c6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c8:	6883      	ldr	r3, [r0, #8]
 80022ca:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022cc:	bf0b      	itete	eq
 80022ce:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80022d0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80022d2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80022d4:	60e2      	strne	r2, [r4, #12]
  }
}
 80022d6:	bd70      	pop	{r4, r5, r6, pc}

080022d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022d8:	4910      	ldr	r1, [pc, #64]	; (800231c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80022da:	6803      	ldr	r3, [r0, #0]
 80022dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80022de:	428b      	cmp	r3, r1
 80022e0:	f022 0203 	bic.w	r2, r2, #3
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80022e4:	bf95      	itete	ls
 80022e6:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80022ea:	490d      	ldrhi	r1, [pc, #52]	; (8002320 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80022ec:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80022f0:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80022f2:	bf98      	it	ls
 80022f4:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022f6:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80022fa:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022fc:	f1a3 0308 	sub.w	r3, r3, #8
 8002300:	f04f 0214 	mov.w	r2, #20
 8002304:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002308:	f04f 0201 	mov.w	r2, #1
 800230c:	f003 031c 	and.w	r3, r3, #28
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002314:	bf88      	it	hi
 8002316:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002318:	6503      	str	r3, [r0, #80]	; 0x50
}
 800231a:	4770      	bx	lr
 800231c:	40020407 	.word	0x40020407
 8002320:	4002081c 	.word	0x4002081c
 8002324:	40020880 	.word	0x40020880

08002328 <HAL_DMA_Init>:
{
 8002328:	b510      	push	{r4, lr}
  if (hdma == NULL)
 800232a:	4604      	mov	r4, r0
 800232c:	2800      	cmp	r0, #0
 800232e:	d05d      	beq.n	80023ec <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002330:	6801      	ldr	r1, [r0, #0]
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_DMA_Init+0xc8>)
 8002334:	4299      	cmp	r1, r3
 8002336:	f04f 0014 	mov.w	r0, #20
 800233a:	d84a      	bhi.n	80023d2 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800233c:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <HAL_DMA_Init+0xcc>)
 800233e:	440a      	add	r2, r1
 8002340:	fbb2 f2f0 	udiv	r2, r2, r0
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002348:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 800234c:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8002354:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8002358:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	6920      	ldr	r0, [r4, #16]
  tmp = hdma->Instance->CCR;
 800235c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235e:	4303      	orrs	r3, r0
 8002360:	6960      	ldr	r0, [r4, #20]
 8002362:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002364:	69a0      	ldr	r0, [r4, #24]
 8002366:	4303      	orrs	r3, r0
 8002368:	69e0      	ldr	r0, [r4, #28]
 800236a:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800236c:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800236e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002372:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002376:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002378:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800237a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff ffab 	bl	80022d8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002382:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002384:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800238a:	bf04      	itt	eq
 800238c:	2300      	moveq	r3, #0
 800238e:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002390:	6862      	ldr	r2, [r4, #4]
 8002392:	b2d3      	uxtb	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002396:	e9d4 1013 	ldrd	r1, r0, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800239a:	3a01      	subs	r2, #1
 800239c:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800239e:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023a0:	d81f      	bhi.n	80023e2 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80023a4:	4815      	ldr	r0, [pc, #84]	; (80023fc <HAL_DMA_Init+0xd4>)
 80023a6:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023a8:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80023aa:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023ac:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80023ae:	2101      	movs	r1, #1
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023b8:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023ba:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80023bc:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023be:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c0:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c2:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80023c4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80023c8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80023cc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 80023d0:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_DMA_Init+0xd8>)
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_DMA_Init+0xdc>)
 80023e0:	e7b4      	b.n	800234c <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80023e2:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80023e4:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023e8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80023ea:	e7ea      	b.n	80023c2 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
 80023ee:	e7ef      	b.n	80023d0 <HAL_DMA_Init+0xa8>
 80023f0:	40020407 	.word	0x40020407
 80023f4:	bffdfff8 	.word	0xbffdfff8
 80023f8:	1000823f 	.word	0x1000823f
 80023fc:	40020940 	.word	0x40020940
 8002400:	bffdfbf8 	.word	0xbffdfbf8
 8002404:	40020400 	.word	0x40020400

08002408 <HAL_DMA_Start_IT>:
{
 8002408:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800240a:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 800240e:	2d01      	cmp	r5, #1
{
 8002410:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002412:	d039      	beq.n	8002488 <HAL_DMA_Start_IT+0x80>
 8002414:	2501      	movs	r5, #1
 8002416:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800241a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 800241e:	2d01      	cmp	r5, #1
 8002420:	f04f 0600 	mov.w	r6, #0
 8002424:	f04f 0502 	mov.w	r5, #2
 8002428:	d12c      	bne.n	8002484 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800242a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242e:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002430:	6806      	ldr	r6, [r0, #0]
 8002432:	6835      	ldr	r5, [r6, #0]
 8002434:	f025 0501 	bic.w	r5, r5, #1
 8002438:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800243a:	f7ff ff33 	bl	80022a4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800243e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002440:	6803      	ldr	r3, [r0, #0]
 8002442:	b1ba      	cbz	r2, 8002474 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800244a:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800244c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800244e:	6811      	ldr	r1, [r2, #0]
 8002450:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002452:	bf42      	ittt	mi
 8002454:	6811      	ldrmi	r1, [r2, #0]
 8002456:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800245a:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800245c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800245e:	b11a      	cbz	r2, 8002468 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002460:	6811      	ldr	r1, [r2, #0]
 8002462:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002466:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002470:	2000      	movs	r0, #0
}
 8002472:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f042 020a 	orr.w	r2, r2, #10
 8002482:	e7e2      	b.n	800244a <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8002484:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002488:	2002      	movs	r0, #2
 800248a:	e7f2      	b.n	8002472 <HAL_DMA_Start_IT+0x6a>

0800248c <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800248c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002490:	2b02      	cmp	r3, #2
{
 8002492:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002494:	d003      	beq.n	800249e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	2304      	movs	r3, #4
 8002498:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800249a:	2001      	movs	r0, #1
}
 800249c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f022 020e 	bic.w	r2, r2, #14
 80024a6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024ba:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 80024be:	f003 021c 	and.w	r2, r3, #28
 80024c2:	2301      	movs	r3, #1
 80024c4:	4093      	lsls	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024c8:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 80024cc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80024ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80024d0:	b133      	cbz	r3, 80024e0 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024da:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 80024de:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 80024e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80024e8:	2400      	movs	r4, #0
 80024ea:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80024ee:	b113      	cbz	r3, 80024f6 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80024f0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	4620      	mov	r0, r4
 80024f4:	e7d2      	b.n	800249c <HAL_DMA_Abort_IT+0x10>
 80024f6:	4618      	mov	r0, r3
 80024f8:	e7d0      	b.n	800249c <HAL_DMA_Abort_IT+0x10>

080024fa <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80024fe:	6803      	ldr	r3, [r0, #0]
{
 8002500:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002502:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002506:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002508:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800250a:	2404      	movs	r4, #4
 800250c:	4094      	lsls	r4, r2
 800250e:	4234      	tst	r4, r6
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_IRQHandler+0x36>
 8002512:	f015 0f04 	tst.w	r5, #4
 8002516:	d00b      	beq.n	8002530 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800251c:	bf5e      	ittt	pl
 800251e:	681a      	ldrpl	r2, [r3, #0]
 8002520:	f022 0204 	bicpl.w	r2, r2, #4
 8002524:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8002526:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002528:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800252a:	b373      	cbz	r3, 800258a <HAL_DMA_IRQHandler+0x90>
}
 800252c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800252e:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002530:	2402      	movs	r4, #2
 8002532:	4094      	lsls	r4, r2
 8002534:	4234      	tst	r4, r6
 8002536:	d012      	beq.n	800255e <HAL_DMA_IRQHandler+0x64>
 8002538:	f015 0f02 	tst.w	r5, #2
 800253c:	d00f      	beq.n	800255e <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	0695      	lsls	r5, r2, #26
 8002542:	d406      	bmi.n	8002552 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f022 020a 	bic.w	r2, r2, #10
 800254a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800254c:	2301      	movs	r3, #1
 800254e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002552:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002554:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002556:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800255a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800255c:	e7e5      	b.n	800252a <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800255e:	2408      	movs	r4, #8
 8002560:	4094      	lsls	r4, r2
 8002562:	4234      	tst	r4, r6
 8002564:	d011      	beq.n	800258a <HAL_DMA_IRQHandler+0x90>
 8002566:	072c      	lsls	r4, r5, #28
 8002568:	d50f      	bpl.n	800258a <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256a:	681c      	ldr	r4, [r3, #0]
 800256c:	f024 040e 	bic.w	r4, r4, #14
 8002570:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002572:	2301      	movs	r3, #1
 8002574:	fa03 f202 	lsl.w	r2, r3, r2
 8002578:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800257a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800257c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002580:	2300      	movs	r3, #0
 8002582:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002586:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002588:	e7cf      	b.n	800252a <HAL_DMA_IRQHandler+0x30>
}
 800258a:	bc70      	pop	{r4, r5, r6}
 800258c:	4770      	bx	lr
	...

08002590 <HAL_DMAEx_ConfigMuxSync>:
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002590:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002594:	2b01      	cmp	r3, #1
{
 8002596:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State == HAL_DMA_STATE_READY)
 8002598:	d11b      	bne.n	80025d2 <HAL_DMAEx_ConfigMuxSync+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800259a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d019      	beq.n	80025d6 <HAL_DMAEx_ConfigMuxSync+0x46>

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80025a2:	68cb      	ldr	r3, [r1, #12]
 80025a4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	e9d1 3600 	ldrd	r3, r6, [r1]
 80025ac:	4333      	orrs	r3, r6
 80025ae:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80025b2:	7a0a      	ldrb	r2, [r1, #8]
 80025b4:	6825      	ldr	r5, [r4, #0]
 80025b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025ba:	7a4a      	ldrb	r2, [r1, #9]
 80025bc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80025c0:	4a06      	ldr	r2, [pc, #24]	; (80025dc <HAL_DMAEx_ConfigMuxSync+0x4c>)
 80025c2:	402a      	ands	r2, r5
 80025c4:	4313      	orrs	r3, r2
 80025c6:	6023      	str	r3, [r4, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80025c8:	2300      	movs	r3, #0
 80025ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_OK;
 80025ce:	4618      	mov	r0, r3
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
  }
}
 80025d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025d2:	2001      	movs	r0, #1
 80025d4:	e7fc      	b.n	80025d0 <HAL_DMAEx_ConfigMuxSync+0x40>
    __HAL_LOCK(hdma);
 80025d6:	2002      	movs	r0, #2
 80025d8:	e7fa      	b.n	80025d0 <HAL_DMAEx_ConfigMuxSync+0x40>
 80025da:	bf00      	nop
 80025dc:	e000fdff 	.word	0xe000fdff

080025e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025e4:	4a57      	ldr	r2, [pc, #348]	; (8002744 <HAL_GPIO_Init+0x164>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e6:	f8d1 e000 	ldr.w	lr, [r1]
  uint32_t position = 0x00u;
 80025ea:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ec:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	fa3e f403 	lsrs.w	r4, lr, r3
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 80025f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025fa:	2401      	movs	r4, #1
 80025fc:	fa04 f803 	lsl.w	r8, r4, r3
    if (iocurrent != 0x00u)
 8002600:	ea18 050e 	ands.w	r5, r8, lr
 8002604:	f000 8094 	beq.w	8002730 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002608:	684c      	ldr	r4, [r1, #4]
 800260a:	f024 0a10 	bic.w	sl, r4, #16
 800260e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002612:	2603      	movs	r6, #3
 8002614:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002618:	fa06 f60c 	lsl.w	r6, r6, ip
 800261c:	2f01      	cmp	r7, #1
 800261e:	ea6f 0606 	mvn.w	r6, r6
 8002622:	d811      	bhi.n	8002648 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 8002624:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002626:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800262a:	68cf      	ldr	r7, [r1, #12]
 800262c:	fa07 f70c 	lsl.w	r7, r7, ip
 8002630:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8002634:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002636:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002638:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800263c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002640:	409f      	lsls	r7, r3
 8002642:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002646:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002648:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800264a:	ea07 0806 	and.w	r8, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800264e:	688f      	ldr	r7, [r1, #8]
 8002650:	fa07 f70c 	lsl.w	r7, r7, ip
 8002654:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002658:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 800265c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265e:	d114      	bne.n	800268a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3u];
 8002660:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002664:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002668:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800266c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002670:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002674:	fa09 fb0a 	lsl.w	fp, r9, sl
 8002678:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800267c:	690f      	ldr	r7, [r1, #16]
 800267e:	fa07 f70a 	lsl.w	r7, r7, sl
 8002682:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8002686:	f8c8 7020 	str.w	r7, [r8, #32]
      temp = GPIOx->MODER;
 800268a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800268c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800268e:	f004 0703 	and.w	r7, r4, #3
 8002692:	fa07 fc0c 	lsl.w	ip, r7, ip
 8002696:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 800269a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269c:	00e6      	lsls	r6, r4, #3
 800269e:	d547      	bpl.n	8002730 <HAL_GPIO_Init+0x150>
 80026a0:	f023 0703 	bic.w	r7, r3, #3
 80026a4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80026a8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ac:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80026b0:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026b2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80026b6:	fa09 f80c 	lsl.w	r8, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ba:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026be:	ea26 0808 	bic.w	r8, r6, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026c2:	d037      	beq.n	8002734 <HAL_GPIO_Init+0x154>
 80026c4:	4e20      	ldr	r6, [pc, #128]	; (8002748 <HAL_GPIO_Init+0x168>)
 80026c6:	42b0      	cmp	r0, r6
 80026c8:	d036      	beq.n	8002738 <HAL_GPIO_Init+0x158>
 80026ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	d034      	beq.n	800273c <HAL_GPIO_Init+0x15c>
 80026d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026d6:	42b0      	cmp	r0, r6
 80026d8:	d032      	beq.n	8002740 <HAL_GPIO_Init+0x160>
 80026da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026de:	42b0      	cmp	r0, r6
 80026e0:	bf14      	ite	ne
 80026e2:	2607      	movne	r6, #7
 80026e4:	2604      	moveq	r6, #4
 80026e6:	fa06 f60c 	lsl.w	r6, r6, ip
 80026ea:	ea46 0608 	orr.w	r6, r6, r8
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ee:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80026f0:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80026f4:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80026fa:	bf0c      	ite	eq
 80026fc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80026fe:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8002700:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8002704:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002708:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800270c:	bf0c      	ite	eq
 800270e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002710:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8002712:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8002716:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002718:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800271c:	bf0c      	ite	eq
 800271e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002720:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8002722:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8002724:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002726:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8002728:	bf54      	ite	pl
 800272a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800272c:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800272e:	6056      	str	r6, [r2, #4]
    position++;
 8002730:	3301      	adds	r3, #1
 8002732:	e75d      	b.n	80025f0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002734:	2600      	movs	r6, #0
 8002736:	e7d6      	b.n	80026e6 <HAL_GPIO_Init+0x106>
 8002738:	2601      	movs	r6, #1
 800273a:	e7d4      	b.n	80026e6 <HAL_GPIO_Init+0x106>
 800273c:	2602      	movs	r6, #2
 800273e:	e7d2      	b.n	80026e6 <HAL_GPIO_Init+0x106>
 8002740:	2603      	movs	r6, #3
 8002742:	e7d0      	b.n	80026e6 <HAL_GPIO_Init+0x106>
 8002744:	58000800 	.word	0x58000800
 8002748:	48000400 	.word	0x48000400

0800274c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	b10a      	cbz	r2, 8002752 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800274e:	6181      	str	r1, [r0, #24]
 8002750:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002752:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002754:	4770      	bx	lr
	...

08002758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002758:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800275c:	68d9      	ldr	r1, [r3, #12]
 800275e:	4201      	tst	r1, r0
 8002760:	d002      	beq.n	8002768 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002762:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002764:	f7fe f86f 	bl	8000846 <HAL_GPIO_EXTI_Callback>
  }
}
 8002768:	bd08      	pop	{r3, pc}
 800276a:	bf00      	nop
 800276c:	58000800 	.word	0x58000800

08002770 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002770:	4a02      	ldr	r2, [pc, #8]	; (800277c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002772:	6813      	ldr	r3, [r2, #0]
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]
}
 800277a:	4770      	bx	lr
 800277c:	58000400 	.word	0x58000400

08002780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <HAL_PWREx_GetVoltageRange+0xc>)
 8002782:	6818      	ldr	r0, [r3, #0]
}
 8002784:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	58000400 	.word	0x58000400

08002790 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002794:	6818      	ldr	r0, [r3, #0]
}
 8002796:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800279a:	4770      	bx	lr

0800279c <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	6818      	ldr	r0, [r3, #0]
}
 80027a2:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80027a6:	4770      	bx	lr

080027a8 <LL_RCC_LSI1_IsReady>:
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ac:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80027b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	6818      	ldr	r0, [r3, #0]
}
 80027bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80027c0:	4770      	bx	lr

080027c2 <LL_RCC_MSI_SetRange>:
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80027c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027cc:	4318      	orrs	r0, r3
 80027ce:	6010      	str	r0, [r2, #0]
}
 80027d0:	4770      	bx	lr

080027d2 <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 80027dc:	28b0      	cmp	r0, #176	; 0xb0
 80027de:	bf28      	it	cs
 80027e0:	20b0      	movcs	r0, #176	; 0xb0
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_MSI_SetCalibTrimming>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e8:	6853      	ldr	r3, [r2, #4]
 80027ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80027f2:	6050      	str	r0, [r2, #4]
}
 80027f4:	4770      	bx	lr
	...

080027f8 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80027f8:	28b0      	cmp	r0, #176	; 0xb0
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80027fc:	4a2e      	ldr	r2, [pc, #184]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80027fe:	bf98      	it	ls
 8002800:	0900      	lsrls	r0, r0, #4
{
 8002802:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002804:	bf8c      	ite	hi
 8002806:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002808:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800280c:	4c2b      	ldr	r4, [pc, #172]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002818:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800281c:	466e      	mov	r6, sp
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
 8002828:	fbb5 f5f3 	udiv	r5, r5, r3
 800282c:	f7ff ffa8 	bl	8002780 <HAL_PWREx_GetVoltageRange>
 8002830:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002832:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002836:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002838:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800283c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002840:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002844:	ac08      	add	r4, sp, #32
 8002846:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800284a:	d017      	beq.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x84>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800284c:	2d06      	cmp	r5, #6
 800284e:	d924      	bls.n	800289a <RCC_SetFlashLatencyFromMSIRange+0xa2>
 8002850:	2d0c      	cmp	r5, #12
 8002852:	d924      	bls.n	800289e <RCC_SetFlashLatencyFromMSIRange+0xa6>
 8002854:	2d10      	cmp	r5, #16
 8002856:	d924      	bls.n	80028a2 <RCC_SetFlashLatencyFromMSIRange+0xaa>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002858:	2400      	movs	r4, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800285a:	4d1a      	ldr	r5, [pc, #104]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	f023 0307 	bic.w	r3, r3, #7
 8002862:	4323      	orrs	r3, r4
 8002864:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002866:	f7ff fc5d 	bl	8002124 <HAL_GetTick>
 800286a:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800286c:	682b      	ldr	r3, [r5, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	429c      	cmp	r4, r3
 8002874:	d117      	bne.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002876:	2000      	movs	r0, #0
}
 8002878:	b009      	add	sp, #36	; 0x24
 800287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800287c:	2300      	movs	r3, #0
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800287e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8002882:	4295      	cmp	r5, r2
 8002884:	d805      	bhi.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x9a>
        latency = FLASH_LATENCY_RANGE[index];
 8002886:	aa08      	add	r2, sp, #32
 8002888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800288c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8002890:	e7e3      	b.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x62>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002892:	3301      	adds	r3, #1
 8002894:	2b04      	cmp	r3, #4
 8002896:	d1f2      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x86>
 8002898:	e7de      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800289a:	2300      	movs	r3, #0
 800289c:	e7f3      	b.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 800289e:	2301      	movs	r3, #1
 80028a0:	e7f1      	b.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x8e>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e7ef      	b.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x8e>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a6:	f7ff fc3d 	bl	8002124 <HAL_GetTick>
 80028aa:	1b80      	subs	r0, r0, r6
 80028ac:	2802      	cmp	r0, #2
 80028ae:	d9dd      	bls.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x74>
      return HAL_TIMEOUT;
 80028b0:	2003      	movs	r0, #3
 80028b2:	e7e1      	b.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x80>
 80028b4:	08007118 	.word	0x08007118
 80028b8:	08007158 	.word	0x08007158
 80028bc:	08007218 	.word	0x08007218
 80028c0:	000f4240 	.word	0x000f4240
 80028c4:	58004000 	.word	0x58004000

080028c8 <HAL_RCC_OscConfig>:
{
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 80028ca:	4604      	mov	r4, r0
 80028cc:	b908      	cbnz	r0, 80028d2 <HAL_RCC_OscConfig+0xa>
          return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
 80028d0:	e081      	b.n	80029d6 <HAL_RCC_OscConfig+0x10e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	069f      	lsls	r7, r3, #26
 80028d6:	d52a      	bpl.n	800292e <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028dc:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028de:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028e0:	f013 030c 	ands.w	r3, r3, #12
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2a>
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d15a      	bne.n	80029a0 <HAL_RCC_OscConfig+0xd8>
 80028ea:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d156      	bne.n	80029a0 <HAL_RCC_OscConfig+0xd8>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f2:	f7ff ff60 	bl	80027b6 <LL_RCC_MSI_IsReady>
 80028f6:	b110      	cbz	r0, 80028fe <HAL_RCC_OscConfig+0x36>
 80028f8:	69e3      	ldr	r3, [r4, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0e7      	beq.n	80028ce <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002900:	f7ff ff67 	bl	80027d2 <LL_RCC_MSI_GetRange>
 8002904:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002906:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002908:	d93f      	bls.n	800298a <HAL_RCC_OscConfig+0xc2>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800290a:	f7ff ff75 	bl	80027f8 <RCC_SetFlashLatencyFromMSIRange>
 800290e:	2800      	cmp	r0, #0
 8002910:	d1dd      	bne.n	80028ce <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002914:	f7ff ff55 	bl	80027c2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002918:	6a20      	ldr	r0, [r4, #32]
 800291a:	f7ff ff63 	bl	80027e4 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 800291e:	f7ff fb6f 	bl	8002000 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002922:	4bba      	ldr	r3, [pc, #744]	; (8002c0c <HAL_RCC_OscConfig+0x344>)
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	f7ff fbb9 	bl	800209c <HAL_InitTick>
 800292a:	2800      	cmp	r0, #0
 800292c:	d1cf      	bne.n	80028ce <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	07de      	lsls	r6, r3, #31
 8002932:	d462      	bmi.n	80029fa <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	079d      	lsls	r5, r3, #30
 8002938:	f100 80ad 	bmi.w	8002a96 <HAL_RCC_OscConfig+0x1ce>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	f013 0f18 	tst.w	r3, #24
 8002942:	f040 80ee 	bne.w	8002b22 <HAL_RCC_OscConfig+0x25a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	0758      	lsls	r0, r3, #29
 800294a:	f100 8188 	bmi.w	8002c5e <HAL_RCC_OscConfig+0x396>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	0658      	lsls	r0, r3, #25
 8002952:	f140 81ed 	bpl.w	8002d30 <HAL_RCC_OscConfig+0x468>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002958:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 81d4 	beq.w	8002d0a <HAL_RCC_OscConfig+0x442>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002962:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800296e:	f7ff fbd9 	bl	8002124 <HAL_GetTick>
 8002972:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002974:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002978:	0799      	lsls	r1, r3, #30
 800297a:	f100 81d9 	bmi.w	8002d30 <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800297e:	f7ff fbd1 	bl	8002124 <HAL_GetTick>
 8002982:	1b80      	subs	r0, r0, r6
 8002984:	2802      	cmp	r0, #2
 8002986:	d9f5      	bls.n	8002974 <HAL_RCC_OscConfig+0xac>
 8002988:	e024      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800298a:	f7ff ff1a 	bl	80027c2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298e:	6a20      	ldr	r0, [r4, #32]
 8002990:	f7ff ff28 	bl	80027e4 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002994:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002996:	f7ff ff2f 	bl	80027f8 <RCC_SetFlashLatencyFromMSIRange>
 800299a:	2800      	cmp	r0, #0
 800299c:	d0bf      	beq.n	800291e <HAL_RCC_OscConfig+0x56>
 800299e:	e796      	b.n	80028ce <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029a0:	69e2      	ldr	r2, [r4, #28]
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	b1ba      	cbz	r2, 80029d8 <HAL_RCC_OscConfig+0x110>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029b0:	f7ff fbb8 	bl	8002124 <HAL_GetTick>
 80029b4:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80029b6:	f7ff fefe 	bl	80027b6 <LL_RCC_MSI_IsReady>
 80029ba:	b130      	cbz	r0, 80029ca <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80029be:	f7ff ff00 	bl	80027c2 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c2:	6a20      	ldr	r0, [r4, #32]
 80029c4:	f7ff ff0e 	bl	80027e4 <LL_RCC_MSI_SetCalibTrimming>
 80029c8:	e7b1      	b.n	800292e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ca:	f7ff fbab 	bl	8002124 <HAL_GetTick>
 80029ce:	1b40      	subs	r0, r0, r5
 80029d0:	2802      	cmp	r0, #2
 80029d2:	d9f0      	bls.n	80029b6 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 80029d4:	2003      	movs	r0, #3
}
 80029d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029e0:	f7ff fba0 	bl	8002124 <HAL_GetTick>
 80029e4:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 80029e6:	f7ff fee6 	bl	80027b6 <LL_RCC_MSI_IsReady>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d09f      	beq.n	800292e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ee:	f7ff fb99 	bl	8002124 <HAL_GetTick>
 80029f2:	1b40      	subs	r0, r0, r5
 80029f4:	2802      	cmp	r0, #2
 80029f6:	d9f6      	bls.n	80029e6 <HAL_RCC_OscConfig+0x11e>
 80029f8:	e7ec      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fe:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a00:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x14e>
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCC_OscConfig+0x15e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a0e:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_OscConfig+0x15e>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a16:	f7ff febb 	bl	8002790 <LL_RCC_HSE_IsReady>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d08a      	beq.n	8002934 <HAL_RCC_OscConfig+0x6c>
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d187      	bne.n	8002934 <HAL_RCC_OscConfig+0x6c>
 8002a24:	e753      	b.n	80028ce <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a26:	6862      	ldr	r2, [r4, #4]
 8002a28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	d111      	bne.n	8002a56 <HAL_RCC_OscConfig+0x18e>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a3a:	f7ff fb73 	bl	8002124 <HAL_GetTick>
 8002a3e:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a40:	f7ff fea6 	bl	8002790 <LL_RCC_HSE_IsReady>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	f47f af75 	bne.w	8002934 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4a:	f7ff fb6b 	bl	8002124 <HAL_GetTick>
 8002a4e:	1b40      	subs	r0, r0, r5
 8002a50:	2864      	cmp	r0, #100	; 0x64
 8002a52:	d9f5      	bls.n	8002a40 <HAL_RCC_OscConfig+0x178>
 8002a54:	e7be      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002a5a:	d104      	bne.n	8002a66 <HAL_RCC_OscConfig+0x19e>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e7e5      	b.n	8002a32 <HAL_RCC_OscConfig+0x16a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002a6c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002a74:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a76:	2a00      	cmp	r2, #0
 8002a78:	d1df      	bne.n	8002a3a <HAL_RCC_OscConfig+0x172>
        tickstart = HAL_GetTick();
 8002a7a:	f7ff fb53 	bl	8002124 <HAL_GetTick>
 8002a7e:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a80:	f7ff fe86 	bl	8002790 <LL_RCC_HSE_IsReady>
 8002a84:	2800      	cmp	r0, #0
 8002a86:	f43f af55 	beq.w	8002934 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8a:	f7ff fb4b 	bl	8002124 <HAL_GetTick>
 8002a8e:	1b40      	subs	r0, r0, r5
 8002a90:	2864      	cmp	r0, #100	; 0x64
 8002a92:	d9f5      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1b8>
 8002a94:	e79e      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9a:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a9c:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a9e:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1ea>
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d114      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x20c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002aaa:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d110      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x20c>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab2:	f7ff fe73 	bl	800279c <LL_RCC_HSI_IsReady>
 8002ab6:	b118      	cbz	r0, 8002ac0 <HAL_RCC_OscConfig+0x1f8>
 8002ab8:	68e3      	ldr	r3, [r4, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f43f af07 	beq.w	80028ce <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac4:	6921      	ldr	r1, [r4, #16]
 8002ac6:	6853      	ldr	r3, [r2, #4]
 8002ac8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002acc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002ad0:	6053      	str	r3, [r2, #4]
 8002ad2:	e733      	b.n	800293c <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad4:	68e2      	ldr	r2, [r4, #12]
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	b182      	cbz	r2, 8002afe <HAL_RCC_OscConfig+0x236>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ae4:	f7ff fb1e 	bl	8002124 <HAL_GetTick>
 8002ae8:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8002aea:	f7ff fe57 	bl	800279c <LL_RCC_HSI_IsReady>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d1e6      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x1f8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7ff fb17 	bl	8002124 <HAL_GetTick>
 8002af6:	1b40      	subs	r0, r0, r5
 8002af8:	2802      	cmp	r0, #2
 8002afa:	d9f6      	bls.n	8002aea <HAL_RCC_OscConfig+0x222>
 8002afc:	e76a      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b06:	f7ff fb0d 	bl	8002124 <HAL_GetTick>
 8002b0a:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b0c:	f7ff fe46 	bl	800279c <LL_RCC_HSI_IsReady>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	f43f af13 	beq.w	800293c <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b16:	f7ff fb05 	bl	8002124 <HAL_GetTick>
 8002b1a:	1b40      	subs	r0, r0, r5
 8002b1c:	2802      	cmp	r0, #2
 8002b1e:	d9f5      	bls.n	8002b0c <HAL_RCC_OscConfig+0x244>
 8002b20:	e758      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b22:	6962      	ldr	r2, [r4, #20]
 8002b24:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d071      	beq.n	8002c10 <HAL_RCC_OscConfig+0x348>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002b2c:	06d9      	lsls	r1, r3, #27
 8002b2e:	d547      	bpl.n	8002bc0 <HAL_RCC_OscConfig+0x2f8>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002b30:	f7ff fe3a 	bl	80027a8 <LL_RCC_LSI1_IsReady>
 8002b34:	b358      	cbz	r0, 8002b8e <HAL_RCC_OscConfig+0x2c6>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b36:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002b3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002b46:	f7ff faed 	bl	8002124 <HAL_GetTick>
 8002b4a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002b4c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b50:	071a      	lsls	r2, r3, #28
 8002b52:	d52f      	bpl.n	8002bb4 <HAL_RCC_OscConfig+0x2ec>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002b54:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b58:	69a2      	ldr	r2, [r4, #24]
 8002b5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b62:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b66:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002b72:	f7ff fad7 	bl	8002124 <HAL_GetTick>
 8002b76:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002b78:	f7ff fe16 	bl	80027a8 <LL_RCC_LSI1_IsReady>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	f43f aee2 	beq.w	8002946 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b82:	f7ff facf 	bl	8002124 <HAL_GetTick>
 8002b86:	1b40      	subs	r0, r0, r5
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	d9f5      	bls.n	8002b78 <HAL_RCC_OscConfig+0x2b0>
 8002b8c:	e722      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b8e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002b9a:	f7ff fac3 	bl	8002124 <HAL_GetTick>
 8002b9e:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ba0:	f7ff fe02 	bl	80027a8 <LL_RCC_LSI1_IsReady>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d1c6      	bne.n	8002b36 <HAL_RCC_OscConfig+0x26e>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ba8:	f7ff fabc 	bl	8002124 <HAL_GetTick>
 8002bac:	1b40      	subs	r0, r0, r5
 8002bae:	2802      	cmp	r0, #2
 8002bb0:	d9f6      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2d8>
 8002bb2:	e70f      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002bb4:	f7ff fab6 	bl	8002124 <HAL_GetTick>
 8002bb8:	1b80      	subs	r0, r0, r6
 8002bba:	2803      	cmp	r0, #3
 8002bbc:	d9c6      	bls.n	8002b4c <HAL_RCC_OscConfig+0x284>
 8002bbe:	e709      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
 8002bc0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8002bcc:	f7ff faaa 	bl	8002124 <HAL_GetTick>
 8002bd0:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002bd2:	f7ff fde9 	bl	80027a8 <LL_RCC_LSI1_IsReady>
 8002bd6:	b198      	cbz	r0, 8002c00 <HAL_RCC_OscConfig+0x338>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002bdc:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bde:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002bea:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002bee:	071b      	lsls	r3, r3, #28
 8002bf0:	f57f aea9 	bpl.w	8002946 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002bf4:	f7ff fa96 	bl	8002124 <HAL_GetTick>
 8002bf8:	1b80      	subs	r0, r0, r6
 8002bfa:	2803      	cmp	r0, #3
 8002bfc:	d9f5      	bls.n	8002bea <HAL_RCC_OscConfig+0x322>
 8002bfe:	e6e9      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c00:	f7ff fa90 	bl	8002124 <HAL_GetTick>
 8002c04:	1b80      	subs	r0, r0, r6
 8002c06:	2802      	cmp	r0, #2
 8002c08:	d9e3      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x30a>
 8002c0a:	e6e3      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
 8002c0c:	2000003c 	.word	0x2000003c
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c10:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c1c:	f7ff fa82 	bl	8002124 <HAL_GetTick>
 8002c20:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c22:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c26:	071f      	lsls	r7, r3, #28
 8002c28:	d413      	bmi.n	8002c52 <HAL_RCC_OscConfig+0x38a>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c2a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c36:	f7ff fa75 	bl	8002124 <HAL_GetTick>
 8002c3a:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002c3c:	f7ff fdb4 	bl	80027a8 <LL_RCC_LSI1_IsReady>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	f43f ae80 	beq.w	8002946 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c46:	f7ff fa6d 	bl	8002124 <HAL_GetTick>
 8002c4a:	1b40      	subs	r0, r0, r5
 8002c4c:	2802      	cmp	r0, #2
 8002c4e:	d9f5      	bls.n	8002c3c <HAL_RCC_OscConfig+0x374>
 8002c50:	e6c0      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c52:	f7ff fa67 	bl	8002124 <HAL_GetTick>
 8002c56:	1b80      	subs	r0, r0, r6
 8002c58:	2803      	cmp	r0, #3
 8002c5a:	d9e2      	bls.n	8002c22 <HAL_RCC_OscConfig+0x35a>
 8002c5c:	e6ba      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5e:	4d84      	ldr	r5, [pc, #528]	; (8002e70 <HAL_RCC_OscConfig+0x5a8>)
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	05d8      	lsls	r0, r3, #23
 8002c64:	d51c      	bpl.n	8002ca0 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	68a3      	ldr	r3, [r4, #8]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002c6e:	d125      	bne.n	8002cbc <HAL_RCC_OscConfig+0x3f4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c70:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fa52 	bl	8002124 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c80:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8002c84:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f241 3588 	movw	r5, #5000	; 0x1388
 8002c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c8e:	079a      	lsls	r2, r3, #30
 8002c90:	f53f ae5d 	bmi.w	800294e <HAL_RCC_OscConfig+0x86>
 8002c94:	f7ff fa46 	bl	8002124 <HAL_GetTick>
 8002c98:	1b80      	subs	r0, r0, r6
 8002c9a:	42a8      	cmp	r0, r5
 8002c9c:	d9f5      	bls.n	8002c8a <HAL_RCC_OscConfig+0x3c2>
 8002c9e:	e699      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
      HAL_PWR_EnableBkUpAccess();
 8002ca0:	f7ff fd66 	bl	8002770 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002ca4:	f7ff fa3e 	bl	8002124 <HAL_GetTick>
 8002ca8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	05d9      	lsls	r1, r3, #23
 8002cae:	d4da      	bmi.n	8002c66 <HAL_RCC_OscConfig+0x39e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb0:	f7ff fa38 	bl	8002124 <HAL_GetTick>
 8002cb4:	1b80      	subs	r0, r0, r6
 8002cb6:	2802      	cmp	r0, #2
 8002cb8:	d9f7      	bls.n	8002caa <HAL_RCC_OscConfig+0x3e2>
 8002cba:	e68b      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x406>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cc0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002ccc:	e7d0      	b.n	8002c70 <HAL_RCC_OscConfig+0x3a8>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cce:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cda:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1c8      	bne.n	8002c7c <HAL_RCC_OscConfig+0x3b4>
      tickstart = HAL_GetTick();
 8002cea:	f7ff fa1b 	bl	8002124 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002cf2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cf4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002cf8:	079b      	lsls	r3, r3, #30
 8002cfa:	f57f ae28 	bpl.w	800294e <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7ff fa11 	bl	8002124 <HAL_GetTick>
 8002d02:	1bc0      	subs	r0, r0, r7
 8002d04:	42b0      	cmp	r0, r6
 8002d06:	d9f5      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x42c>
 8002d08:	e664      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d0a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002d16:	f7ff fa05 	bl	8002124 <HAL_GetTick>
 8002d1a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002d1c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002d20:	079a      	lsls	r2, r3, #30
 8002d22:	d505      	bpl.n	8002d30 <HAL_RCC_OscConfig+0x468>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d24:	f7ff f9fe 	bl	8002124 <HAL_GetTick>
 8002d28:	1b80      	subs	r0, r0, r6
 8002d2a:	2802      	cmp	r0, #2
 8002d2c:	d9f6      	bls.n	8002d1c <HAL_RCC_OscConfig+0x454>
 8002d2e:	e651      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002d32:	b909      	cbnz	r1, 8002d38 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8002d34:	2000      	movs	r0, #0
 8002d36:	e64e      	b.n	80029d6 <HAL_RCC_OscConfig+0x10e>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d38:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d3c:	2902      	cmp	r1, #2
 8002d3e:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002d40:	68eb      	ldr	r3, [r5, #12]
 8002d42:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d46:	d174      	bne.n	8002e32 <HAL_RCC_OscConfig+0x56a>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002d4a:	f003 0103 	and.w	r1, r3, #3
 8002d4e:	4281      	cmp	r1, r0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4bc>
 8002d52:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d54:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d58:	4281      	cmp	r1, r0
 8002d5a:	d113      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d5e:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d62:	4281      	cmp	r1, r0
 8002d64:	d10e      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4bc>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d68:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d6c:	4281      	cmp	r1, r0
 8002d6e:	d109      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d70:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d72:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d76:	4281      	cmp	r1, r0
 8002d78:	d104      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4bc>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d80:	428b      	cmp	r3, r1
 8002d82:	d03f      	beq.n	8002e04 <HAL_RCC_OscConfig+0x53c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d84:	2a0c      	cmp	r2, #12
 8002d86:	f43f ada2 	beq.w	80028ce <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d8a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	f53f ad9c 	bmi.w	80028ce <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002d96:	682b      	ldr	r3, [r5, #0]
 8002d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002d9e:	f7ff f9c1 	bl	8002124 <HAL_GetTick>
 8002da2:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	682b      	ldr	r3, [r5, #0]
 8002da6:	019f      	lsls	r7, r3, #6
 8002da8:	d426      	bmi.n	8002df8 <HAL_RCC_OscConfig+0x530>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002daa:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8002dae:	68e9      	ldr	r1, [r5, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	4a30      	ldr	r2, [pc, #192]	; (8002e74 <HAL_RCC_OscConfig+0x5ac>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	4313      	orrs	r3, r2
 8002db8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002dc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002dca:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd4:	68eb      	ldr	r3, [r5, #12]
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002ddc:	f7ff f9a2 	bl	8002124 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8002de4:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	0198      	lsls	r0, r3, #6
 8002dea:	d4a3      	bmi.n	8002d34 <HAL_RCC_OscConfig+0x46c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7ff f99a 	bl	8002124 <HAL_GetTick>
 8002df0:	1b40      	subs	r0, r0, r5
 8002df2:	2802      	cmp	r0, #2
 8002df4:	d9f7      	bls.n	8002de6 <HAL_RCC_OscConfig+0x51e>
 8002df6:	e5ed      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7ff f994 	bl	8002124 <HAL_GetTick>
 8002dfc:	1b80      	subs	r0, r0, r6
 8002dfe:	2802      	cmp	r0, #2
 8002e00:	d9d0      	bls.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
 8002e02:	e5e7      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	0199      	lsls	r1, r3, #6
 8002e08:	d494      	bmi.n	8002d34 <HAL_RCC_OscConfig+0x46c>
 8002e0a:	682b      	ldr	r3, [r5, #0]
 8002e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e10:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e12:	68eb      	ldr	r3, [r5, #12]
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8002e1a:	f7ff f983 	bl	8002124 <HAL_GetTick>
 8002e1e:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	019a      	lsls	r2, r3, #6
 8002e24:	d486      	bmi.n	8002d34 <HAL_RCC_OscConfig+0x46c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7ff f97d 	bl	8002124 <HAL_GetTick>
 8002e2a:	1b00      	subs	r0, r0, r4
 8002e2c:	2802      	cmp	r0, #2
 8002e2e:	d9f7      	bls.n	8002e20 <HAL_RCC_OscConfig+0x558>
 8002e30:	e5d0      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e32:	2a0c      	cmp	r2, #12
 8002e34:	f43f ad4b 	beq.w	80028ce <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002e40:	68eb      	ldr	r3, [r5, #12]
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002e48:	68eb      	ldr	r3, [r5, #12]
 8002e4a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002e54:	f7ff f966 	bl	8002124 <HAL_GetTick>
 8002e58:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5a:	682b      	ldr	r3, [r5, #0]
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	f57f af69 	bpl.w	8002d34 <HAL_RCC_OscConfig+0x46c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7ff f95f 	bl	8002124 <HAL_GetTick>
 8002e66:	1b00      	subs	r0, r0, r4
 8002e68:	2802      	cmp	r0, #2
 8002e6a:	d9f6      	bls.n	8002e5a <HAL_RCC_OscConfig+0x592>
 8002e6c:	e5b2      	b.n	80029d4 <HAL_RCC_OscConfig+0x10c>
 8002e6e:	bf00      	nop
 8002e70:	58000400 	.word	0x58000400
 8002e74:	11c1808c 	.word	0x11c1808c

08002e78 <HAL_RCC_ClockConfig>:
{
 8002e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e7c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	4604      	mov	r4, r0
 8002e80:	b910      	cbnz	r0, 8002e88 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002e82:	2001      	movs	r0, #1
}
 8002e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4e74      	ldr	r6, [pc, #464]	; (800305c <HAL_RCC_ClockConfig+0x1e4>)
 8002e8a:	6833      	ldr	r3, [r6, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d316      	bcc.n	8002ec2 <HAL_RCC_ClockConfig+0x4a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	0798      	lsls	r0, r3, #30
 8002e98:	d527      	bpl.n	8002eea <HAL_RCC_ClockConfig+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e9a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002e9e:	68a2      	ldr	r2, [r4, #8]
 8002ea0:	68b3      	ldr	r3, [r6, #8]
 8002ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002eaa:	f7ff f93b 	bl	8002124 <HAL_GetTick>
 8002eae:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002eb0:	68b3      	ldr	r3, [r6, #8]
 8002eb2:	03d9      	lsls	r1, r3, #15
 8002eb4:	d419      	bmi.n	8002eea <HAL_RCC_ClockConfig+0x72>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eb6:	f7ff f935 	bl	8002124 <HAL_GetTick>
 8002eba:	1bc0      	subs	r0, r0, r7
 8002ebc:	2802      	cmp	r0, #2
 8002ebe:	d9f7      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x38>
 8002ec0:	e011      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x6e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	6833      	ldr	r3, [r6, #0]
 8002ec4:	f023 0307 	bic.w	r3, r3, #7
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ecc:	f7ff f92a 	bl	8002124 <HAL_GetTick>
 8002ed0:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	6833      	ldr	r3, [r6, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	42ab      	cmp	r3, r5
 8002eda:	d0db      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002edc:	f7ff f922 	bl	8002124 <HAL_GetTick>
 8002ee0:	1bc0      	subs	r0, r0, r7
 8002ee2:	2802      	cmp	r0, #2
 8002ee4:	d9f5      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x5a>
        return HAL_TIMEOUT;
 8002ee6:	2003      	movs	r0, #3
 8002ee8:	e7cc      	b.n	8002e84 <HAL_RCC_ClockConfig+0xc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	069a      	lsls	r2, r3, #26
 8002eee:	d516      	bpl.n	8002f1e <HAL_RCC_ClockConfig+0xa6>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ef0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002ef4:	6962      	ldr	r2, [r4, #20]
 8002ef6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002f04:	f7ff f90e 	bl	8002124 <HAL_GetTick>
 8002f08:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f0a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002f0e:	039b      	lsls	r3, r3, #14
 8002f10:	d405      	bmi.n	8002f1e <HAL_RCC_ClockConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f12:	f7ff f907 	bl	8002124 <HAL_GetTick>
 8002f16:	1bc0      	subs	r0, r0, r7
 8002f18:	2802      	cmp	r0, #2
 8002f1a:	d9f6      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x92>
 8002f1c:	e7e3      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	0658      	lsls	r0, r3, #25
 8002f22:	d517      	bpl.n	8002f54 <HAL_RCC_ClockConfig+0xdc>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f24:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002f28:	69a2      	ldr	r2, [r4, #24]
 8002f2a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002f2e:	f023 030f 	bic.w	r3, r3, #15
 8002f32:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002f36:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002f3a:	f7ff f8f3 	bl	8002124 <HAL_GetTick>
 8002f3e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f40:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002f44:	03d9      	lsls	r1, r3, #15
 8002f46:	d405      	bmi.n	8002f54 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f48:	f7ff f8ec 	bl	8002124 <HAL_GetTick>
 8002f4c:	1bc0      	subs	r0, r0, r7
 8002f4e:	2802      	cmp	r0, #2
 8002f50:	d9f6      	bls.n	8002f40 <HAL_RCC_ClockConfig+0xc8>
 8002f52:	e7c8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	075a      	lsls	r2, r3, #29
 8002f58:	d513      	bpl.n	8002f82 <HAL_RCC_ClockConfig+0x10a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f5a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002f5e:	68e2      	ldr	r2, [r4, #12]
 8002f60:	68b3      	ldr	r3, [r6, #8]
 8002f62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002f6a:	f7ff f8db 	bl	8002124 <HAL_GetTick>
 8002f6e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f70:	68b3      	ldr	r3, [r6, #8]
 8002f72:	039b      	lsls	r3, r3, #14
 8002f74:	d405      	bmi.n	8002f82 <HAL_RCC_ClockConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f76:	f7ff f8d5 	bl	8002124 <HAL_GetTick>
 8002f7a:	1bc0      	subs	r0, r0, r7
 8002f7c:	2802      	cmp	r0, #2
 8002f7e:	d9f7      	bls.n	8002f70 <HAL_RCC_ClockConfig+0xf8>
 8002f80:	e7b1      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	0718      	lsls	r0, r3, #28
 8002f86:	d514      	bpl.n	8002fb2 <HAL_RCC_ClockConfig+0x13a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002f88:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f8c:	6922      	ldr	r2, [r4, #16]
 8002f8e:	68b3      	ldr	r3, [r6, #8]
 8002f90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002f94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002f98:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002f9a:	f7ff f8c3 	bl	8002124 <HAL_GetTick>
 8002f9e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002fa0:	68b3      	ldr	r3, [r6, #8]
 8002fa2:	0359      	lsls	r1, r3, #13
 8002fa4:	d405      	bmi.n	8002fb2 <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fa6:	f7ff f8bd 	bl	8002124 <HAL_GetTick>
 8002faa:	1bc0      	subs	r0, r0, r7
 8002fac:	2802      	cmp	r0, #2
 8002fae:	d9f7      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x128>
 8002fb0:	e799      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	07da      	lsls	r2, r3, #31
 8002fb6:	d40d      	bmi.n	8002fd4 <HAL_RCC_ClockConfig+0x15c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4c28      	ldr	r4, [pc, #160]	; (800305c <HAL_RCC_ClockConfig+0x1e4>)
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	d837      	bhi.n	8003034 <HAL_RCC_ClockConfig+0x1bc>
  SystemCoreClockUpdate();
 8002fc4:	f7ff f81c 	bl	8002000 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8002fc8:	f7ff f8b2 	bl	8002130 <HAL_GetTickPrio>
}
 8002fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002fd0:	f7ff b864 	b.w	800209c <HAL_InitTick>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d103      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x16a>
      if (LL_RCC_HSE_IsReady() == 0U)
 8002fda:	f7ff fbd9 	bl	8002790 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002fde:	b940      	cbnz	r0, 8002ff2 <HAL_RCC_ClockConfig+0x17a>
 8002fe0:	e74f      	b.n	8002e82 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d11f      	bne.n	8003026 <HAL_RCC_ClockConfig+0x1ae>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	f57f af48 	bpl.w	8002e82 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ff2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002ff6:	6862      	ldr	r2, [r4, #4]
 8002ff8:	68b3      	ldr	r3, [r6, #8]
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003002:	f7ff f88f 	bl	8002124 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003006:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800300a:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800300c:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	6862      	ldr	r2, [r4, #4]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003018:	d0ce      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301a:	f7ff f883 	bl	8002124 <HAL_GetTick>
 800301e:	1bc0      	subs	r0, r0, r7
 8003020:	4540      	cmp	r0, r8
 8003022:	d9f3      	bls.n	800300c <HAL_RCC_ClockConfig+0x194>
 8003024:	e75f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x6e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003026:	b913      	cbnz	r3, 800302e <HAL_RCC_ClockConfig+0x1b6>
      if (LL_RCC_MSI_IsReady() == 0U)
 8003028:	f7ff fbc5 	bl	80027b6 <LL_RCC_MSI_IsReady>
 800302c:	e7d7      	b.n	8002fde <HAL_RCC_ClockConfig+0x166>
      if (LL_RCC_HSI_IsReady() == 0U)
 800302e:	f7ff fbb5 	bl	800279c <LL_RCC_HSI_IsReady>
 8003032:	e7d4      	b.n	8002fde <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	f023 0307 	bic.w	r3, r3, #7
 800303a:	432b      	orrs	r3, r5
 800303c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800303e:	f7ff f871 	bl	8002124 <HAL_GetTick>
 8003042:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	42ab      	cmp	r3, r5
 800304c:	d0ba      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800304e:	f7ff f869 	bl	8002124 <HAL_GetTick>
 8003052:	1b80      	subs	r0, r0, r6
 8003054:	2802      	cmp	r0, #2
 8003056:	d9f5      	bls.n	8003044 <HAL_RCC_ClockConfig+0x1cc>
 8003058:	e745      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x6e>
 800305a:	bf00      	nop
 800305c:	58004000 	.word	0x58004000

08003060 <HAL_RCC_GetSysClockFreq>:
 8003060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8003064:	b508      	push	{r3, lr}
 8003066:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003068:	f013 030c 	ands.w	r3, r3, #12
 800306c:	d107      	bne.n	800307e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800306e:	f7ff fbb0 	bl	80027d2 <LL_RCC_MSI_GetRange>
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x90>)
 8003074:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003078:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800307c:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800307e:	2b04      	cmp	r3, #4
 8003080:	d033      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003082:	2b08      	cmp	r3, #8
 8003084:	d107      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003086:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8003088:	481a      	ldr	r0, [pc, #104]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800308a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003090:	bf08      	it	eq
 8003092:	4618      	moveq	r0, r3
 8003094:	e7f2      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003096:	68d3      	ldr	r3, [r2, #12]
 8003098:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800309c:	2b02      	cmp	r3, #2
 800309e:	d022      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x86>
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d118      	bne.n	80030d6 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80030a4:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 80030a6:	4813      	ldr	r0, [pc, #76]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80030a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ae:	bf18      	it	ne
 80030b0:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b6:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80030b8:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80030ba:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030bc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80030c0:	4358      	muls	r0, r3
 80030c2:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80030cc:	0f53      	lsrs	r3, r2, #29
 80030ce:	3301      	adds	r3, #1
 80030d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80030d4:	e7d2      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1c>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030d6:	f7ff fb7c 	bl	80027d2 <LL_RCC_MSI_GetRange>
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x90>)
 80030dc:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80030e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80030e4:	e7e5      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 80030e6:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80030e8:	e7e3      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 80030ea:	4802      	ldr	r0, [pc, #8]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80030ec:	e7c6      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1c>
 80030ee:	bf00      	nop
 80030f0:	08007118 	.word	0x08007118
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	01e84800 	.word	0x01e84800

080030fc <HAL_RCC_GetHCLKFreq>:
{
 80030fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030fe:	f7ff ffaf 	bl	8003060 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_RCC_GetHCLKFreq+0x1c>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003112:	fbb0 f0f3 	udiv	r0, r0, r3
 8003116:	bd08      	pop	{r3, pc}
 8003118:	08007158 	.word	0x08007158

0800311c <HAL_RCC_GetPCLK1Freq>:
{
 800311c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800311e:	f7ff ffed 	bl	80030fc <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	4a05      	ldr	r2, [pc, #20]	; (800313c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003132:	f003 031f 	and.w	r3, r3, #31
}
 8003136:	40d8      	lsrs	r0, r3
 8003138:	bd08      	pop	{r3, pc}
 800313a:	bf00      	nop
 800313c:	080071f8 	.word	0x080071f8

08003140 <HAL_RCC_GetPCLK2Freq>:
{
 8003140:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003142:	f7ff ffdb 	bl	80030fc <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	f003 031f 	and.w	r3, r3, #31
}
 800315a:	40d8      	lsrs	r0, r3
 800315c:	bd08      	pop	{r3, pc}
 800315e:	bf00      	nop
 8003160:	080071f8 	.word	0x080071f8

08003164 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 800316c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003170:	4770      	bx	lr

08003172 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003176:	0902      	lsrs	r2, r0, #4
 8003178:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800317c:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8003180:	0100      	lsls	r0, r0, #4
 8003182:	ea23 0302 	bic.w	r3, r3, r2
 8003186:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800318a:	4318      	orrs	r0, r3
 800318c:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
}
 8003190:	4770      	bx	lr

08003192 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800319c:	6013      	str	r3, [r2, #0]
}
 800319e:	4770      	bx	lr

080031a0 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a4:	6813      	ldr	r3, [r2, #0]
 80031a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	4770      	bx	lr

080031ae <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	6818      	ldr	r0, [r3, #0]
}
 80031b4:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80031b8:	4770      	bx	lr

080031ba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031bc:	6805      	ldr	r5, [r0, #0]
 80031be:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 80031c2:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031c4:	d043      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80031c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80031c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031cc:	d015      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031ce:	d802      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80031d0:	b1d3      	cbz	r3, 8003208 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2501      	movs	r5, #1
 80031d4:	e03b      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 80031d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031da:	d002      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80031dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e0:	d1f7      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80031e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80031e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031ec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031f0:	430b      	orrs	r3, r1
 80031f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80031f6:	2500      	movs	r5, #0
 80031f8:	e029      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80031fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fe:	68d3      	ldr	r3, [r2, #12]
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	60d3      	str	r3, [r2, #12]
 8003206:	e7ec      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003208:	f7ff ffca 	bl	80031a0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800320c:	f7fe ff8a 	bl	8002124 <HAL_GetTick>
 8003210:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003212:	f7ff ffcc 	bl	80031ae <LL_RCC_PLLSAI1_IsReady>
 8003216:	b9a0      	cbnz	r0, 8003242 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321c:	6861      	ldr	r1, [r4, #4]
 800321e:	6913      	ldr	r3, [r2, #16]
 8003220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003224:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003228:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800322a:	6913      	ldr	r3, [r2, #16]
 800322c:	68a1      	ldr	r1, [r4, #8]
 800322e:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8003232:	430b      	orrs	r3, r1
 8003234:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003236:	f7ff ffac 	bl	8003192 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323a:	f7fe ff73 	bl	8002124 <HAL_GetTick>
 800323e:	4605      	mov	r5, r0
 8003240:	e0cd      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003242:	f7fe ff6f 	bl	8002124 <HAL_GetTick>
 8003246:	1b40      	subs	r0, r0, r5
 8003248:	2802      	cmp	r0, #2
 800324a:	d9e2      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800324c:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	051a      	lsls	r2, r3, #20
 8003252:	d515      	bpl.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003254:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800325a:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 800325e:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8003262:	42bb      	cmp	r3, r7
 8003264:	d00c      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8003266:	f7ff fa83 	bl	8002770 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800326a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800326e:	2f00      	cmp	r7, #0
 8003270:	f040 80c0 	bne.w	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8003274:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	07df      	lsls	r7, r3, #31
 8003284:	d509      	bpl.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328a:	69a0      	ldr	r0, [r4, #24]
 800328c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003290:	f022 0203 	bic.w	r2, r2, #3
 8003294:	4302      	orrs	r2, r0
 8003296:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800329a:	079e      	lsls	r6, r3, #30
 800329c:	d509      	bpl.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800329e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a2:	69e0      	ldr	r0, [r4, #28]
 80032a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032ac:	4302      	orrs	r2, r0
 80032ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032b2:	06d8      	lsls	r0, r3, #27
 80032b4:	d50c      	bpl.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80032b8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80032bc:	0c31      	lsrs	r1, r6, #16
 80032be:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80032c2:	0409      	lsls	r1, r1, #16
 80032c4:	ea22 0201 	bic.w	r2, r2, r1
 80032c8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80032cc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032d0:	0699      	lsls	r1, r3, #26
 80032d2:	d50c      	bpl.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032d6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80032da:	0c31      	lsrs	r1, r6, #16
 80032dc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80032e0:	0409      	lsls	r1, r1, #16
 80032e2:	ea22 0201 	bic.w	r2, r2, r1
 80032e6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80032ea:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ee:	075a      	lsls	r2, r3, #29
 80032f0:	d502      	bpl.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f2:	6a20      	ldr	r0, [r4, #32]
 80032f4:	f7ff ff3d 	bl	8003172 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	071b      	lsls	r3, r3, #28
 80032fc:	d502      	bpl.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003300:	f7ff ff37 	bl	8003172 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	05df      	lsls	r7, r3, #23
 8003308:	d511      	bpl.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800330a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800330e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003310:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003314:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003318:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800331a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800331e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003322:	f040 808f 	bne.w	8003444 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003326:	68d3      	ldr	r3, [r2, #12]
 8003328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332c:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	059e      	lsls	r6, r3, #22
 8003332:	d51a      	bpl.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003334:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003336:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	d003      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003340:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8003344:	f040 80b6 	bne.w	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003348:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800334c:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003350:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003352:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003356:	bf08      	it	eq
 8003358:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800335c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8003360:	bf02      	ittt	eq
 8003362:	68d3      	ldreq	r3, [r2, #12]
 8003364:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8003368:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	0558      	lsls	r0, r3, #21
 800336e:	d511      	bpl.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003374:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003376:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800337a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800337e:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003380:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003388:	f040 80a2 	bne.w	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x316>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800338c:	68d3      	ldr	r3, [r2, #12]
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	04d1      	lsls	r1, r2, #19
 8003398:	d509      	bpl.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800339a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800339e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80033a0:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 80033a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033a8:	4303      	orrs	r3, r0
 80033aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80033ae:	0493      	lsls	r3, r2, #18
 80033b0:	d50d      	bpl.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80033b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80033b8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80033ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033be:	430b      	orrs	r3, r1
 80033c0:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80033c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80033c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6253      	str	r3, [r2, #36]	; 0x24
}
 80033ce:	4628      	mov	r0, r5
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d2:	f7fe fea7 	bl	8002124 <HAL_GetTick>
 80033d6:	1b40      	subs	r0, r0, r5
 80033d8:	2802      	cmp	r0, #2
 80033da:	f63f af37 	bhi.w	800324c <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033de:	f7ff fee6 	bl	80031ae <LL_RCC_PLLSAI1_IsReady>
 80033e2:	2801      	cmp	r0, #1
 80033e4:	d1f5      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ea:	6961      	ldr	r1, [r4, #20]
 80033ec:	6913      	ldr	r3, [r2, #16]
 80033ee:	430b      	orrs	r3, r1
 80033f0:	6113      	str	r3, [r2, #16]
 80033f2:	e6f6      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033f4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80033f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033fc:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003400:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003404:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003408:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800340c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800340e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003412:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8003414:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003418:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800341c:	07db      	lsls	r3, r3, #31
 800341e:	f57f af2f 	bpl.w	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8003422:	f7fe fe7f 	bl	8002124 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 800342a:	4606      	mov	r6, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 800342c:	f7ff fe9a 	bl	8003164 <LL_RCC_LSE_IsReady>
 8003430:	2801      	cmp	r0, #1
 8003432:	f43f af25 	beq.w	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc6>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fe fe75 	bl	8002124 <HAL_GetTick>
 800343a:	1b80      	subs	r0, r0, r6
 800343c:	42b8      	cmp	r0, r7
 800343e:	d9f5      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x272>
              ret = HAL_TIMEOUT;
 8003440:	2503      	movs	r5, #3
 8003442:	e71d      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003444:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003448:	f47f af71 	bne.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800344c:	f7ff fea8 	bl	80031a0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003450:	f7fe fe68 	bl	8002124 <HAL_GetTick>
 8003454:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003456:	f7ff feaa 	bl	80031ae <LL_RCC_PLLSAI1_IsReady>
 800345a:	b9a0      	cbnz	r0, 8003486 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800345c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003460:	6861      	ldr	r1, [r4, #4]
 8003462:	6913      	ldr	r3, [r2, #16]
 8003464:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003468:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800346c:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800346e:	6913      	ldr	r3, [r2, #16]
 8003470:	68e1      	ldr	r1, [r4, #12]
 8003472:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8003476:	430b      	orrs	r3, r1
 8003478:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800347a:	f7ff fe8a 	bl	8003192 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347e:	f7fe fe51 	bl	8002124 <HAL_GetTick>
 8003482:	4606      	mov	r6, r0
 8003484:	e00b      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003486:	f7fe fe4d 	bl	8002124 <HAL_GetTick>
 800348a:	1b80      	subs	r0, r0, r6
 800348c:	2802      	cmp	r0, #2
 800348e:	d9e2      	bls.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x29c>
              ret = HAL_TIMEOUT;
 8003490:	2503      	movs	r5, #3
 8003492:	e74c      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003494:	f7fe fe46 	bl	8002124 <HAL_GetTick>
 8003498:	1b80      	subs	r0, r0, r6
 800349a:	2802      	cmp	r0, #2
 800349c:	d8f8      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800349e:	f7ff fe86 	bl	80031ae <LL_RCC_PLLSAI1_IsReady>
 80034a2:	2801      	cmp	r0, #1
 80034a4:	d1f6      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034aa:	6961      	ldr	r1, [r4, #20]
 80034ac:	6913      	ldr	r3, [r2, #16]
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6113      	str	r3, [r2, #16]
 80034b2:	e73c      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80034b4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80034b8:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80034bc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80034c0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c4:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80034c8:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 80034cc:	4301      	orrs	r1, r0
 80034ce:	e740      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x198>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034d0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80034d4:	f47f af5e 	bne.w	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034d8:	f7ff fe62 	bl	80031a0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034dc:	f7fe fe22 	bl	8002124 <HAL_GetTick>
 80034e0:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034e2:	f7ff fe64 	bl	80031ae <LL_RCC_PLLSAI1_IsReady>
 80034e6:	b9a0      	cbnz	r0, 8003512 <HAL_RCCEx_PeriphCLKConfig+0x358>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ec:	6861      	ldr	r1, [r4, #4]
 80034ee:	6913      	ldr	r3, [r2, #16]
 80034f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80034f8:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80034fa:	6913      	ldr	r3, [r2, #16]
 80034fc:	6921      	ldr	r1, [r4, #16]
 80034fe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003502:	430b      	orrs	r3, r1
 8003504:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003506:	f7ff fe44 	bl	8003192 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350a:	f7fe fe0b 	bl	8002124 <HAL_GetTick>
 800350e:	4606      	mov	r6, r0
 8003510:	e00b      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x370>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003512:	f7fe fe07 	bl	8002124 <HAL_GetTick>
 8003516:	1b80      	subs	r0, r0, r6
 8003518:	2802      	cmp	r0, #2
 800351a:	d9e2      	bls.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x328>
              ret = HAL_TIMEOUT;
 800351c:	2503      	movs	r5, #3
 800351e:	e739      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003520:	f7fe fe00 	bl	8002124 <HAL_GetTick>
 8003524:	1b80      	subs	r0, r0, r6
 8003526:	2802      	cmp	r0, #2
 8003528:	d8f8      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x362>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800352a:	f7ff fe40 	bl	80031ae <LL_RCC_PLLSAI1_IsReady>
 800352e:	2801      	cmp	r0, #1
 8003530:	d1f6      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x366>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003536:	6961      	ldr	r1, [r4, #20]
 8003538:	6913      	ldr	r3, [r2, #16]
 800353a:	430b      	orrs	r3, r1
 800353c:	6113      	str	r3, [r2, #16]
 800353e:	e729      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1da>

08003540 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003540:	6802      	ldr	r2, [r0, #0]
{
 8003542:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003544:	68d3      	ldr	r3, [r2, #12]
 8003546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800354a:	60d3      	str	r3, [r2, #12]
{
 800354c:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800354e:	f7fe fde9 	bl	8002124 <HAL_GetTick>
 8003552:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	069b      	lsls	r3, r3, #26
 800355a:	d501      	bpl.n	8003560 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800355c:	2000      	movs	r0, #0
}
 800355e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003560:	f7fe fde0 	bl	8002124 <HAL_GetTick>
 8003564:	1b40      	subs	r0, r0, r5
 8003566:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800356a:	d9f3      	bls.n	8003554 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800356c:	2003      	movs	r0, #3
 800356e:	e7f6      	b.n	800355e <HAL_RTC_WaitForSynchro+0x1e>

08003570 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003570:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003572:	6803      	ldr	r3, [r0, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	0652      	lsls	r2, r2, #25
{
 8003578:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800357a:	d501      	bpl.n	8003580 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800357c:	2000      	movs	r0, #0
}
 800357e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003586:	f7fe fdcd 	bl	8002124 <HAL_GetTick>
 800358a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	065b      	lsls	r3, r3, #25
 8003592:	d4f3      	bmi.n	800357c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003594:	f7fe fdc6 	bl	8002124 <HAL_GetTick>
 8003598:	1b40      	subs	r0, r0, r5
 800359a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800359e:	d9f5      	bls.n	800358c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80035a0:	2003      	movs	r0, #3
 80035a2:	e7ec      	b.n	800357e <RTC_EnterInitMode+0xe>

080035a4 <HAL_RTC_Init>:
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80035a6:	4604      	mov	r4, r0
 80035a8:	b1d8      	cbz	r0, 80035e2 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80035aa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80035ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035b2:	b91b      	cbnz	r3, 80035bc <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 80035b4:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80035b8:	f7fd fede 	bl	8001378 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035bc:	2302      	movs	r3, #2
 80035be:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	22ca      	movs	r2, #202	; 0xca
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
 80035c8:	2253      	movs	r2, #83	; 0x53
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff ffcf 	bl	8003570 <RTC_EnterInitMode>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	4605      	mov	r5, r0
 80035d6:	b130      	cbz	r0, 80035e6 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035d8:	22ff      	movs	r2, #255	; 0xff
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035dc:	2304      	movs	r3, #4
 80035de:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 80035e2:	2501      	movs	r5, #1
 80035e4:	e038      	b.n	8003658 <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035e6:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035e8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035ea:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80035ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035f4:	6862      	ldr	r2, [r4, #4]
 80035f6:	6899      	ldr	r1, [r3, #8]
 80035f8:	4302      	orrs	r2, r0
 80035fa:	69a0      	ldr	r0, [r4, #24]
 80035fc:	4302      	orrs	r2, r0
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003602:	68e2      	ldr	r2, [r4, #12]
 8003604:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800360a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800360c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003610:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003618:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800361a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800361c:	f022 0203 	bic.w	r2, r2, #3
 8003620:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003622:	69e2      	ldr	r2, [r4, #28]
 8003624:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003626:	4302      	orrs	r2, r0
 8003628:	430a      	orrs	r2, r1
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	069b      	lsls	r3, r3, #26
 8003630:	d40c      	bmi.n	800364c <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003632:	4620      	mov	r0, r4
 8003634:	f7ff ff84 	bl	8003540 <HAL_RTC_WaitForSynchro>
 8003638:	b140      	cbz	r0, 800364c <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003640:	2304      	movs	r3, #4
 8003642:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8003646:	f884 5020 	strb.w	r5, [r4, #32]
 800364a:	e7ca      	b.n	80035e2 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	22ff      	movs	r2, #255	; 0xff
 8003650:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003652:	2301      	movs	r3, #1
 8003654:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8003658:	4628      	mov	r0, r5
 800365a:	bd38      	pop	{r3, r4, r5, pc}

0800365c <RTC_ByteToBcd2>:
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800365c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 800365e:	2809      	cmp	r0, #9
 8003660:	d803      	bhi.n	800366a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003662:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8003666:	b2c0      	uxtb	r0, r0
 8003668:	4770      	bx	lr
    Param -= 10U;
 800366a:	380a      	subs	r0, #10
    bcdhigh++;
 800366c:	3301      	adds	r3, #1
    Param -= 10U;
 800366e:	b2c0      	uxtb	r0, r0
 8003670:	e7f5      	b.n	800365e <RTC_ByteToBcd2+0x2>

08003672 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8003672:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003676:	2b01      	cmp	r3, #1
{
 8003678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800367c:	4606      	mov	r6, r0
 800367e:	460f      	mov	r7, r1
 8003680:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8003684:	d032      	beq.n	80036ec <HAL_RTC_SetTime+0x7a>
 8003686:	2301      	movs	r3, #1
 8003688:	6801      	ldr	r1, [r0, #0]
 800368a:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800368e:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 8003692:	7838      	ldrb	r0, [r7, #0]
 8003694:	787d      	ldrb	r5, [r7, #1]
 8003696:	78bc      	ldrb	r4, [r7, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003698:	688b      	ldr	r3, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 800369a:	bb52      	cbnz	r2, 80036f2 <HAL_RTC_SetTime+0x80>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800369c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 80036a0:	bf08      	it	eq
 80036a2:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80036a4:	f7ff ffda 	bl	800365c <RTC_ByteToBcd2>
 80036a8:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80036aa:	4628      	mov	r0, r5
 80036ac:	f7ff ffd6 	bl	800365c <RTC_ByteToBcd2>
 80036b0:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff ffd2 	bl	800365c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80036b8:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80036ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80036be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80036c2:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036c6:	23ca      	movs	r3, #202	; 0xca
 80036c8:	624b      	str	r3, [r1, #36]	; 0x24
 80036ca:	2353      	movs	r3, #83	; 0x53
 80036cc:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80036ce:	4630      	mov	r0, r6
 80036d0:	f7ff ff4e 	bl	8003570 <RTC_EnterInitMode>
 80036d4:	6833      	ldr	r3, [r6, #0]
 80036d6:	4605      	mov	r5, r0
 80036d8:	b1c0      	cbz	r0, 800370c <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036da:	22ff      	movs	r2, #255	; 0xff
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036de:	2304      	movs	r3, #4
 80036e0:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80036e4:	2300      	movs	r3, #0
 80036e6:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 80036ea:	2501      	movs	r5, #1
}
 80036ec:	4628      	mov	r0, r5
 80036ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036f2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80036f6:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 80036fa:	bf08      	it	eq
 80036fc:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80036fe:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003702:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003704:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003706:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800370a:	e7dc      	b.n	80036c6 <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800370c:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8003710:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003714:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800371c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800371e:	e9d7 2003 	ldrd	r2, r0, [r7, #12]
 8003722:	6899      	ldr	r1, [r3, #8]
 8003724:	4302      	orrs	r2, r0
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003730:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	069b      	lsls	r3, r3, #26
 8003736:	d40c      	bmi.n	8003752 <HAL_RTC_SetTime+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003738:	4630      	mov	r0, r6
 800373a:	f7ff ff01 	bl	8003540 <HAL_RTC_WaitForSynchro>
 800373e:	b140      	cbz	r0, 8003752 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003740:	6833      	ldr	r3, [r6, #0]
 8003742:	22ff      	movs	r2, #255	; 0xff
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003746:	2304      	movs	r3, #4
 8003748:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800374c:	f886 5020 	strb.w	r5, [r6, #32]
 8003750:	e7cb      	b.n	80036ea <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003752:	6833      	ldr	r3, [r6, #0]
 8003754:	22ff      	movs	r2, #255	; 0xff
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003758:	2301      	movs	r3, #1
 800375a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 800375e:	2300      	movs	r3, #0
 8003760:	f886 3020 	strb.w	r3, [r6, #32]
   return HAL_OK;
 8003764:	e7c2      	b.n	80036ec <HAL_RTC_SetTime+0x7a>

08003766 <HAL_RTC_SetDate>:
{
 8003766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8003768:	f890 3020 	ldrb.w	r3, [r0, #32]
 800376c:	2b01      	cmp	r3, #1
{
 800376e:	4606      	mov	r6, r0
 8003770:	f04f 0502 	mov.w	r5, #2
 __HAL_LOCK(hrtc);
 8003774:	d034      	beq.n	80037e0 <HAL_RTC_SetDate+0x7a>
 8003776:	2301      	movs	r3, #1
 8003778:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800377c:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 8003780:	780d      	ldrb	r5, [r1, #0]
 8003782:	78c8      	ldrb	r0, [r1, #3]
 8003784:	784c      	ldrb	r4, [r1, #1]
 8003786:	788f      	ldrb	r7, [r1, #2]
 8003788:	036d      	lsls	r5, r5, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800378a:	2a00      	cmp	r2, #0
 800378c:	d14d      	bne.n	800382a <HAL_RTC_SetDate+0xc4>
 800378e:	06e2      	lsls	r2, r4, #27
 8003790:	d503      	bpl.n	800379a <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003792:	f024 0410 	bic.w	r4, r4, #16
 8003796:	340a      	adds	r4, #10
 8003798:	704c      	strb	r4, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800379a:	f7ff ff5f 	bl	800365c <RTC_ByteToBcd2>
 800379e:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80037a0:	7848      	ldrb	r0, [r1, #1]
 80037a2:	f7ff ff5b 	bl	800365c <RTC_ByteToBcd2>
 80037a6:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80037a8:	4638      	mov	r0, r7
 80037aa:	f7ff ff57 	bl	800365c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037ae:	4328      	orrs	r0, r5
 80037b0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037b4:	6833      	ldr	r3, [r6, #0]
 80037b6:	22ca      	movs	r2, #202	; 0xca
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24
 80037ba:	2253      	movs	r2, #83	; 0x53
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037be:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80037c2:	4630      	mov	r0, r6
 80037c4:	f7ff fed4 	bl	8003570 <RTC_EnterInitMode>
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	4605      	mov	r5, r0
 80037cc:	b150      	cbz	r0, 80037e4 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037d2:	2304      	movs	r3, #4
 80037d4:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80037d8:	2300      	movs	r3, #0
 80037da:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 80037de:	2501      	movs	r5, #1
}
 80037e0:	4628      	mov	r0, r5
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80037e4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80037e8:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80037ec:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f4:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	069b      	lsls	r3, r3, #26
 80037fa:	d40c      	bmi.n	8003816 <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037fc:	4630      	mov	r0, r6
 80037fe:	f7ff fe9f 	bl	8003540 <HAL_RTC_WaitForSynchro>
 8003802:	b140      	cbz	r0, 8003816 <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003804:	6833      	ldr	r3, [r6, #0]
 8003806:	22ff      	movs	r2, #255	; 0xff
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800380a:	2304      	movs	r3, #4
 800380c:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8003810:	f886 5020 	strb.w	r5, [r6, #32]
 8003814:	e7e3      	b.n	80037de <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003816:	6833      	ldr	r3, [r6, #0]
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800381c:	2301      	movs	r3, #1
 800381e:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8003822:	2300      	movs	r3, #0
 8003824:	f886 3020 	strb.w	r3, [r6, #32]
    return HAL_OK;
 8003828:	e7da      	b.n	80037e0 <HAL_RTC_SetDate+0x7a>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800382a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800382e:	4338      	orrs	r0, r7
 8003830:	e7c0      	b.n	80037b4 <HAL_RTC_SetDate+0x4e>

08003832 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003832:	0903      	lsrs	r3, r0, #4
 8003834:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003838:	f000 000f 	and.w	r0, r0, #15
 800383c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8003840:	b2c0      	uxtb	r0, r0
 8003842:	4770      	bx	lr

08003844 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003844:	6803      	ldr	r3, [r0, #0]
 8003846:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003848:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800384a:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003852:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
{
 8003856:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003858:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800385c:	0c1d      	lsrs	r5, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800385e:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8003860:	f3c3 2606 	ubfx	r6, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003864:	f005 003f 	and.w	r0, r5, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003868:	b2dc      	uxtb	r4, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800386a:	f005 0540 	and.w	r5, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800386e:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8003870:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003872:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003874:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8003876:	b952      	cbnz	r2, 800388e <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003878:	f7ff ffdb 	bl	8003832 <RTC_Bcd2ToByte>
 800387c:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800387e:	4630      	mov	r0, r6
 8003880:	f7ff ffd7 	bl	8003832 <RTC_Bcd2ToByte>
 8003884:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff ffd3 	bl	8003832 <RTC_Bcd2ToByte>
 800388c:	7088      	strb	r0, [r1, #2]
}
 800388e:	2000      	movs	r0, #0
 8003890:	bd70      	pop	{r4, r5, r6, pc}

08003892 <HAL_RTC_GetDate>:
{
 8003892:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003894:	6803      	ldr	r3, [r0, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800389c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80038a0:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80038a2:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80038a6:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80038a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80038ac:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80038ae:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80038b0:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80038b2:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80038b4:	b952      	cbnz	r2, 80038cc <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80038b6:	f7ff ffbc 	bl	8003832 <RTC_Bcd2ToByte>
 80038ba:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80038bc:	4628      	mov	r0, r5
 80038be:	f7ff ffb8 	bl	8003832 <RTC_Bcd2ToByte>
 80038c2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7ff ffb4 	bl	8003832 <RTC_Bcd2ToByte>
 80038ca:	7088      	strb	r0, [r1, #2]
}
 80038cc:	2000      	movs	r0, #0
 80038ce:	bd38      	pop	{r3, r4, r5, pc}

080038d0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038d0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f04f 0302 	mov.w	r3, #2
 80038da:	d012      	beq.n	8003902 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038dc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038e0:	6803      	ldr	r3, [r0, #0]
 80038e2:	22ca      	movs	r2, #202	; 0xca
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24
 80038e6:	2253      	movs	r2, #83	; 0x53
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	f042 0220 	orr.w	r2, r2, #32
 80038f0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038f2:	22ff      	movs	r2, #255	; 0xff
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038fc:	2300      	movs	r3, #0
 80038fe:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 8003902:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003904:	4770      	bx	lr

08003906 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003908:	6803      	ldr	r3, [r0, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	4a06      	ldr	r2, [pc, #24]	; (8003930 <HAL_TIM_Base_Start_IT+0x28>)
 8003916:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	2a06      	cmp	r2, #6
 800391a:	d006      	beq.n	800392a <HAL_TIM_Base_Start_IT+0x22>
 800391c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8003920:	bf1e      	ittt	ne
 8003922:	681a      	ldrne	r2, [r3, #0]
 8003924:	f042 0201 	orrne.w	r2, r2, #1
 8003928:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800392a:	2000      	movs	r0, #0
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	00010007 	.word	0x00010007

08003934 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003936:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003938:	4290      	cmp	r0, r2
{
 800393a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	d002      	beq.n	8003944 <TIM_Base_SetConfig+0x10>
 800393e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003942:	d109      	bne.n	8003958 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003944:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394a:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800394c:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003950:	d009      	beq.n	8003966 <TIM_Base_SetConfig+0x32>
 8003952:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003956:	d006      	beq.n	8003966 <TIM_Base_SetConfig+0x32>
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <TIM_Base_SetConfig+0x70>)
 800395a:	4290      	cmp	r0, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x32>
 800395e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003962:	4290      	cmp	r0, r2
 8003964:	d103      	bne.n	800396e <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800396e:	694a      	ldr	r2, [r1, #20]
 8003970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003974:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003976:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	688b      	ldr	r3, [r1, #8]
 800397a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	680b      	ldr	r3, [r1, #0]
 800397e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <TIM_Base_SetConfig+0x6c>)
 8003982:	4298      	cmp	r0, r3
 8003984:	d007      	beq.n	8003996 <TIM_Base_SetConfig+0x62>
 8003986:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800398a:	4298      	cmp	r0, r3
 800398c:	d003      	beq.n	8003996 <TIM_Base_SetConfig+0x62>
 800398e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003992:	4298      	cmp	r0, r3
 8003994:	d101      	bne.n	800399a <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003996:	690b      	ldr	r3, [r1, #16]
 8003998:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800399a:	2301      	movs	r3, #1
 800399c:	6143      	str	r3, [r0, #20]
}
 800399e:	bd10      	pop	{r4, pc}
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40014400 	.word	0x40014400

080039a8 <HAL_TIM_Base_Init>:
{
 80039a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80039aa:	4604      	mov	r4, r0
 80039ac:	b1a0      	cbz	r0, 80039d8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039b6:	b91b      	cbnz	r3, 80039c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80039b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039bc:	f7ff ffa3 	bl	8003906 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	2302      	movs	r3, #2
 80039c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c6:	6820      	ldr	r0, [r4, #0]
 80039c8:	1d21      	adds	r1, r4, #4
 80039ca:	f7ff ffb3 	bl	8003934 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039d4:	2000      	movs	r0, #0
}
 80039d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039d8:	2001      	movs	r0, #1
 80039da:	e7fc      	b.n	80039d6 <HAL_TIM_Base_Init+0x2e>

080039dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039dc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80039ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ec:	6083      	str	r3, [r0, #8]
}
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80039f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
{
 80039f6:	b570      	push	{r4, r5, r6, lr}
 80039f8:	4604      	mov	r4, r0
 80039fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80039fe:	d017      	beq.n	8003a30 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003a04:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003a06:	2301      	movs	r3, #1
 8003a08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0e:	4b45      	ldr	r3, [pc, #276]	; (8003b24 <HAL_TIM_ConfigClockSource+0x134>)
 8003a10:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003a12:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a14:	680b      	ldr	r3, [r1, #0]
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d06b      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x102>
 8003a1a:	d817      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x5c>
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d00c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x4a>
 8003a20:	d807      	bhi.n	8003a32 <HAL_TIM_ConfigClockSource+0x42>
 8003a22:	b153      	cbz	r3, 8003a3a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003a26:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a2c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d001      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x4a>
 8003a36:	2b30      	cmp	r3, #48	; 0x30
 8003a38:	d1f4      	bne.n	8003a24 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8003a3a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a44:	f043 0307 	orr.w	r3, r3, #7
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	e01c      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003a4c:	2b60      	cmp	r3, #96	; 0x60
 8003a4e:	d036      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0xce>
 8003a50:	d81b      	bhi.n	8003a8a <HAL_TIM_ConfigClockSource+0x9a>
 8003a52:	2b50      	cmp	r3, #80	; 0x50
 8003a54:	d1e6      	bne.n	8003a24 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	684a      	ldr	r2, [r1, #4]
 8003a58:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a5a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5c:	6a05      	ldr	r5, [r0, #32]
 8003a5e:	f025 0501 	bic.w	r5, r5, #1
 8003a62:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a64:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a66:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a6e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a72:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003a74:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a76:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a78:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a82:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003a86:	6083      	str	r3, [r0, #8]
 8003a88:	e7cc      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8003a8a:	2b70      	cmp	r3, #112	; 0x70
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0xb8>
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a92:	d1c7      	bne.n	8003a24 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8003a94:	68cb      	ldr	r3, [r1, #12]
 8003a96:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a9a:	f7ff ff9f 	bl	80039dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6893      	ldr	r3, [r2, #8]
 8003aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa6:	e008      	b.n	8003aba <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 8003aa8:	68cb      	ldr	r3, [r1, #12]
 8003aaa:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003aae:	f7ff ff95 	bl	80039dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ab2:	6822      	ldr	r2, [r4, #0]
 8003ab4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ab6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aba:	6093      	str	r3, [r2, #8]
      break;
 8003abc:	e7b2      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003abe:	684d      	ldr	r5, [r1, #4]
 8003ac0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac2:	6a01      	ldr	r1, [r0, #32]
 8003ac4:	f021 0110 	bic.w	r1, r1, #16
 8003ac8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aca:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003acc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ace:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ada:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003ade:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ae0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ae2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ae4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aec:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003af0:	e7c9      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	684a      	ldr	r2, [r1, #4]
 8003af4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003af6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af8:	6a05      	ldr	r5, [r0, #32]
 8003afa:	f025 0501 	bic.w	r5, r5, #1
 8003afe:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b00:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b02:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b0a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003b0e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003b10:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b12:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003b14:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b16:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b1e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003b22:	e7b0      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x96>
 8003b24:	ffce0088 	.word	0xffce0088

08003b28 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b28:	6802      	ldr	r2, [r0, #0]
 8003b2a:	6813      	ldr	r3, [r2, #0]
 8003b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b30:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b32:	6893      	ldr	r3, [r2, #8]
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	2320      	movs	r3, #32
 8003b40:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_UART_Transmit_DMA>:
{
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	4604      	mov	r4, r0
 8003b50:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003b52:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8003b56:	2f20      	cmp	r7, #32
 8003b58:	d13a      	bne.n	8003bd0 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 8003b5a:	b361      	cbz	r1, 8003bb6 <HAL_UART_Transmit_DMA+0x6a>
 8003b5c:	b35a      	cbz	r2, 8003bb6 <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 8003b5e:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8003b62:	2a01      	cmp	r2, #1
 8003b64:	d034      	beq.n	8003bd0 <HAL_UART_Transmit_DMA+0x84>
    if (huart->hdmatx != NULL)
 8003b66:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 8003b68:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 8003b6c:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b70:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    __HAL_LOCK(huart);
 8003b76:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8003b7a:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003b7c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b80:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 8003b84:	b1c8      	cbz	r0, 8003bba <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b86:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8003bd4 <HAL_UART_Transmit_DMA+0x88>
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b90:	f8df c044 	ldr.w	ip, [pc, #68]	; 8003bd8 <HAL_UART_Transmit_DMA+0x8c>
 8003b94:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b98:	f8df c040 	ldr.w	ip, [pc, #64]	; 8003bdc <HAL_UART_Transmit_DMA+0x90>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003b9c:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8003b9e:	e9c0 c60d 	strd	ip, r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003ba2:	f7fe fc31 	bl	8002408 <HAL_DMA_Start_IT>
 8003ba6:	b140      	cbz	r0, 8003bba <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ba8:	2310      	movs	r3, #16
 8003baa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8003bae:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8003bb2:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	e009      	b.n	8003bce <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	2240      	movs	r2, #64	; 0x40
 8003bbe:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bc0:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8003bc2:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 8003bc8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bcc:	609a      	str	r2, [r3, #8]
}
 8003bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	e7fc      	b.n	8003bce <HAL_UART_Transmit_DMA+0x82>
 8003bd4:	08003be1 	.word	0x08003be1
 8003bd8:	08003c11 	.word	0x08003c11
 8003bdc:	08003c1d 	.word	0x08003c1d

08003be0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003be0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003be2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003be4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f013 0320 	ands.w	r3, r3, #32
 8003bec:	d10b      	bne.n	8003c06 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8003bee:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c02:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c04:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7fd f93e 	bl	8000e88 <HAL_UART_TxCpltCallback>
}
 8003c0c:	e7fa      	b.n	8003c04 <UART_DMATransmitCplt+0x24>

08003c0e <HAL_UART_TxHalfCpltCallback>:
 8003c0e:	4770      	bx	lr

08003c10 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c10:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003c12:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003c14:	f7ff fffb 	bl	8003c0e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c18:	bd08      	pop	{r3, pc}

08003c1a <HAL_UART_ErrorCallback>:
 8003c1a:	4770      	bx	lr

08003c1c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c1c:	6a81      	ldr	r1, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c1e:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c20:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c24:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 8003c28:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c2a:	689c      	ldr	r4, [r3, #8]
 8003c2c:	0624      	lsls	r4, r4, #24
 8003c2e:	d50f      	bpl.n	8003c50 <UART_DMAError+0x34>
 8003c30:	2a21      	cmp	r2, #33	; 0x21
 8003c32:	d10d      	bne.n	8003c50 <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c40:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003c48:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	065b      	lsls	r3, r3, #25
 8003c54:	d507      	bpl.n	8003c66 <UART_DMAError+0x4a>
 8003c56:	2822      	cmp	r0, #34	; 0x22
 8003c58:	d105      	bne.n	8003c66 <UART_DMAError+0x4a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003c60:	4608      	mov	r0, r1
 8003c62:	f7ff ff61 	bl	8003b28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003c6a:	f043 0310 	orr.w	r3, r3, #16
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c72:	4608      	mov	r0, r1
 8003c74:	f7ff ffd1 	bl	8003c1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c78:	bd10      	pop	{r4, pc}
	...

08003c7c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c7c:	6802      	ldr	r2, [r0, #0]
 8003c7e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c80:	6811      	ldr	r1, [r2, #0]
{
 8003c82:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8003c84:	f640 050f 	movw	r5, #2063	; 0x80f
 8003c88:	422b      	tst	r3, r5
{
 8003c8a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c8c:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c90:	069e      	lsls	r6, r3, #26
 8003c92:	f140 8083 	bpl.w	8003d9c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c96:	068d      	lsls	r5, r1, #26
 8003c98:	d401      	bmi.n	8003c9e <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c9a:	00c6      	lsls	r6, r0, #3
 8003c9c:	d57e      	bpl.n	8003d9c <HAL_UART_IRQHandler+0x120>
      if (huart->RxISR != NULL)
 8003c9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d075      	beq.n	8003d90 <HAL_UART_IRQHandler+0x114>
      huart->TxISR(huart);
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	e06d      	b.n	8003d84 <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ca8:	4e58      	ldr	r6, [pc, #352]	; (8003e0c <HAL_UART_IRQHandler+0x190>)
 8003caa:	4006      	ands	r6, r0
 8003cac:	d102      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x38>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cae:	4d58      	ldr	r5, [pc, #352]	; (8003e10 <HAL_UART_IRQHandler+0x194>)
 8003cb0:	4229      	tst	r1, r5
 8003cb2:	d073      	beq.n	8003d9c <HAL_UART_IRQHandler+0x120>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cb4:	07dd      	lsls	r5, r3, #31
 8003cb6:	d509      	bpl.n	8003ccc <HAL_UART_IRQHandler+0x50>
 8003cb8:	05cd      	lsls	r5, r1, #23
 8003cba:	d507      	bpl.n	8003ccc <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cbc:	2501      	movs	r5, #1
 8003cbe:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003cc4:	f045 0501 	orr.w	r5, r5, #1
 8003cc8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ccc:	079d      	lsls	r5, r3, #30
 8003cce:	d509      	bpl.n	8003ce4 <HAL_UART_IRQHandler+0x68>
 8003cd0:	07c5      	lsls	r5, r0, #31
 8003cd2:	d507      	bpl.n	8003ce4 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cd4:	2502      	movs	r5, #2
 8003cd6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cd8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003cdc:	f045 0504 	orr.w	r5, r5, #4
 8003ce0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce4:	075d      	lsls	r5, r3, #29
 8003ce6:	d509      	bpl.n	8003cfc <HAL_UART_IRQHandler+0x80>
 8003ce8:	07c5      	lsls	r5, r0, #31
 8003cea:	d507      	bpl.n	8003cfc <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cec:	2504      	movs	r5, #4
 8003cee:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cf0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003cf4:	f045 0502 	orr.w	r5, r5, #2
 8003cf8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cfc:	071d      	lsls	r5, r3, #28
 8003cfe:	d50a      	bpl.n	8003d16 <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d00:	068d      	lsls	r5, r1, #26
 8003d02:	d400      	bmi.n	8003d06 <HAL_UART_IRQHandler+0x8a>
 8003d04:	b13e      	cbz	r6, 8003d16 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d06:	2508      	movs	r5, #8
 8003d08:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d0a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003d0e:	f045 0508 	orr.w	r5, r5, #8
 8003d12:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d16:	051e      	lsls	r6, r3, #20
 8003d18:	d50a      	bpl.n	8003d30 <HAL_UART_IRQHandler+0xb4>
 8003d1a:	014d      	lsls	r5, r1, #5
 8003d1c:	d508      	bpl.n	8003d30 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003d22:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d24:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003d28:	f042 0220 	orr.w	r2, r2, #32
 8003d2c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d30:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003d34:	b362      	cbz	r2, 8003d90 <HAL_UART_IRQHandler+0x114>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d36:	069e      	lsls	r6, r3, #26
 8003d38:	d507      	bpl.n	8003d4a <HAL_UART_IRQHandler+0xce>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d3a:	068d      	lsls	r5, r1, #26
 8003d3c:	d401      	bmi.n	8003d42 <HAL_UART_IRQHandler+0xc6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d3e:	00c0      	lsls	r0, r0, #3
 8003d40:	d503      	bpl.n	8003d4a <HAL_UART_IRQHandler+0xce>
        if (huart->RxISR != NULL)
 8003d42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003d44:	b10b      	cbz	r3, 8003d4a <HAL_UART_IRQHandler+0xce>
          huart->RxISR(huart);
 8003d46:	4620      	mov	r0, r4
 8003d48:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d4a:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003d4c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8003d54:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d56:	d402      	bmi.n	8003d5e <HAL_UART_IRQHandler+0xe2>
 8003d58:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8003d5c:	d019      	beq.n	8003d92 <HAL_UART_IRQHandler+0x116>
        UART_EndRxTransfer(huart);
 8003d5e:	f7ff fee3 	bl	8003b28 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	0652      	lsls	r2, r2, #25
 8003d68:	d50f      	bpl.n	8003d8a <HAL_UART_IRQHandler+0x10e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003d6c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d72:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003d74:	b148      	cbz	r0, 8003d8a <HAL_UART_IRQHandler+0x10e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_UART_IRQHandler+0x198>)
 8003d78:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d7a:	f7fe fb87 	bl	800248c <HAL_DMA_Abort_IT>
 8003d7e:	b138      	cbz	r0, 8003d90 <HAL_UART_IRQHandler+0x114>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d80:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003d82:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8003d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d88:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff ff45 	bl	8003c1a <HAL_UART_ErrorCallback>
}
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003d92:	f7ff ff42 	bl	8003c1a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8003d9a:	e7f9      	b.n	8003d90 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d9c:	02de      	lsls	r6, r3, #11
 8003d9e:	d509      	bpl.n	8003db4 <HAL_UART_IRQHandler+0x138>
 8003da0:	0245      	lsls	r5, r0, #9
 8003da2:	d507      	bpl.n	8003db4 <HAL_UART_IRQHandler+0x138>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003da8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003daa:	6213      	str	r3, [r2, #32]
}
 8003dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003db0:	f000 bdcc 	b.w	800494c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003db4:	061e      	lsls	r6, r3, #24
 8003db6:	d505      	bpl.n	8003dc4 <HAL_UART_IRQHandler+0x148>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003db8:	060d      	lsls	r5, r1, #24
 8003dba:	d401      	bmi.n	8003dc0 <HAL_UART_IRQHandler+0x144>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003dbc:	0200      	lsls	r0, r0, #8
 8003dbe:	d501      	bpl.n	8003dc4 <HAL_UART_IRQHandler+0x148>
    if (huart->TxISR != NULL)
 8003dc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003dc2:	e76d      	b.n	8003ca0 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dc4:	065e      	lsls	r6, r3, #25
 8003dc6:	d50e      	bpl.n	8003de6 <HAL_UART_IRQHandler+0x16a>
 8003dc8:	064d      	lsls	r5, r1, #25
 8003dca:	d50c      	bpl.n	8003de6 <HAL_UART_IRQHandler+0x16a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd2:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6723      	str	r3, [r4, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7fd f852 	bl	8000e88 <HAL_UART_TxCpltCallback>
 8003de4:	e7d4      	b.n	8003d90 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003de6:	0218      	lsls	r0, r3, #8
 8003de8:	d506      	bpl.n	8003df8 <HAL_UART_IRQHandler+0x17c>
 8003dea:	004a      	lsls	r2, r1, #1
 8003dec:	d504      	bpl.n	8003df8 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003dee:	4620      	mov	r0, r4
}
 8003df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003df4:	f000 bdac 	b.w	8004950 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003df8:	01db      	lsls	r3, r3, #7
 8003dfa:	d5c9      	bpl.n	8003d90 <HAL_UART_IRQHandler+0x114>
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	dac7      	bge.n	8003d90 <HAL_UART_IRQHandler+0x114>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e00:	4620      	mov	r0, r4
}
 8003e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e06:	f000 bda2 	b.w	800494e <HAL_UARTEx_RxFifoFullCallback>
 8003e0a:	bf00      	nop
 8003e0c:	10000001 	.word	0x10000001
 8003e10:	04000120 	.word	0x04000120
 8003e14:	08003e19 	.word	0x08003e19

08003e18 <UART_DMAAbortOnError>:
{
 8003e18:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003e22:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8003e26:	f7ff fef8 	bl	8003c1a <HAL_UART_ErrorCallback>
}
 8003e2a:	bd08      	pop	{r3, pc}
 8003e2c:	0000      	movs	r0, r0
	...

08003e30 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e30:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e32:	69c1      	ldr	r1, [r0, #28]
 8003e34:	6882      	ldr	r2, [r0, #8]
{
 8003e36:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003e3a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e3c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e3e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e40:	4302      	orrs	r2, r0
 8003e42:	6960      	ldr	r0, [r4, #20]
 8003e44:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e46:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e48:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e4a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e4c:	48ac      	ldr	r0, [pc, #688]	; (8004100 <UART_SetConfig+0x2d0>)
 8003e4e:	4028      	ands	r0, r5
 8003e50:	4302      	orrs	r2, r0
 8003e52:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68e0      	ldr	r0, [r4, #12]
 8003e58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e5c:	4302      	orrs	r2, r0
 8003e5e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e60:	4aa8      	ldr	r2, [pc, #672]	; (8004104 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e62:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e64:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003e66:	bf1c      	itt	ne
 8003e68:	6a22      	ldrne	r2, [r4, #32]
 8003e6a:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8003e72:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003e76:	4302      	orrs	r2, r0
 8003e78:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e7e:	f022 020f 	bic.w	r2, r2, #15
 8003e82:	4302      	orrs	r2, r0
 8003e84:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e86:	4aa0      	ldr	r2, [pc, #640]	; (8004108 <UART_SetConfig+0x2d8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d11a      	bne.n	8003ec2 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e90:	4a9e      	ldr	r2, [pc, #632]	; (800410c <UART_SetConfig+0x2dc>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e9a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ea4:	f040 8334 	bne.w	8004510 <UART_SetConfig+0x6e0>
    switch (clocksource)
 8003ea8:	2b07      	cmp	r3, #7
 8003eaa:	f200 832e 	bhi.w	800450a <UART_SetConfig+0x6da>
 8003eae:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003eb2:	022a      	.short	0x022a
 8003eb4:	032c0251 	.word	0x032c0251
 8003eb8:	032c0298 	.word	0x032c0298
 8003ebc:	032c032c 	.word	0x032c032c
 8003ec0:	02b1      	.short	0x02b1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec2:	4a90      	ldr	r2, [pc, #576]	; (8004104 <UART_SetConfig+0x2d4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f040 83ef 	bne.w	80046a8 <UART_SetConfig+0x878>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eda:	f000 80ac 	beq.w	8004036 <UART_SetConfig+0x206>
 8003ede:	d80a      	bhi.n	8003ef6 <UART_SetConfig+0xc6>
 8003ee0:	b3c3      	cbz	r3, 8003f54 <UART_SetConfig+0x124>
        ret = HAL_ERROR;
 8003ee2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eea:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8003eee:	6723      	str	r3, [r4, #112]	; 0x70
}
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d065      	beq.n	8003fc8 <UART_SetConfig+0x198>
 8003efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f00:	d1ef      	bne.n	8003ee2 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f000 80e7 	beq.w	80040d6 <UART_SetConfig+0x2a6>
 8003f08:	2801      	cmp	r0, #1
 8003f0a:	f000 80e8 	beq.w	80040de <UART_SetConfig+0x2ae>
 8003f0e:	2802      	cmp	r0, #2
 8003f10:	f000 80e9 	beq.w	80040e6 <UART_SetConfig+0x2b6>
 8003f14:	2803      	cmp	r0, #3
 8003f16:	f000 80ea 	beq.w	80040ee <UART_SetConfig+0x2be>
 8003f1a:	2804      	cmp	r0, #4
 8003f1c:	f000 80eb 	beq.w	80040f6 <UART_SetConfig+0x2c6>
 8003f20:	2805      	cmp	r0, #5
 8003f22:	f000 810b 	beq.w	800413c <UART_SetConfig+0x30c>
 8003f26:	2806      	cmp	r0, #6
 8003f28:	f000 810c 	beq.w	8004144 <UART_SetConfig+0x314>
 8003f2c:	2807      	cmp	r0, #7
 8003f2e:	f000 810d 	beq.w	800414c <UART_SetConfig+0x31c>
 8003f32:	2808      	cmp	r0, #8
 8003f34:	f000 810e 	beq.w	8004154 <UART_SetConfig+0x324>
 8003f38:	2809      	cmp	r0, #9
 8003f3a:	f000 810f 	beq.w	800415c <UART_SetConfig+0x32c>
 8003f3e:	280a      	cmp	r0, #10
 8003f40:	f000 8110 	beq.w	8004164 <UART_SetConfig+0x334>
 8003f44:	280b      	cmp	r0, #11
 8003f46:	f04f 0108 	mov.w	r1, #8
 8003f4a:	bf14      	ite	ne
 8003f4c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8003f50:	2080      	moveq	r0, #128	; 0x80
 8003f52:	e058      	b.n	8004006 <UART_SetConfig+0x1d6>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f54:	f7ff f8e2 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 8003f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f5a:	b1fb      	cbz	r3, 8003f9c <UART_SetConfig+0x16c>
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d01f      	beq.n	8003fa0 <UART_SetConfig+0x170>
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d01f      	beq.n	8003fa4 <UART_SetConfig+0x174>
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d01f      	beq.n	8003fa8 <UART_SetConfig+0x178>
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d01f      	beq.n	8003fac <UART_SetConfig+0x17c>
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d01f      	beq.n	8003fb0 <UART_SetConfig+0x180>
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d01f      	beq.n	8003fb4 <UART_SetConfig+0x184>
 8003f74:	2b07      	cmp	r3, #7
 8003f76:	d01f      	beq.n	8003fb8 <UART_SetConfig+0x188>
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d01f      	beq.n	8003fbc <UART_SetConfig+0x18c>
 8003f7c:	2b09      	cmp	r3, #9
 8003f7e:	d01f      	beq.n	8003fc0 <UART_SetConfig+0x190>
 8003f80:	2b0a      	cmp	r3, #10
 8003f82:	d01f      	beq.n	8003fc4 <UART_SetConfig+0x194>
 8003f84:	2b0b      	cmp	r3, #11
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	f44f 7380 	moveq.w	r3, #256	; 0x100
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8e:	2100      	movs	r1, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f90:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d136      	bne.n	8004006 <UART_SetConfig+0x1d6>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	e7a3      	b.n	8003ee4 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e7f6      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e7f4      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	e7f2      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fa8:	2306      	movs	r3, #6
 8003faa:	e7f0      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fac:	2308      	movs	r3, #8
 8003fae:	e7ee      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fb0:	230a      	movs	r3, #10
 8003fb2:	e7ec      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fb4:	230c      	movs	r3, #12
 8003fb6:	e7ea      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	e7e8      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	e7e6      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fc0:	2340      	movs	r3, #64	; 0x40
 8003fc2:	e7e4      	b.n	8003f8e <UART_SetConfig+0x15e>
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	e7e2      	b.n	8003f8e <UART_SetConfig+0x15e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d06b      	beq.n	80040a4 <UART_SetConfig+0x274>
 8003fcc:	2801      	cmp	r0, #1
 8003fce:	d06c      	beq.n	80040aa <UART_SetConfig+0x27a>
 8003fd0:	2802      	cmp	r0, #2
 8003fd2:	d06d      	beq.n	80040b0 <UART_SetConfig+0x280>
 8003fd4:	2803      	cmp	r0, #3
 8003fd6:	f04f 0102 	mov.w	r1, #2
 8003fda:	d06c      	beq.n	80040b6 <UART_SetConfig+0x286>
 8003fdc:	2804      	cmp	r0, #4
 8003fde:	d06c      	beq.n	80040ba <UART_SetConfig+0x28a>
 8003fe0:	2805      	cmp	r0, #5
 8003fe2:	d06c      	beq.n	80040be <UART_SetConfig+0x28e>
 8003fe4:	2806      	cmp	r0, #6
 8003fe6:	d06c      	beq.n	80040c2 <UART_SetConfig+0x292>
 8003fe8:	2807      	cmp	r0, #7
 8003fea:	d06c      	beq.n	80040c6 <UART_SetConfig+0x296>
 8003fec:	2808      	cmp	r0, #8
 8003fee:	d06c      	beq.n	80040ca <UART_SetConfig+0x29a>
 8003ff0:	2809      	cmp	r0, #9
 8003ff2:	d06c      	beq.n	80040ce <UART_SetConfig+0x29e>
 8003ff4:	280a      	cmp	r0, #10
 8003ff6:	d06c      	beq.n	80040d2 <UART_SetConfig+0x2a2>
 8003ff8:	4b45      	ldr	r3, [pc, #276]	; (8004110 <UART_SetConfig+0x2e0>)
 8003ffa:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003ffe:	280b      	cmp	r0, #11
 8004000:	bf14      	ite	ne
 8004002:	4618      	movne	r0, r3
 8004004:	4610      	moveq	r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800400c:	4283      	cmp	r3, r0
 800400e:	f63f af68 	bhi.w	8003ee2 <UART_SetConfig+0xb2>
 8004012:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004016:	f63f af64 	bhi.w	8003ee2 <UART_SetConfig+0xb2>
        switch (clocksource)
 800401a:	2908      	cmp	r1, #8
 800401c:	f200 8170 	bhi.w	8004300 <UART_SetConfig+0x4d0>
 8004020:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004024:	016e00a4 	.word	0x016e00a4
 8004028:	016e00e0 	.word	0x016e00e0
 800402c:	016e011c 	.word	0x016e011c
 8004030:	016e016e 	.word	0x016e016e
 8004034:	0135      	.short	0x0135
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004036:	f7ff f813 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800403a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800403c:	b1e3      	cbz	r3, 8004078 <UART_SetConfig+0x248>
 800403e:	2b01      	cmp	r3, #1
 8004040:	d01c      	beq.n	800407c <UART_SetConfig+0x24c>
 8004042:	2b02      	cmp	r3, #2
 8004044:	d01c      	beq.n	8004080 <UART_SetConfig+0x250>
 8004046:	2b03      	cmp	r3, #3
 8004048:	d01c      	beq.n	8004084 <UART_SetConfig+0x254>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d01c      	beq.n	8004088 <UART_SetConfig+0x258>
 800404e:	2b05      	cmp	r3, #5
 8004050:	d01c      	beq.n	800408c <UART_SetConfig+0x25c>
 8004052:	2b06      	cmp	r3, #6
 8004054:	d01c      	beq.n	8004090 <UART_SetConfig+0x260>
 8004056:	2b07      	cmp	r3, #7
 8004058:	d01c      	beq.n	8004094 <UART_SetConfig+0x264>
 800405a:	2b08      	cmp	r3, #8
 800405c:	d01c      	beq.n	8004098 <UART_SetConfig+0x268>
 800405e:	2b09      	cmp	r3, #9
 8004060:	d01c      	beq.n	800409c <UART_SetConfig+0x26c>
 8004062:	2b0a      	cmp	r3, #10
 8004064:	d01c      	beq.n	80040a0 <UART_SetConfig+0x270>
 8004066:	2b0b      	cmp	r3, #11
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004070:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004074:	2104      	movs	r1, #4
 8004076:	e78d      	b.n	8003f94 <UART_SetConfig+0x164>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004078:	2301      	movs	r3, #1
 800407a:	e7f9      	b.n	8004070 <UART_SetConfig+0x240>
 800407c:	2302      	movs	r3, #2
 800407e:	e7f7      	b.n	8004070 <UART_SetConfig+0x240>
 8004080:	2304      	movs	r3, #4
 8004082:	e7f5      	b.n	8004070 <UART_SetConfig+0x240>
 8004084:	2306      	movs	r3, #6
 8004086:	e7f3      	b.n	8004070 <UART_SetConfig+0x240>
 8004088:	2308      	movs	r3, #8
 800408a:	e7f1      	b.n	8004070 <UART_SetConfig+0x240>
 800408c:	230a      	movs	r3, #10
 800408e:	e7ef      	b.n	8004070 <UART_SetConfig+0x240>
 8004090:	230c      	movs	r3, #12
 8004092:	e7ed      	b.n	8004070 <UART_SetConfig+0x240>
 8004094:	2310      	movs	r3, #16
 8004096:	e7eb      	b.n	8004070 <UART_SetConfig+0x240>
 8004098:	2320      	movs	r3, #32
 800409a:	e7e9      	b.n	8004070 <UART_SetConfig+0x240>
 800409c:	2340      	movs	r3, #64	; 0x40
 800409e:	e7e7      	b.n	8004070 <UART_SetConfig+0x240>
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	e7e5      	b.n	8004070 <UART_SetConfig+0x240>
 80040a4:	2102      	movs	r1, #2
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040a6:	481a      	ldr	r0, [pc, #104]	; (8004110 <UART_SetConfig+0x2e0>)
 80040a8:	e7ad      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040aa:	2102      	movs	r1, #2
 80040ac:	4819      	ldr	r0, [pc, #100]	; (8004114 <UART_SetConfig+0x2e4>)
 80040ae:	e7aa      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040b0:	4601      	mov	r1, r0
 80040b2:	4819      	ldr	r0, [pc, #100]	; (8004118 <UART_SetConfig+0x2e8>)
 80040b4:	e7a7      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040b6:	4819      	ldr	r0, [pc, #100]	; (800411c <UART_SetConfig+0x2ec>)
 80040b8:	e7a5      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040ba:	4819      	ldr	r0, [pc, #100]	; (8004120 <UART_SetConfig+0x2f0>)
 80040bc:	e7a3      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040be:	4819      	ldr	r0, [pc, #100]	; (8004124 <UART_SetConfig+0x2f4>)
 80040c0:	e7a1      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040c2:	4819      	ldr	r0, [pc, #100]	; (8004128 <UART_SetConfig+0x2f8>)
 80040c4:	e79f      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040c6:	4819      	ldr	r0, [pc, #100]	; (800412c <UART_SetConfig+0x2fc>)
 80040c8:	e79d      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040ca:	4819      	ldr	r0, [pc, #100]	; (8004130 <UART_SetConfig+0x300>)
 80040cc:	e79b      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040ce:	4819      	ldr	r0, [pc, #100]	; (8004134 <UART_SetConfig+0x304>)
 80040d0:	e799      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040d2:	4819      	ldr	r0, [pc, #100]	; (8004138 <UART_SetConfig+0x308>)
 80040d4:	e797      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040d6:	2108      	movs	r1, #8
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80040dc:	e793      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040de:	2108      	movs	r1, #8
 80040e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80040e4:	e78f      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040e6:	2108      	movs	r1, #8
 80040e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80040ec:	e78b      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040ee:	2108      	movs	r1, #8
 80040f0:	f241 5055 	movw	r0, #5461	; 0x1555
 80040f4:	e787      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040f6:	2108      	movs	r1, #8
 80040f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80040fc:	e783      	b.n	8004006 <UART_SetConfig+0x1d6>
 80040fe:	bf00      	nop
 8004100:	cfff69f3 	.word	0xcfff69f3
 8004104:	40008000 	.word	0x40008000
 8004108:	40013800 	.word	0x40013800
 800410c:	08007238 	.word	0x08007238
 8004110:	00f42400 	.word	0x00f42400
 8004114:	007a1200 	.word	0x007a1200
 8004118:	003d0900 	.word	0x003d0900
 800411c:	0028b0aa 	.word	0x0028b0aa
 8004120:	001e8480 	.word	0x001e8480
 8004124:	00186a00 	.word	0x00186a00
 8004128:	00145855 	.word	0x00145855
 800412c:	000f4240 	.word	0x000f4240
 8004130:	0007a120 	.word	0x0007a120
 8004134:	0003d090 	.word	0x0003d090
 8004138:	0001e848 	.word	0x0001e848
 800413c:	2108      	movs	r1, #8
 800413e:	f640 40cc 	movw	r0, #3276	; 0xccc
 8004142:	e760      	b.n	8004006 <UART_SetConfig+0x1d6>
 8004144:	2108      	movs	r1, #8
 8004146:	f640 20aa 	movw	r0, #2730	; 0xaaa
 800414a:	e75c      	b.n	8004006 <UART_SetConfig+0x1d6>
 800414c:	2108      	movs	r1, #8
 800414e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004152:	e758      	b.n	8004006 <UART_SetConfig+0x1d6>
 8004154:	4601      	mov	r1, r0
 8004156:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800415a:	e754      	b.n	8004006 <UART_SetConfig+0x1d6>
 800415c:	2108      	movs	r1, #8
 800415e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004162:	e750      	b.n	8004006 <UART_SetConfig+0x1d6>
 8004164:	2108      	movs	r1, #8
 8004166:	f44f 7080 	mov.w	r0, #256	; 0x100
 800416a:	e74c      	b.n	8004006 <UART_SetConfig+0x1d6>
            pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe ffd6 	bl	800311c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8089 	beq.w	800428a <UART_SetConfig+0x45a>
 8004178:	2b01      	cmp	r3, #1
 800417a:	d072      	beq.n	8004262 <UART_SetConfig+0x432>
 800417c:	2b02      	cmp	r3, #2
 800417e:	d072      	beq.n	8004266 <UART_SetConfig+0x436>
 8004180:	2b03      	cmp	r3, #3
 8004182:	d072      	beq.n	800426a <UART_SetConfig+0x43a>
 8004184:	2b04      	cmp	r3, #4
 8004186:	d072      	beq.n	800426e <UART_SetConfig+0x43e>
 8004188:	2b05      	cmp	r3, #5
 800418a:	d072      	beq.n	8004272 <UART_SetConfig+0x442>
 800418c:	2b06      	cmp	r3, #6
 800418e:	d072      	beq.n	8004276 <UART_SetConfig+0x446>
 8004190:	2b07      	cmp	r3, #7
 8004192:	d072      	beq.n	800427a <UART_SetConfig+0x44a>
 8004194:	2b08      	cmp	r3, #8
 8004196:	d072      	beq.n	800427e <UART_SetConfig+0x44e>
 8004198:	2b09      	cmp	r3, #9
 800419a:	d072      	beq.n	8004282 <UART_SetConfig+0x452>
 800419c:	2b0a      	cmp	r3, #10
 800419e:	d072      	beq.n	8004286 <UART_SetConfig+0x456>
 80041a0:	2b0b      	cmp	r3, #11
 80041a2:	d172      	bne.n	800428a <UART_SetConfig+0x45a>
 80041a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a8:	2300      	movs	r3, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	f7fc f838 	bl	8000220 <__aeabi_uldivmod>
 80041b0:	6865      	ldr	r5, [r4, #4]
 80041b2:	020f      	lsls	r7, r1, #8
 80041b4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80041b8:	0206      	lsls	r6, r0, #8
 80041ba:	0868      	lsrs	r0, r5, #1
 80041bc:	eb16 0b00 	adds.w	fp, r6, r0
 80041c0:	f147 0c00 	adc.w	ip, r7, #0
 80041c4:	462a      	mov	r2, r5
 80041c6:	2300      	movs	r3, #0
 80041c8:	4658      	mov	r0, fp
 80041ca:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041cc:	f7fc f828 	bl	8000220 <__aeabi_uldivmod>
            break;
 80041d0:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041d2:	4ba5      	ldr	r3, [pc, #660]	; (8004468 <UART_SetConfig+0x638>)
 80041d4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80041d8:	4299      	cmp	r1, r3
 80041da:	f63f ae82 	bhi.w	8003ee2 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	60d8      	str	r0, [r3, #12]
 80041e2:	e67f      	b.n	8003ee4 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d036      	beq.n	8004258 <UART_SetConfig+0x428>
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d016      	beq.n	800421c <UART_SetConfig+0x3ec>
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d016      	beq.n	8004220 <UART_SetConfig+0x3f0>
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d016      	beq.n	8004224 <UART_SetConfig+0x3f4>
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d01e      	beq.n	8004238 <UART_SetConfig+0x408>
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d01e      	beq.n	800423c <UART_SetConfig+0x40c>
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d01e      	beq.n	8004240 <UART_SetConfig+0x410>
 8004202:	2b07      	cmp	r3, #7
 8004204:	d020      	beq.n	8004248 <UART_SetConfig+0x418>
 8004206:	2b08      	cmp	r3, #8
 8004208:	d020      	beq.n	800424c <UART_SetConfig+0x41c>
 800420a:	2b09      	cmp	r3, #9
 800420c:	d020      	beq.n	8004250 <UART_SetConfig+0x420>
 800420e:	2b0a      	cmp	r3, #10
 8004210:	d020      	beq.n	8004254 <UART_SetConfig+0x424>
 8004212:	2b0b      	cmp	r3, #11
 8004214:	d120      	bne.n	8004258 <UART_SetConfig+0x428>
 8004216:	4e95      	ldr	r6, [pc, #596]	; (800446c <UART_SetConfig+0x63c>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004218:	2700      	movs	r7, #0
 800421a:	e006      	b.n	800422a <UART_SetConfig+0x3fa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800421c:	4e94      	ldr	r6, [pc, #592]	; (8004470 <UART_SetConfig+0x640>)
 800421e:	e7fb      	b.n	8004218 <UART_SetConfig+0x3e8>
 8004220:	4e94      	ldr	r6, [pc, #592]	; (8004474 <UART_SetConfig+0x644>)
 8004222:	e7f9      	b.n	8004218 <UART_SetConfig+0x3e8>
 8004224:	a78c      	add	r7, pc, #560	; (adr r7, 8004458 <UART_SetConfig+0x628>)
 8004226:	e9d7 6700 	ldrd	r6, r7, [r7]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800422a:	0855      	lsrs	r5, r2, #1
 800422c:	1970      	adds	r0, r6, r5
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	f147 0100 	adc.w	r1, r7, #0
 8004236:	e7c9      	b.n	80041cc <UART_SetConfig+0x39c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004238:	4e8f      	ldr	r6, [pc, #572]	; (8004478 <UART_SetConfig+0x648>)
 800423a:	e7ed      	b.n	8004218 <UART_SetConfig+0x3e8>
 800423c:	4e8f      	ldr	r6, [pc, #572]	; (800447c <UART_SetConfig+0x64c>)
 800423e:	e7eb      	b.n	8004218 <UART_SetConfig+0x3e8>
 8004240:	a787      	add	r7, pc, #540	; (adr r7, 8004460 <UART_SetConfig+0x630>)
 8004242:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004246:	e7f0      	b.n	800422a <UART_SetConfig+0x3fa>
 8004248:	4e8d      	ldr	r6, [pc, #564]	; (8004480 <UART_SetConfig+0x650>)
 800424a:	e7e5      	b.n	8004218 <UART_SetConfig+0x3e8>
 800424c:	4e8d      	ldr	r6, [pc, #564]	; (8004484 <UART_SetConfig+0x654>)
 800424e:	e7e3      	b.n	8004218 <UART_SetConfig+0x3e8>
 8004250:	4e8d      	ldr	r6, [pc, #564]	; (8004488 <UART_SetConfig+0x658>)
 8004252:	e7e1      	b.n	8004218 <UART_SetConfig+0x3e8>
 8004254:	4e8d      	ldr	r6, [pc, #564]	; (800448c <UART_SetConfig+0x65c>)
 8004256:	e7df      	b.n	8004218 <UART_SetConfig+0x3e8>
 8004258:	4e8d      	ldr	r6, [pc, #564]	; (8004490 <UART_SetConfig+0x660>)
 800425a:	e7dd      	b.n	8004218 <UART_SetConfig+0x3e8>
            pclk = HAL_RCC_GetSysClockFreq();
 800425c:	f7fe ff00 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8004260:	e786      	b.n	8004170 <UART_SetConfig+0x340>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004262:	2202      	movs	r2, #2
 8004264:	e7a0      	b.n	80041a8 <UART_SetConfig+0x378>
 8004266:	2204      	movs	r2, #4
 8004268:	e79e      	b.n	80041a8 <UART_SetConfig+0x378>
 800426a:	2206      	movs	r2, #6
 800426c:	e79c      	b.n	80041a8 <UART_SetConfig+0x378>
 800426e:	2208      	movs	r2, #8
 8004270:	e79a      	b.n	80041a8 <UART_SetConfig+0x378>
 8004272:	220a      	movs	r2, #10
 8004274:	e798      	b.n	80041a8 <UART_SetConfig+0x378>
 8004276:	220c      	movs	r2, #12
 8004278:	e796      	b.n	80041a8 <UART_SetConfig+0x378>
 800427a:	2210      	movs	r2, #16
 800427c:	e794      	b.n	80041a8 <UART_SetConfig+0x378>
 800427e:	2220      	movs	r2, #32
 8004280:	e792      	b.n	80041a8 <UART_SetConfig+0x378>
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	e790      	b.n	80041a8 <UART_SetConfig+0x378>
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	e78e      	b.n	80041a8 <UART_SetConfig+0x378>
 800428a:	2201      	movs	r2, #1
 800428c:	e78c      	b.n	80041a8 <UART_SetConfig+0x378>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800428e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004290:	b39b      	cbz	r3, 80042fa <UART_SetConfig+0x4ca>
 8004292:	2b01      	cmp	r3, #1
 8004294:	d016      	beq.n	80042c4 <UART_SetConfig+0x494>
 8004296:	2b02      	cmp	r3, #2
 8004298:	d017      	beq.n	80042ca <UART_SetConfig+0x49a>
 800429a:	2b03      	cmp	r3, #3
 800429c:	d018      	beq.n	80042d0 <UART_SetConfig+0x4a0>
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d018      	beq.n	80042d4 <UART_SetConfig+0x4a4>
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d019      	beq.n	80042da <UART_SetConfig+0x4aa>
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d019      	beq.n	80042de <UART_SetConfig+0x4ae>
 80042aa:	2b07      	cmp	r3, #7
 80042ac:	d019      	beq.n	80042e2 <UART_SetConfig+0x4b2>
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d01a      	beq.n	80042e8 <UART_SetConfig+0x4b8>
 80042b2:	2b09      	cmp	r3, #9
 80042b4:	d01b      	beq.n	80042ee <UART_SetConfig+0x4be>
 80042b6:	2b0a      	cmp	r3, #10
 80042b8:	d01c      	beq.n	80042f4 <UART_SetConfig+0x4c4>
 80042ba:	2b0b      	cmp	r3, #11
 80042bc:	d11d      	bne.n	80042fa <UART_SetConfig+0x4ca>
 80042be:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 80042c2:	e7a9      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042c4:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 80042c8:	e7a6      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042ca:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80042ce:	e7a3      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042d0:	4e70      	ldr	r6, [pc, #448]	; (8004494 <UART_SetConfig+0x664>)
 80042d2:	e7a1      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042d4:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80042d8:	e79e      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042da:	4e6f      	ldr	r6, [pc, #444]	; (8004498 <UART_SetConfig+0x668>)
 80042dc:	e79c      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042de:	4e6f      	ldr	r6, [pc, #444]	; (800449c <UART_SetConfig+0x66c>)
 80042e0:	e79a      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042e2:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 80042e6:	e797      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042e8:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80042ec:	e794      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042ee:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80042f2:	e791      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042f4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80042f8:	e78e      	b.n	8004218 <UART_SetConfig+0x3e8>
 80042fa:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80042fe:	e78b      	b.n	8004218 <UART_SetConfig+0x3e8>
            ret = HAL_ERROR;
 8004300:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004302:	2000      	movs	r0, #0
 8004304:	e765      	b.n	80041d2 <UART_SetConfig+0x3a2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004306:	f7fe ff1b 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800430a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800430c:	2900      	cmp	r1, #0
 800430e:	d06b      	beq.n	80043e8 <UART_SetConfig+0x5b8>
 8004310:	2901      	cmp	r1, #1
 8004312:	d06b      	beq.n	80043ec <UART_SetConfig+0x5bc>
 8004314:	2902      	cmp	r1, #2
 8004316:	d06b      	beq.n	80043f0 <UART_SetConfig+0x5c0>
 8004318:	2903      	cmp	r1, #3
 800431a:	d06b      	beq.n	80043f4 <UART_SetConfig+0x5c4>
 800431c:	2904      	cmp	r1, #4
 800431e:	d06b      	beq.n	80043f8 <UART_SetConfig+0x5c8>
 8004320:	2905      	cmp	r1, #5
 8004322:	d06b      	beq.n	80043fc <UART_SetConfig+0x5cc>
 8004324:	2906      	cmp	r1, #6
 8004326:	d06b      	beq.n	8004400 <UART_SetConfig+0x5d0>
 8004328:	2907      	cmp	r1, #7
 800432a:	d06b      	beq.n	8004404 <UART_SetConfig+0x5d4>
 800432c:	2908      	cmp	r1, #8
 800432e:	d06b      	beq.n	8004408 <UART_SetConfig+0x5d8>
 8004330:	2909      	cmp	r1, #9
 8004332:	d06b      	beq.n	800440c <UART_SetConfig+0x5dc>
 8004334:	290a      	cmp	r1, #10
 8004336:	d06b      	beq.n	8004410 <UART_SetConfig+0x5e0>
 8004338:	290b      	cmp	r1, #11
 800433a:	bf14      	ite	ne
 800433c:	2201      	movne	r2, #1
 800433e:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004342:	6861      	ldr	r1, [r4, #4]
 8004344:	fbb0 f2f2 	udiv	r2, r0, r2
 8004348:	084b      	lsrs	r3, r1, #1
 800434a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800434e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004352:	e01f      	b.n	8004394 <UART_SetConfig+0x564>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004354:	b378      	cbz	r0, 80043b6 <UART_SetConfig+0x586>
 8004356:	2801      	cmp	r0, #1
 8004358:	d02f      	beq.n	80043ba <UART_SetConfig+0x58a>
 800435a:	2802      	cmp	r0, #2
 800435c:	d02f      	beq.n	80043be <UART_SetConfig+0x58e>
 800435e:	2803      	cmp	r0, #3
 8004360:	d02f      	beq.n	80043c2 <UART_SetConfig+0x592>
 8004362:	2804      	cmp	r0, #4
 8004364:	d02f      	beq.n	80043c6 <UART_SetConfig+0x596>
 8004366:	2805      	cmp	r0, #5
 8004368:	d02f      	beq.n	80043ca <UART_SetConfig+0x59a>
 800436a:	2806      	cmp	r0, #6
 800436c:	d02f      	beq.n	80043ce <UART_SetConfig+0x59e>
 800436e:	2807      	cmp	r0, #7
 8004370:	d02f      	beq.n	80043d2 <UART_SetConfig+0x5a2>
 8004372:	2808      	cmp	r0, #8
 8004374:	d02f      	beq.n	80043d6 <UART_SetConfig+0x5a6>
 8004376:	2809      	cmp	r0, #9
 8004378:	d02f      	beq.n	80043da <UART_SetConfig+0x5aa>
 800437a:	280a      	cmp	r0, #10
 800437c:	d02f      	beq.n	80043de <UART_SetConfig+0x5ae>
 800437e:	4b43      	ldr	r3, [pc, #268]	; (800448c <UART_SetConfig+0x65c>)
 8004380:	4a47      	ldr	r2, [pc, #284]	; (80044a0 <UART_SetConfig+0x670>)
 8004382:	280b      	cmp	r0, #11
 8004384:	bf14      	ite	ne
 8004386:	4618      	movne	r0, r3
 8004388:	4610      	moveq	r0, r2
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004390:	fbb0 f3f3 	udiv	r3, r0, r3
 8004394:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004396:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004398:	f1a3 0010 	sub.w	r0, r3, #16
 800439c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80043a0:	4288      	cmp	r0, r1
 80043a2:	f63f ad9e 	bhi.w	8003ee2 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80043aa:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80043b0:	430b      	orrs	r3, r1
 80043b2:	60c3      	str	r3, [r0, #12]
 80043b4:	e596      	b.n	8003ee4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b6:	4835      	ldr	r0, [pc, #212]	; (800448c <UART_SetConfig+0x65c>)
 80043b8:	e7e7      	b.n	800438a <UART_SetConfig+0x55a>
 80043ba:	482c      	ldr	r0, [pc, #176]	; (800446c <UART_SetConfig+0x63c>)
 80043bc:	e7e5      	b.n	800438a <UART_SetConfig+0x55a>
 80043be:	4839      	ldr	r0, [pc, #228]	; (80044a4 <UART_SetConfig+0x674>)
 80043c0:	e7e3      	b.n	800438a <UART_SetConfig+0x55a>
 80043c2:	4839      	ldr	r0, [pc, #228]	; (80044a8 <UART_SetConfig+0x678>)
 80043c4:	e7e1      	b.n	800438a <UART_SetConfig+0x55a>
 80043c6:	4839      	ldr	r0, [pc, #228]	; (80044ac <UART_SetConfig+0x67c>)
 80043c8:	e7df      	b.n	800438a <UART_SetConfig+0x55a>
 80043ca:	4839      	ldr	r0, [pc, #228]	; (80044b0 <UART_SetConfig+0x680>)
 80043cc:	e7dd      	b.n	800438a <UART_SetConfig+0x55a>
 80043ce:	4839      	ldr	r0, [pc, #228]	; (80044b4 <UART_SetConfig+0x684>)
 80043d0:	e7db      	b.n	800438a <UART_SetConfig+0x55a>
 80043d2:	4839      	ldr	r0, [pc, #228]	; (80044b8 <UART_SetConfig+0x688>)
 80043d4:	e7d9      	b.n	800438a <UART_SetConfig+0x55a>
 80043d6:	4839      	ldr	r0, [pc, #228]	; (80044bc <UART_SetConfig+0x68c>)
 80043d8:	e7d7      	b.n	800438a <UART_SetConfig+0x55a>
 80043da:	4839      	ldr	r0, [pc, #228]	; (80044c0 <UART_SetConfig+0x690>)
 80043dc:	e7d5      	b.n	800438a <UART_SetConfig+0x55a>
 80043de:	4839      	ldr	r0, [pc, #228]	; (80044c4 <UART_SetConfig+0x694>)
 80043e0:	e7d3      	b.n	800438a <UART_SetConfig+0x55a>
        pclk = HAL_RCC_GetSysClockFreq();
 80043e2:	f7fe fe3d 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80043e6:	e790      	b.n	800430a <UART_SetConfig+0x4da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043e8:	2201      	movs	r2, #1
 80043ea:	e7aa      	b.n	8004342 <UART_SetConfig+0x512>
 80043ec:	2202      	movs	r2, #2
 80043ee:	e7a8      	b.n	8004342 <UART_SetConfig+0x512>
 80043f0:	2204      	movs	r2, #4
 80043f2:	e7a6      	b.n	8004342 <UART_SetConfig+0x512>
 80043f4:	2206      	movs	r2, #6
 80043f6:	e7a4      	b.n	8004342 <UART_SetConfig+0x512>
 80043f8:	2208      	movs	r2, #8
 80043fa:	e7a2      	b.n	8004342 <UART_SetConfig+0x512>
 80043fc:	220a      	movs	r2, #10
 80043fe:	e7a0      	b.n	8004342 <UART_SetConfig+0x512>
 8004400:	220c      	movs	r2, #12
 8004402:	e79e      	b.n	8004342 <UART_SetConfig+0x512>
 8004404:	2210      	movs	r2, #16
 8004406:	e79c      	b.n	8004342 <UART_SetConfig+0x512>
 8004408:	2220      	movs	r2, #32
 800440a:	e79a      	b.n	8004342 <UART_SetConfig+0x512>
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	e798      	b.n	8004342 <UART_SetConfig+0x512>
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	e796      	b.n	8004342 <UART_SetConfig+0x512>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004414:	2800      	cmp	r0, #0
 8004416:	d057      	beq.n	80044c8 <UART_SetConfig+0x698>
 8004418:	2801      	cmp	r0, #1
 800441a:	d058      	beq.n	80044ce <UART_SetConfig+0x69e>
 800441c:	2802      	cmp	r0, #2
 800441e:	d059      	beq.n	80044d4 <UART_SetConfig+0x6a4>
 8004420:	2803      	cmp	r0, #3
 8004422:	d05a      	beq.n	80044da <UART_SetConfig+0x6aa>
 8004424:	2804      	cmp	r0, #4
 8004426:	d05b      	beq.n	80044e0 <UART_SetConfig+0x6b0>
 8004428:	2805      	cmp	r0, #5
 800442a:	d05c      	beq.n	80044e6 <UART_SetConfig+0x6b6>
 800442c:	2806      	cmp	r0, #6
 800442e:	d05d      	beq.n	80044ec <UART_SetConfig+0x6bc>
 8004430:	2807      	cmp	r0, #7
 8004432:	d05e      	beq.n	80044f2 <UART_SetConfig+0x6c2>
 8004434:	2808      	cmp	r0, #8
 8004436:	d05f      	beq.n	80044f8 <UART_SetConfig+0x6c8>
 8004438:	2809      	cmp	r0, #9
 800443a:	d060      	beq.n	80044fe <UART_SetConfig+0x6ce>
 800443c:	280a      	cmp	r0, #10
 800443e:	d061      	beq.n	8004504 <UART_SetConfig+0x6d4>
 8004440:	280b      	cmp	r0, #11
 8004442:	bf14      	ite	ne
 8004444:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8004448:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800444c:	6860      	ldr	r0, [r4, #4]
 800444e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004452:	fbb3 f3f0 	udiv	r3, r3, r0
 8004456:	e79d      	b.n	8004394 <UART_SetConfig+0x564>
 8004458:	28b0aa00 	.word	0x28b0aa00
 800445c:	00000000 	.word	0x00000000
 8004460:	14585500 	.word	0x14585500
 8004464:	00000000 	.word	0x00000000
 8004468:	000ffcff 	.word	0x000ffcff
 800446c:	00f42400 	.word	0x00f42400
 8004470:	7a120000 	.word	0x7a120000
 8004474:	3d090000 	.word	0x3d090000
 8004478:	1e848000 	.word	0x1e848000
 800447c:	186a0000 	.word	0x186a0000
 8004480:	0f424000 	.word	0x0f424000
 8004484:	07a12000 	.word	0x07a12000
 8004488:	03d09000 	.word	0x03d09000
 800448c:	01e84800 	.word	0x01e84800
 8004490:	f4240000 	.word	0xf4240000
 8004494:	00155500 	.word	0x00155500
 8004498:	000ccc00 	.word	0x000ccc00
 800449c:	000aaa00 	.word	0x000aaa00
 80044a0:	0001e848 	.word	0x0001e848
 80044a4:	007a1200 	.word	0x007a1200
 80044a8:	00516154 	.word	0x00516154
 80044ac:	003d0900 	.word	0x003d0900
 80044b0:	0030d400 	.word	0x0030d400
 80044b4:	0028b0aa 	.word	0x0028b0aa
 80044b8:	001e8480 	.word	0x001e8480
 80044bc:	000f4240 	.word	0x000f4240
 80044c0:	0007a120 	.word	0x0007a120
 80044c4:	0003d090 	.word	0x0003d090
 80044c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044cc:	e7be      	b.n	800444c <UART_SetConfig+0x61c>
 80044ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d2:	e7bb      	b.n	800444c <UART_SetConfig+0x61c>
 80044d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d8:	e7b8      	b.n	800444c <UART_SetConfig+0x61c>
 80044da:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80044de:	e7b5      	b.n	800444c <UART_SetConfig+0x61c>
 80044e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044e4:	e7b2      	b.n	800444c <UART_SetConfig+0x61c>
 80044e6:	f641 1398 	movw	r3, #6552	; 0x1998
 80044ea:	e7af      	b.n	800444c <UART_SetConfig+0x61c>
 80044ec:	f241 5354 	movw	r3, #5460	; 0x1554
 80044f0:	e7ac      	b.n	800444c <UART_SetConfig+0x61c>
 80044f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f6:	e7a9      	b.n	800444c <UART_SetConfig+0x61c>
 80044f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044fc:	e7a6      	b.n	800444c <UART_SetConfig+0x61c>
 80044fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004502:	e7a3      	b.n	800444c <UART_SetConfig+0x61c>
 8004504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004508:	e7a0      	b.n	800444c <UART_SetConfig+0x61c>
        ret = HAL_ERROR;
 800450a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800450c:	2300      	movs	r3, #0
 800450e:	e743      	b.n	8004398 <UART_SetConfig+0x568>
    switch (clocksource)
 8004510:	2b07      	cmp	r3, #7
 8004512:	f200 80cd 	bhi.w	80046b0 <UART_SetConfig+0x880>
 8004516:	e8df f003 	tbb	[pc, r3]
 800451a:	2a04      	.short	0x2a04
 800451c:	cbcb6dcb 	.word	0xcbcb6dcb
 8004520:	86cb      	.short	0x86cb
        pclk = HAL_RCC_GetPCLK2Freq();
 8004522:	f7fe fe0d 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d066      	beq.n	80045fa <UART_SetConfig+0x7ca>
 800452c:	2b01      	cmp	r3, #1
 800452e:	d066      	beq.n	80045fe <UART_SetConfig+0x7ce>
 8004530:	2b02      	cmp	r3, #2
 8004532:	d066      	beq.n	8004602 <UART_SetConfig+0x7d2>
 8004534:	2b03      	cmp	r3, #3
 8004536:	d066      	beq.n	8004606 <UART_SetConfig+0x7d6>
 8004538:	2b04      	cmp	r3, #4
 800453a:	d066      	beq.n	800460a <UART_SetConfig+0x7da>
 800453c:	2b05      	cmp	r3, #5
 800453e:	d066      	beq.n	800460e <UART_SetConfig+0x7de>
 8004540:	2b06      	cmp	r3, #6
 8004542:	d066      	beq.n	8004612 <UART_SetConfig+0x7e2>
 8004544:	2b07      	cmp	r3, #7
 8004546:	d066      	beq.n	8004616 <UART_SetConfig+0x7e6>
 8004548:	2b08      	cmp	r3, #8
 800454a:	d066      	beq.n	800461a <UART_SetConfig+0x7ea>
 800454c:	2b09      	cmp	r3, #9
 800454e:	d066      	beq.n	800461e <UART_SetConfig+0x7ee>
 8004550:	2b0a      	cmp	r3, #10
 8004552:	d066      	beq.n	8004622 <UART_SetConfig+0x7f2>
 8004554:	2b0b      	cmp	r3, #11
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800455e:	6862      	ldr	r2, [r4, #4]
 8004560:	fbb0 f3f3 	udiv	r3, r0, r3
 8004564:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004568:	fbb3 f3f2 	udiv	r3, r3, r2
 800456c:	e020      	b.n	80045b0 <UART_SetConfig+0x780>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456e:	b358      	cbz	r0, 80045c8 <UART_SetConfig+0x798>
 8004570:	2801      	cmp	r0, #1
 8004572:	d02b      	beq.n	80045cc <UART_SetConfig+0x79c>
 8004574:	2802      	cmp	r0, #2
 8004576:	d02b      	beq.n	80045d0 <UART_SetConfig+0x7a0>
 8004578:	2803      	cmp	r0, #3
 800457a:	d02b      	beq.n	80045d4 <UART_SetConfig+0x7a4>
 800457c:	2804      	cmp	r0, #4
 800457e:	d02b      	beq.n	80045d8 <UART_SetConfig+0x7a8>
 8004580:	2805      	cmp	r0, #5
 8004582:	d02b      	beq.n	80045dc <UART_SetConfig+0x7ac>
 8004584:	2806      	cmp	r0, #6
 8004586:	d02b      	beq.n	80045e0 <UART_SetConfig+0x7b0>
 8004588:	2807      	cmp	r0, #7
 800458a:	d02b      	beq.n	80045e4 <UART_SetConfig+0x7b4>
 800458c:	2808      	cmp	r0, #8
 800458e:	d02b      	beq.n	80045e8 <UART_SetConfig+0x7b8>
 8004590:	2809      	cmp	r0, #9
 8004592:	d02b      	beq.n	80045ec <UART_SetConfig+0x7bc>
 8004594:	280a      	cmp	r0, #10
 8004596:	d02b      	beq.n	80045f0 <UART_SetConfig+0x7c0>
 8004598:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <UART_SetConfig+0x888>)
 800459a:	f24f 4224 	movw	r2, #62500	; 0xf424
 800459e:	280b      	cmp	r0, #11
 80045a0:	bf14      	ite	ne
 80045a2:	4618      	movne	r0, r3
 80045a4:	4610      	moveq	r0, r2
 80045a6:	6863      	ldr	r3, [r4, #4]
 80045a8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80045ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b4:	f1a3 0010 	sub.w	r0, r3, #16
 80045b8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80045bc:	4288      	cmp	r0, r1
 80045be:	f63f ac90 	bhi.w	8003ee2 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	60cb      	str	r3, [r1, #12]
 80045c6:	e48d      	b.n	8003ee4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c8:	483b      	ldr	r0, [pc, #236]	; (80046b8 <UART_SetConfig+0x888>)
 80045ca:	e7ec      	b.n	80045a6 <UART_SetConfig+0x776>
 80045cc:	483b      	ldr	r0, [pc, #236]	; (80046bc <UART_SetConfig+0x88c>)
 80045ce:	e7ea      	b.n	80045a6 <UART_SetConfig+0x776>
 80045d0:	483b      	ldr	r0, [pc, #236]	; (80046c0 <UART_SetConfig+0x890>)
 80045d2:	e7e8      	b.n	80045a6 <UART_SetConfig+0x776>
 80045d4:	483b      	ldr	r0, [pc, #236]	; (80046c4 <UART_SetConfig+0x894>)
 80045d6:	e7e6      	b.n	80045a6 <UART_SetConfig+0x776>
 80045d8:	483b      	ldr	r0, [pc, #236]	; (80046c8 <UART_SetConfig+0x898>)
 80045da:	e7e4      	b.n	80045a6 <UART_SetConfig+0x776>
 80045dc:	483b      	ldr	r0, [pc, #236]	; (80046cc <UART_SetConfig+0x89c>)
 80045de:	e7e2      	b.n	80045a6 <UART_SetConfig+0x776>
 80045e0:	483b      	ldr	r0, [pc, #236]	; (80046d0 <UART_SetConfig+0x8a0>)
 80045e2:	e7e0      	b.n	80045a6 <UART_SetConfig+0x776>
 80045e4:	483b      	ldr	r0, [pc, #236]	; (80046d4 <UART_SetConfig+0x8a4>)
 80045e6:	e7de      	b.n	80045a6 <UART_SetConfig+0x776>
 80045e8:	483b      	ldr	r0, [pc, #236]	; (80046d8 <UART_SetConfig+0x8a8>)
 80045ea:	e7dc      	b.n	80045a6 <UART_SetConfig+0x776>
 80045ec:	483b      	ldr	r0, [pc, #236]	; (80046dc <UART_SetConfig+0x8ac>)
 80045ee:	e7da      	b.n	80045a6 <UART_SetConfig+0x776>
 80045f0:	483b      	ldr	r0, [pc, #236]	; (80046e0 <UART_SetConfig+0x8b0>)
 80045f2:	e7d8      	b.n	80045a6 <UART_SetConfig+0x776>
        pclk = HAL_RCC_GetSysClockFreq();
 80045f4:	f7fe fd34 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80045f8:	e795      	b.n	8004526 <UART_SetConfig+0x6f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045fa:	2301      	movs	r3, #1
 80045fc:	e7af      	b.n	800455e <UART_SetConfig+0x72e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e7ad      	b.n	800455e <UART_SetConfig+0x72e>
 8004602:	2304      	movs	r3, #4
 8004604:	e7ab      	b.n	800455e <UART_SetConfig+0x72e>
 8004606:	2306      	movs	r3, #6
 8004608:	e7a9      	b.n	800455e <UART_SetConfig+0x72e>
 800460a:	2308      	movs	r3, #8
 800460c:	e7a7      	b.n	800455e <UART_SetConfig+0x72e>
 800460e:	230a      	movs	r3, #10
 8004610:	e7a5      	b.n	800455e <UART_SetConfig+0x72e>
 8004612:	230c      	movs	r3, #12
 8004614:	e7a3      	b.n	800455e <UART_SetConfig+0x72e>
 8004616:	2310      	movs	r3, #16
 8004618:	e7a1      	b.n	800455e <UART_SetConfig+0x72e>
 800461a:	2320      	movs	r3, #32
 800461c:	e79f      	b.n	800455e <UART_SetConfig+0x72e>
 800461e:	2340      	movs	r3, #64	; 0x40
 8004620:	e79d      	b.n	800455e <UART_SetConfig+0x72e>
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	e79b      	b.n	800455e <UART_SetConfig+0x72e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004626:	b1f0      	cbz	r0, 8004666 <UART_SetConfig+0x836>
 8004628:	2801      	cmp	r0, #1
 800462a:	d01f      	beq.n	800466c <UART_SetConfig+0x83c>
 800462c:	2802      	cmp	r0, #2
 800462e:	d020      	beq.n	8004672 <UART_SetConfig+0x842>
 8004630:	2803      	cmp	r0, #3
 8004632:	d021      	beq.n	8004678 <UART_SetConfig+0x848>
 8004634:	2804      	cmp	r0, #4
 8004636:	d022      	beq.n	800467e <UART_SetConfig+0x84e>
 8004638:	2805      	cmp	r0, #5
 800463a:	d023      	beq.n	8004684 <UART_SetConfig+0x854>
 800463c:	2806      	cmp	r0, #6
 800463e:	d024      	beq.n	800468a <UART_SetConfig+0x85a>
 8004640:	2807      	cmp	r0, #7
 8004642:	d025      	beq.n	8004690 <UART_SetConfig+0x860>
 8004644:	2808      	cmp	r0, #8
 8004646:	d026      	beq.n	8004696 <UART_SetConfig+0x866>
 8004648:	2809      	cmp	r0, #9
 800464a:	d027      	beq.n	800469c <UART_SetConfig+0x86c>
 800464c:	280a      	cmp	r0, #10
 800464e:	d028      	beq.n	80046a2 <UART_SetConfig+0x872>
 8004650:	280b      	cmp	r0, #11
 8004652:	bf14      	ite	ne
 8004654:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8004658:	2380      	moveq	r3, #128	; 0x80
 800465a:	6860      	ldr	r0, [r4, #4]
 800465c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004660:	fbb3 f3f0 	udiv	r3, r3, r0
 8004664:	e7a4      	b.n	80045b0 <UART_SetConfig+0x780>
 8004666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466a:	e7f6      	b.n	800465a <UART_SetConfig+0x82a>
 800466c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004670:	e7f3      	b.n	800465a <UART_SetConfig+0x82a>
 8004672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004676:	e7f0      	b.n	800465a <UART_SetConfig+0x82a>
 8004678:	f241 5355 	movw	r3, #5461	; 0x1555
 800467c:	e7ed      	b.n	800465a <UART_SetConfig+0x82a>
 800467e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004682:	e7ea      	b.n	800465a <UART_SetConfig+0x82a>
 8004684:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004688:	e7e7      	b.n	800465a <UART_SetConfig+0x82a>
 800468a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800468e:	e7e4      	b.n	800465a <UART_SetConfig+0x82a>
 8004690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004694:	e7e1      	b.n	800465a <UART_SetConfig+0x82a>
 8004696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469a:	e7de      	b.n	800465a <UART_SetConfig+0x82a>
 800469c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a0:	e7db      	b.n	800465a <UART_SetConfig+0x82a>
 80046a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046a6:	e7d8      	b.n	800465a <UART_SetConfig+0x82a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80046ac:	f43f af2d 	beq.w	800450a <UART_SetConfig+0x6da>
        ret = HAL_ERROR;
 80046b0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e77e      	b.n	80045b4 <UART_SetConfig+0x784>
 80046b6:	bf00      	nop
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	007a1200 	.word	0x007a1200
 80046c0:	003d0900 	.word	0x003d0900
 80046c4:	0028b0aa 	.word	0x0028b0aa
 80046c8:	001e8480 	.word	0x001e8480
 80046cc:	00186a00 	.word	0x00186a00
 80046d0:	00145855 	.word	0x00145855
 80046d4:	000f4240 	.word	0x000f4240
 80046d8:	0007a120 	.word	0x0007a120
 80046dc:	0003d090 	.word	0x0003d090
 80046e0:	0001e848 	.word	0x0001e848

080046e4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80046e6:	07da      	lsls	r2, r3, #31
{
 80046e8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ea:	d506      	bpl.n	80046fa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ec:	6801      	ldr	r1, [r0, #0]
 80046ee:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80046f0:	684a      	ldr	r2, [r1, #4]
 80046f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046f6:	4322      	orrs	r2, r4
 80046f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046fa:	079c      	lsls	r4, r3, #30
 80046fc:	d506      	bpl.n	800470c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fe:	6801      	ldr	r1, [r0, #0]
 8004700:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004702:	684a      	ldr	r2, [r1, #4]
 8004704:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004708:	4322      	orrs	r2, r4
 800470a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800470c:	0759      	lsls	r1, r3, #29
 800470e:	d506      	bpl.n	800471e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004710:	6801      	ldr	r1, [r0, #0]
 8004712:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004714:	684a      	ldr	r2, [r1, #4]
 8004716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800471a:	4322      	orrs	r2, r4
 800471c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800471e:	071a      	lsls	r2, r3, #28
 8004720:	d506      	bpl.n	8004730 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004722:	6801      	ldr	r1, [r0, #0]
 8004724:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004726:	684a      	ldr	r2, [r1, #4]
 8004728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800472c:	4322      	orrs	r2, r4
 800472e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004730:	06dc      	lsls	r4, r3, #27
 8004732:	d506      	bpl.n	8004742 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004734:	6801      	ldr	r1, [r0, #0]
 8004736:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004738:	688a      	ldr	r2, [r1, #8]
 800473a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473e:	4322      	orrs	r2, r4
 8004740:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004742:	0699      	lsls	r1, r3, #26
 8004744:	d506      	bpl.n	8004754 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004746:	6801      	ldr	r1, [r0, #0]
 8004748:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800474a:	688a      	ldr	r2, [r1, #8]
 800474c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004750:	4322      	orrs	r2, r4
 8004752:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004754:	065a      	lsls	r2, r3, #25
 8004756:	d50f      	bpl.n	8004778 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004758:	6801      	ldr	r1, [r0, #0]
 800475a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800475c:	684a      	ldr	r2, [r1, #4]
 800475e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004762:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004764:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004768:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476a:	d105      	bne.n	8004778 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800476c:	684a      	ldr	r2, [r1, #4]
 800476e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004770:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004774:	4322      	orrs	r2, r4
 8004776:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	d506      	bpl.n	800478a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800477c:	6802      	ldr	r2, [r0, #0]
 800477e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004780:	6853      	ldr	r3, [r2, #4]
 8004782:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004786:	430b      	orrs	r3, r1
 8004788:	6053      	str	r3, [r2, #4]
}
 800478a:	bd10      	pop	{r4, pc}

0800478c <UART_WaitOnFlagUntilTimeout>:
{
 800478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004790:	9d06      	ldr	r5, [sp, #24]
 8004792:	4604      	mov	r4, r0
 8004794:	460f      	mov	r7, r1
 8004796:	4616      	mov	r6, r2
 8004798:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479a:	6821      	ldr	r1, [r4, #0]
 800479c:	69ca      	ldr	r2, [r1, #28]
 800479e:	ea37 0302 	bics.w	r3, r7, r2
 80047a2:	bf0c      	ite	eq
 80047a4:	2201      	moveq	r2, #1
 80047a6:	2200      	movne	r2, #0
 80047a8:	42b2      	cmp	r2, r6
 80047aa:	d001      	beq.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80047ac:	2000      	movs	r0, #0
 80047ae:	e01a      	b.n	80047e6 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	1c68      	adds	r0, r5, #1
 80047b2:	d0f3      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fd fcb6 	bl	8002124 <HAL_GetTick>
 80047b8:	eba0 0008 	sub.w	r0, r0, r8
 80047bc:	42a8      	cmp	r0, r5
 80047be:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80047c0:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	d800      	bhi.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x3a>
 80047c4:	b98d      	cbnz	r5, 80047ea <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80047c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ca:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	6883      	ldr	r3, [r0, #8]
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80047d4:	2320      	movs	r3, #32
 80047d6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80047da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80047de:	2300      	movs	r3, #0
 80047e0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80047e4:	2003      	movs	r0, #3
}
 80047e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ea:	075a      	lsls	r2, r3, #29
 80047ec:	d5d5      	bpl.n	800479a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ee:	69c3      	ldr	r3, [r0, #28]
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	d5d2      	bpl.n	800479a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047f8:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80047fa:	6803      	ldr	r3, [r0, #0]
 80047fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004800:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	6883      	ldr	r3, [r0, #8]
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800480a:	2320      	movs	r3, #32
 800480c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004810:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004814:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004818:	e7e1      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0x52>

0800481a <UART_CheckIdleState>:
{
 800481a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800481c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481e:	2600      	movs	r6, #0
 8004820:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004824:	f7fd fc7e 	bl	8002124 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800482e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004830:	d417      	bmi.n	8004862 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	075b      	lsls	r3, r3, #29
 8004838:	d50a      	bpl.n	8004850 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	462b      	mov	r3, r5
 8004844:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff ff9f 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 800484e:	b9a0      	cbnz	r0, 800487a <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004850:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004852:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004854:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004858:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8004860:	e00c      	b.n	800487c <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004862:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4632      	mov	r2, r6
 800486a:	4603      	mov	r3, r0
 800486c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004870:	4620      	mov	r0, r4
 8004872:	f7ff ff8b 	bl	800478c <UART_WaitOnFlagUntilTimeout>
 8004876:	2800      	cmp	r0, #0
 8004878:	d0db      	beq.n	8004832 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800487a:	2003      	movs	r0, #3
}
 800487c:	b002      	add	sp, #8
 800487e:	bd70      	pop	{r4, r5, r6, pc}

08004880 <HAL_UART_Init>:
{
 8004880:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004882:	4604      	mov	r4, r0
 8004884:	b350      	cbz	r0, 80048dc <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004886:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800488a:	b91b      	cbnz	r3, 8004894 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800488c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8004890:	f7fc fcb2 	bl	80011f8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004894:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004896:	2324      	movs	r3, #36	; 0x24
 8004898:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a4:	4620      	mov	r0, r4
 80048a6:	f7ff fac3 	bl	8003e30 <UART_SetConfig>
 80048aa:	2801      	cmp	r0, #1
 80048ac:	d016      	beq.n	80048dc <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048b0:	b113      	cbz	r3, 80048b8 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80048b2:	4620      	mov	r0, r4
 80048b4:	f7ff ff16 	bl	80046e4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80048d0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80048d8:	f7ff bf9f 	b.w	800481a <UART_CheckIdleState>
}
 80048dc:	2001      	movs	r0, #1
 80048de:	bd10      	pop	{r4, pc}

080048e0 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <UARTEx_SetNbDataToProcess+0x64>)
{
 80048e2:	b084      	sub	sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80048e4:	f240 1307 	movw	r3, #263	; 0x107
 80048e8:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <UARTEx_SetNbDataToProcess+0x68>)
 80048ee:	9302      	str	r3, [sp, #8]
 80048f0:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 80048f4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80048f8:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048fa:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80048fc:	b923      	cbnz	r3, 8004908 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80048fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004902:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004904:	b004      	add	sp, #16
 8004906:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004908:	6802      	ldr	r2, [r0, #0]
 800490a:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800490c:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800490e:	aa04      	add	r2, sp, #16
 8004910:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004914:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004918:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800491c:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8004920:	00d2      	lsls	r2, r2, #3
 8004922:	fb92 f2f1 	sdiv	r2, r2, r1
 8004926:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800492a:	aa04      	add	r2, sp, #16
 800492c:	4413      	add	r3, r2
 800492e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8004932:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8004936:	00d2      	lsls	r2, r2, #3
 8004938:	fb92 f3f3 	sdiv	r3, r2, r3
 800493c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8004940:	e7e0      	b.n	8004904 <UARTEx_SetNbDataToProcess+0x24>
 8004942:	bf00      	nop
 8004944:	03010101 	.word	0x03010101
 8004948:	04020408 	.word	0x04020408

0800494c <HAL_UARTEx_WakeupCallback>:
}
 800494c:	4770      	bx	lr

0800494e <HAL_UARTEx_RxFifoFullCallback>:
 800494e:	4770      	bx	lr

08004950 <HAL_UARTEx_TxFifoEmptyCallback>:
 8004950:	4770      	bx	lr

08004952 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004952:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d014      	beq.n	8004984 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800495a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	2324      	movs	r3, #36	; 0x24
 800495e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004962:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004964:	6813      	ldr	r3, [r2, #0]
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800496c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004974:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004976:	2220      	movs	r2, #32
 8004978:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800497c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8004980:	4618      	mov	r0, r3
 8004982:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004984:	2002      	movs	r0, #2
}
 8004986:	4770      	bx	lr

08004988 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004988:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800498a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800498e:	2b01      	cmp	r3, #1
{
 8004990:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004992:	d01b      	beq.n	80049cc <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8004994:	2301      	movs	r3, #1
 8004996:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800499a:	2324      	movs	r3, #36	; 0x24
 800499c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a0:	6803      	ldr	r3, [r0, #0]
 80049a2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80049b2:	4311      	orrs	r1, r2
 80049b4:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80049b6:	f7ff ff93 	bl	80048e0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ba:	6803      	ldr	r3, [r0, #0]
 80049bc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80049be:	2320      	movs	r3, #32
 80049c0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80049cc:	2002      	movs	r0, #2
 80049ce:	e7fc      	b.n	80049ca <HAL_UARTEx_SetTxFifoThreshold+0x42>

080049d0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80049d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80049d2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80049d6:	2b01      	cmp	r3, #1
{
 80049d8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80049da:	d01b      	beq.n	8004a14 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80049dc:	2301      	movs	r3, #1
 80049de:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80049e2:	2324      	movs	r3, #36	; 0x24
 80049e4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049e8:	6803      	ldr	r3, [r0, #0]
 80049ea:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80049fa:	4311      	orrs	r1, r2
 80049fc:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80049fe:	f7ff ff6f 	bl	80048e0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a02:	6803      	ldr	r3, [r0, #0]
 8004a04:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004a06:	2320      	movs	r3, #32
 8004a08:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004a14:	2002      	movs	r0, #2
 8004a16:	e7fc      	b.n	8004a12 <HAL_UARTEx_SetRxFifoThreshold+0x42>

08004a18 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8004a18:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8004a1a:	2400      	movs	r4, #0
{
 8004a1c:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004a1e:	2218      	movs	r2, #24
 8004a20:	4621      	mov	r1, r4
 8004a22:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004a24:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004a28:	f000 fcfe 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a2c:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <aci_gap_set_non_discoverable+0x38>)
 8004a2e:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x081;
  rq.rparam = &status;
 8004a30:	f10d 0307 	add.w	r3, sp, #7
 8004a34:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004a36:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004a38:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004a3a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004a3c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004a3e:	f000 fc6b 	bl	8005318 <hci_send_req>
 8004a42:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004a44:	bfac      	ite	ge
 8004a46:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8004a4a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004a4c:	b008      	add	sp, #32
 8004a4e:	bd10      	pop	{r4, pc}
 8004a50:	0081003f 	.word	0x0081003f

08004a54 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8004a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a58:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 8004a5a:	f04f 0900 	mov.w	r9, #0
{
 8004a5e:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 8004a62:	9400      	str	r4, [sp, #0]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a64:	9d00      	ldr	r5, [sp, #0]
{
 8004a66:	f89d 6154 	ldrb.w	r6, [sp, #340]	; 0x154
  int index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8004a6a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a6e:	f105 0709 	add.w	r7, r5, #9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004a72:	ac0a      	add	r4, sp, #40	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a74:	4437      	add	r7, r6
 8004a76:	19e5      	adds	r5, r4, r7
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004a78:	f8ad 1029 	strh.w	r1, [sp, #41]	; 0x29
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8004a7c:	f8ad 202b 	strh.w	r2, [sp, #43]	; 0x2b
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004a80:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004a84:	4632      	mov	r2, r6
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004a86:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004a8a:	9956      	ldr	r1, [sp, #344]	; 0x158
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a8c:	9501      	str	r5, [sp, #4]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004a8e:	a80c      	add	r0, sp, #48	; 0x30
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004a90:	f106 0a08 	add.w	sl, r6, #8
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004a94:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004a98:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
  tBleStatus status = 0;
 8004a9c:	f88d 900f 	strb.w	r9, [sp, #15]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004aa0:	f000 fcc0 	bl	8005424 <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004aa4:	9b00      	ldr	r3, [sp, #0]
 8004aa6:	f804 300a 	strb.w	r3, [r4, sl]
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004aaa:	eb04 0b0a 	add.w	fp, r4, sl
    }
    index_input += 1;
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8004aae:	461a      	mov	r2, r3
 8004ab0:	9958      	ldr	r1, [sp, #352]	; 0x160
 8004ab2:	f10b 0001 	add.w	r0, fp, #1
 8004ab6:	f000 fcb5 	bl	8005424 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004aba:	9b00      	ldr	r3, [sp, #0]
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004abc:	9a01      	ldr	r2, [sp, #4]
    index_input += 1;
 8004abe:	3609      	adds	r6, #9
    index_input += Service_Uuid_length;
 8004ac0:	4433      	add	r3, r6
 8004ac2:	461d      	mov	r5, r3
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004ac4:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 8004ac8:	53e3      	strh	r3, [r4, r7]
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004aca:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 8004ace:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	2218      	movs	r2, #24
 8004ad4:	a804      	add	r0, sp, #16
 8004ad6:	f000 fca7 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <aci_gap_set_discoverable+0xb4>)
 8004adc:	9304      	str	r3, [sp, #16]
  tBleStatus status = 0;
 8004ade:	f10d 080f 	add.w	r8, sp, #15
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004ae2:	2301      	movs	r3, #1
    index_input += 2;
 8004ae4:	3504      	adds	r5, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	a804      	add	r0, sp, #16
  rq.cparam = cmd_buffer;
 8004aea:	9406      	str	r4, [sp, #24]
  rq.rparam = &status;
 8004aec:	e9cd 5807 	strd	r5, r8, [sp, #28]
  rq.rlen = 1;
 8004af0:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8004af2:	f000 fc11 	bl	8005318 <hci_send_req>
 8004af6:	4548      	cmp	r0, r9
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004af8:	bfac      	ite	ge
 8004afa:	f898 0000 	ldrbge.w	r0, [r8]
    return BLE_STATUS_TIMEOUT;
 8004afe:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004b00:	b04b      	add	sp, #300	; 0x12c
 8004b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	0083003f 	.word	0x0083003f

08004b0c <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004b10:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 8004b12:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b16:	2218      	movs	r2, #24
 8004b18:	4629      	mov	r1, r5
 8004b1a:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004b1c:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b20:	f000 fc82 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <aci_gap_set_io_capability+0x40>)
 8004b26:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004b28:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004b2c:	2301      	movs	r3, #1
  cp0->IO_Capability = htob(IO_Capability, 1);
 8004b2e:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004b30:	4629      	mov	r1, r5
 8004b32:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004b34:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 8004b36:	e9cd 3405 	strd	r3, r4, [sp, #20]
  rq.rlen = 1;
 8004b3a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004b3c:	f000 fbec 	bl	8005318 <hci_send_req>
 8004b40:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004b42:	bfac      	ite	ge
 8004b44:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004b46:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004b48:	b048      	add	sp, #288	; 0x120
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	0085003f 	.word	0x0085003f

08004b50 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004b54:	2600      	movs	r6, #0
  index_input += 1;
  cp0->MITM_Mode = htob(MITM_Mode, 1);
  index_input += 1;
  cp0->SC_Support = htob(SC_Support, 1);
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8004b56:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  index_input += 1;
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8004b5a:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 8004b5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8004b62:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 8004b66:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8004b6a:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 8004b6e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  index_input += 1;
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8004b72:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8004b74:	f88d 0020 	strb.w	r0, [sp, #32]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8004b78:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  cp0->SC_Support = htob(SC_Support, 1);
 8004b7c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8004b80:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b84:	2218      	movs	r2, #24
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8004b86:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 8004b8a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b8e:	4631      	mov	r1, r6
 8004b90:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004b92:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b96:	f000 fc47 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <aci_gap_set_authentication_requirement+0x74>)
 8004b9c:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004b9e:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004ba2:	230c      	movs	r3, #12
  rq.rparam = &status;
 8004ba4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8004ba8:	ac08      	add	r4, sp, #32
  rq.rlen = 1;
 8004baa:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004bac:	4631      	mov	r1, r6
 8004bae:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004bb0:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8004bb2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004bb4:	f000 fbb0 	bl	8005318 <hci_send_req>
 8004bb8:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004bba:	bfac      	ite	ge
 8004bbc:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004bbe:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004bc0:	b048      	add	sp, #288	; 0x120
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
 8004bc4:	0086003f 	.word	0x0086003f

08004bc8 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8004bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	b0c8      	sub	sp, #288	; 0x120
 8004bce:	4680      	mov	r8, r0
 8004bd0:	460f      	mov	r7, r1
 8004bd2:	4616      	mov	r6, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	2207      	movs	r2, #7
 8004bd8:	4668      	mov	r0, sp
{
 8004bda:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004bdc:	f000 fc24 	bl	8005428 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004be0:	2218      	movs	r2, #24
 8004be2:	2100      	movs	r1, #0
 8004be4:	a802      	add	r0, sp, #8
  cp0->Role = htob(Role, 1);
 8004be6:	f88d 8020 	strb.w	r8, [sp, #32]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8004bea:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8004bee:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004bf2:	f000 fc19 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <aci_gap_init+0x80>)
 8004bf8:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	9305      	str	r3, [sp, #20]
  cp0->Role = htob(Role, 1);
 8004bfe:	ac08      	add	r4, sp, #32
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004c00:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8004c02:	2100      	movs	r1, #0
 8004c04:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004c06:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8004c08:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 8004c0c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004c0e:	f000 fb83 	bl	8005318 <hci_send_req>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	db16      	blt.n	8004c44 <aci_gap_init+0x7c>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8004c16:	f89d 0000 	ldrb.w	r0, [sp]
 8004c1a:	b980      	cbnz	r0, 8004c3e <aci_gap_init+0x76>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004c1c:	9a00      	ldr	r2, [sp, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004c1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004c22:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8004c26:	802a      	strh	r2, [r5, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004c28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004c2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c30:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8004c32:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8004c38:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004c3c:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8004c3e:	b048      	add	sp, #288	; 0x120
 8004c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8004c44:	20ff      	movs	r0, #255	; 0xff
 8004c46:	e7fa      	b.n	8004c3e <aci_gap_init+0x76>
 8004c48:	008a003f 	.word	0x008a003f

08004c4c <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8004c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4e:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004c50:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8004c52:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8004c56:	4602      	mov	r2, r0
{
 8004c58:	4604      	mov	r4, r0
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8004c5a:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  tBleStatus status = 0;
 8004c5e:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8004c62:	f000 fbdf 	bl	8005424 <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004c66:	2218      	movs	r2, #24
 8004c68:	4631      	mov	r1, r6
 8004c6a:	a802      	add	r0, sp, #8
 8004c6c:	f000 fbdc 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <aci_gap_update_adv_data+0x50>)
 8004c72:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004c74:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004c78:	2301      	movs	r3, #1
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8004c7a:	af08      	add	r7, sp, #32
  index_input += AdvDataLen;
 8004c7c:	3401      	adds	r4, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004c7e:	4631      	mov	r1, r6
 8004c80:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004c82:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 8004c84:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = 1;
 8004c88:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004c8a:	f000 fb45 	bl	8005318 <hci_send_req>
 8004c8e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004c90:	bfac      	ite	ge
 8004c92:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004c94:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004c96:	b049      	add	sp, #292	; 0x124
 8004c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	008e003f 	.word	0x008e003f

08004ca0 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 8004ca0:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8004ca2:	2400      	movs	r4, #0
{
 8004ca4:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004ca6:	2218      	movs	r2, #24
 8004ca8:	4621      	mov	r1, r4
 8004caa:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004cac:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004cb0:	f000 fbba 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <aci_gap_configure_whitelist+0x38>)
 8004cb6:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x092;
  rq.rparam = &status;
 8004cb8:	f10d 0307 	add.w	r3, sp, #7
 8004cbc:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004cbe:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004cc0:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004cc2:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004cc4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004cc6:	f000 fb27 	bl	8005318 <hci_send_req>
 8004cca:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004ccc:	bfac      	ite	ge
 8004cce:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8004cd2:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004cd4:	b008      	add	sp, #32
 8004cd6:	bd10      	pop	{r4, pc}
 8004cd8:	0092003f 	.word	0x0092003f

08004cdc <aci_gap_allow_rebond>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_allow_rebond(uint16_t Connection_Handle)
{
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004ce0:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004ce2:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004ce6:	2218      	movs	r2, #24
 8004ce8:	4629      	mov	r1, r5
 8004cea:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004cec:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004cf0:	f000 fb9a 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <aci_gap_allow_rebond+0x44>)
 8004cf6:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004cf8:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x095;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004cfc:	2302      	movs	r3, #2
  rq.rparam = &status;
 8004cfe:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004d02:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004d04:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004d06:	4629      	mov	r1, r5
 8004d08:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004d0a:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004d0c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004d0e:	f000 fb03 	bl	8005318 <hci_send_req>
 8004d12:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004d14:	bfac      	ite	ge
 8004d16:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004d18:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004d1a:	b048      	add	sp, #288	; 0x120
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
 8004d1e:	bf00      	nop
 8004d20:	0095003f 	.word	0x0095003f

08004d24 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(uint16_t Connection_Handle,
                                                          uint8_t Confirm_Yes_No)
{
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004d28:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004d2a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Confirm_Yes_No = htob(Confirm_Yes_No, 1);
 8004d2e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004d32:	2218      	movs	r2, #24
 8004d34:	4629      	mov	r1, r5
 8004d36:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004d38:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004d3c:	f000 fb74 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <aci_gap_numeric_comparison_value_confirm_yesno+0x48>)
 8004d42:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004d44:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x0a5;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004d48:	2303      	movs	r3, #3
  rq.rparam = &status;
 8004d4a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004d4e:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004d50:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004d52:	4629      	mov	r1, r5
 8004d54:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004d56:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004d58:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004d5a:	f000 fadd 	bl	8005318 <hci_send_req>
 8004d5e:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004d60:	bfac      	ite	ge
 8004d62:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004d64:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004d66:	b048      	add	sp, #288	; 0x120
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	bf00      	nop
 8004d6c:	00a5003f 	.word	0x00a5003f

08004d70 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 8004d70:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8004d72:	2400      	movs	r4, #0
{
 8004d74:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004d76:	2218      	movs	r2, #24
 8004d78:	4621      	mov	r1, r4
 8004d7a:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004d7c:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004d80:	f000 fb52 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <aci_gatt_init+0x38>)
 8004d86:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 8004d88:	f10d 0307 	add.w	r3, sp, #7
 8004d8c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004d8e:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004d90:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004d92:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004d94:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004d96:	f000 fabf 	bl	8005318 <hci_send_req>
 8004d9a:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004d9c:	bfac      	ite	ge
 8004d9e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8004da2:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004da4:	b008      	add	sp, #32
 8004da6:	bd10      	pop	{r4, pc}
 8004da8:	0101003f 	.word	0x0101003f

08004dac <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004db0:	2801      	cmp	r0, #1
{
 8004db2:	b0c9      	sub	sp, #292	; 0x124
 8004db4:	4604      	mov	r4, r0
 8004db6:	468a      	mov	sl, r1
 8004db8:	4691      	mov	r9, r2
 8004dba:	4698      	mov	r8, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004dbc:	d039      	beq.n	8004e32 <aci_gatt_add_service+0x86>
 8004dbe:	2802      	cmp	r0, #2
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2711      	moveq	r7, #17
 8004dc4:	2701      	movne	r7, #1
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004dc6:	ad01      	add	r5, sp, #4
 8004dc8:	2203      	movs	r2, #3
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4628      	mov	r0, r5
  int index_input = 0;
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004dce:	ae08      	add	r6, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004dd0:	f000 fb2a 	bl	8005428 <Osal_MemSet>
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8004dd4:	2c01      	cmp	r4, #1
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004dd6:	7034      	strb	r4, [r6, #0]
    switch (Service_UUID_Type) {
 8004dd8:	d02d      	beq.n	8004e36 <aci_gatt_add_service+0x8a>
 8004dda:	2c02      	cmp	r4, #2
 8004ddc:	d12d      	bne.n	8004e3a <aci_gatt_add_service+0x8e>
      case 1: size = 2; break;
      case 2: size = 16; break;
 8004dde:	2410      	movs	r4, #16
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004de0:	eb06 0b07 	add.w	fp, r6, r7
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8004de4:	4622      	mov	r2, r4
 8004de6:	4651      	mov	r1, sl
 8004de8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8004dec:	f000 fb1a 	bl	8005424 <Osal_MemCpy>
    index_input += size;
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8004df0:	f806 9007 	strb.w	r9, [r6, r7]
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
    }
    index_input += 1;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004df4:	2218      	movs	r2, #24
 8004df6:	2100      	movs	r1, #0
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8004df8:	f88b 8001 	strb.w	r8, [fp, #1]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004dfc:	a802      	add	r0, sp, #8
 8004dfe:	f000 fb13 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <aci_gatt_add_service+0x98>)
 8004e04:	9302      	str	r3, [sp, #8]
    index_input += 1;
 8004e06:	3403      	adds	r4, #3
  rq.ocf = 0x102;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004e08:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004e0e:	9604      	str	r6, [sp, #16]
  rq.rparam = &resp;
 8004e10:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = sizeof(resp);
 8004e14:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004e16:	f000 fa7f 	bl	8005318 <hci_send_req>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	db0f      	blt.n	8004e3e <aci_gatt_add_service+0x92>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8004e1e:	7828      	ldrb	r0, [r5, #0]
 8004e20:	b920      	cbnz	r0, 8004e2c <aci_gatt_add_service+0x80>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004e22:	682b      	ldr	r3, [r5, #0]
 8004e24:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8004e26:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004e2a:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8004e2c:	b049      	add	sp, #292	; 0x124
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004e32:	2703      	movs	r7, #3
 8004e34:	e7c7      	b.n	8004dc6 <aci_gatt_add_service+0x1a>
      case 1: size = 2; break;
 8004e36:	2402      	movs	r4, #2
 8004e38:	e7d2      	b.n	8004de0 <aci_gatt_add_service+0x34>
      default: return BLE_STATUS_ERROR;
 8004e3a:	2047      	movs	r0, #71	; 0x47
 8004e3c:	e7f6      	b.n	8004e2c <aci_gatt_add_service+0x80>
    return BLE_STATUS_TIMEOUT;
 8004e3e:	20ff      	movs	r0, #255	; 0xff
 8004e40:	e7f4      	b.n	8004e2c <aci_gatt_add_service+0x80>
 8004e42:	bf00      	nop
 8004e44:	0102003f 	.word	0x0102003f

08004e48 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8004e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004e4c:	2901      	cmp	r1, #1
{
 8004e4e:	b0c9      	sub	sp, #292	; 0x124
 8004e50:	4606      	mov	r6, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	4691      	mov	r9, r2
 8004e56:	4698      	mov	r8, r3
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004e58:	d046      	beq.n	8004ee8 <aci_gatt_add_char+0xa0>
 8004e5a:	2902      	cmp	r1, #2
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2713      	moveq	r7, #19
 8004e60:	2703      	movne	r7, #3
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004e62:	ad08      	add	r5, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004e64:	2203      	movs	r2, #3
 8004e66:	2100      	movs	r1, #0
 8004e68:	a801      	add	r0, sp, #4
 8004e6a:	f000 fadd 	bl	8005428 <Osal_MemSet>
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8004e6e:	2c01      	cmp	r4, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004e70:	802e      	strh	r6, [r5, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8004e72:	70ac      	strb	r4, [r5, #2]
    switch (Char_UUID_Type) {
 8004e74:	d03a      	beq.n	8004eec <aci_gatt_add_char+0xa4>
 8004e76:	2c02      	cmp	r4, #2
 8004e78:	d13a      	bne.n	8004ef0 <aci_gatt_add_char+0xa8>
      case 1: size = 2; break;
      case 2: size = 16; break;
 8004e7a:	2410      	movs	r4, #16
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004e7c:	19ee      	adds	r6, r5, r7
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4649      	mov	r1, r9
 8004e82:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8004e86:	f000 facd 	bl	8005424 <Osal_MemCpy>
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
    }
    index_input += 2;
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8004e8a:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8004e8e:	f825 8007 	strh.w	r8, [r5, r7]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8004e92:	70b3      	strb	r3, [r6, #2]
    }
    index_input += 1;
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8004e94:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 8004e98:	70f3      	strb	r3, [r6, #3]
    }
    index_input += 1;
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8004e9a:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 8004e9e:	7133      	strb	r3, [r6, #4]
    }
    index_input += 1;
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8004ea0:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
 8004ea4:	7173      	strb	r3, [r6, #5]
    }
    index_input += 1;
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8004ea6:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 8004eaa:	71b3      	strb	r3, [r6, #6]
    }
    index_input += 1;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004eac:	2218      	movs	r2, #24
 8004eae:	2100      	movs	r1, #0
 8004eb0:	a802      	add	r0, sp, #8
 8004eb2:	f000 fab9 	bl	8005428 <Osal_MemSet>
    index_input += 1;
 8004eb6:	340a      	adds	r4, #10
  rq.ogf = 0x3f;
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <aci_gatt_add_char+0xb0>)
 8004eba:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x104;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004ebc:	9405      	str	r4, [sp, #20]
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004ebe:	2303      	movs	r3, #3
  rq.rparam = &resp;
 8004ec0:	ac01      	add	r4, sp, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004ec6:	9504      	str	r5, [sp, #16]
  rq.rparam = &resp;
 8004ec8:	9406      	str	r4, [sp, #24]
  rq.rlen = sizeof(resp);
 8004eca:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004ecc:	f000 fa24 	bl	8005318 <hci_send_req>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	db0f      	blt.n	8004ef4 <aci_gatt_add_char+0xac>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8004ed4:	7820      	ldrb	r0, [r4, #0]
 8004ed6:	b920      	cbnz	r0, 8004ee2 <aci_gatt_add_char+0x9a>
  {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	9a55      	ldr	r2, [sp, #340]	; 0x154
 8004edc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004ee0:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8004ee2:	b049      	add	sp, #292	; 0x124
 8004ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004ee8:	2705      	movs	r7, #5
 8004eea:	e7ba      	b.n	8004e62 <aci_gatt_add_char+0x1a>
      case 1: size = 2; break;
 8004eec:	2402      	movs	r4, #2
 8004eee:	e7c5      	b.n	8004e7c <aci_gatt_add_char+0x34>
      default: return BLE_STATUS_ERROR;
 8004ef0:	2047      	movs	r0, #71	; 0x47
 8004ef2:	e7f6      	b.n	8004ee2 <aci_gatt_add_char+0x9a>
    return BLE_STATUS_TIMEOUT;
 8004ef4:	20ff      	movs	r0, #255	; 0xff
 8004ef6:	e7f4      	b.n	8004ee2 <aci_gatt_add_char+0x9a>
 8004ef8:	0104003f 	.word	0x0104003f

08004efc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8004efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efe:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004f00:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004f02:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 8004f06:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 8004f0a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004f0e:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8004f10:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004f14:	461a      	mov	r2, r3
 8004f16:	f10d 0026 	add.w	r0, sp, #38	; 0x26
{
 8004f1a:	461c      	mov	r4, r3
  tBleStatus status = 0;
 8004f1c:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004f20:	f000 fa80 	bl	8005424 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004f24:	2218      	movs	r2, #24
 8004f26:	4639      	mov	r1, r7
 8004f28:	a802      	add	r0, sp, #8
 8004f2a:	f000 fa7d 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <aci_gatt_update_char_value+0x5c>)
 8004f30:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004f32:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004f36:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004f38:	ad08      	add	r5, sp, #32
  index_input += Char_Value_Length;
 8004f3a:	3406      	adds	r4, #6
  if (hci_send_req(&rq, FALSE) < 0)
 8004f3c:	4639      	mov	r1, r7
 8004f3e:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004f40:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 8004f42:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.rlen = 1;
 8004f46:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004f48:	f000 f9e6 	bl	8005318 <hci_send_req>
 8004f4c:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004f4e:	bfac      	ite	ge
 8004f50:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8004f52:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004f54:	b049      	add	sp, #292	; 0x124
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	0106003f 	.word	0x0106003f

08004f5c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8004f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5e:	b0c9      	sub	sp, #292	; 0x124
 8004f60:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004f62:	2600      	movs	r6, #0
{
 8004f64:	4611      	mov	r1, r2
  int index_input = 0;
  cp0->Offset = htob(Offset, 1);
 8004f66:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = htob(Length, 1);
 8004f70:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 8004f74:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8004f78:	f000 fa54 	bl	8005424 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004f7c:	2218      	movs	r2, #24
 8004f7e:	4631      	mov	r1, r6
 8004f80:	a802      	add	r0, sp, #8
 8004f82:	f000 fa51 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <aci_hal_write_config_data+0x54>)
 8004f88:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004f8a:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004f8e:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 8004f90:	af08      	add	r7, sp, #32
  index_input += Length;
 8004f92:	3402      	adds	r4, #2
  if (hci_send_req(&rq, FALSE) < 0)
 8004f94:	4631      	mov	r1, r6
 8004f96:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004f98:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 8004f9a:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = 1;
 8004f9e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004fa0:	f000 f9ba 	bl	8005318 <hci_send_req>
 8004fa4:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004fa6:	bfac      	ite	ge
 8004fa8:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004faa:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004fac:	b049      	add	sp, #292	; 0x124
 8004fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb0:	000c003f 	.word	0x000c003f

08004fb4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004fb8:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004fba:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8004fbe:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004fc2:	2218      	movs	r2, #24
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004fc8:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004fcc:	f000 fa2c 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <aci_hal_set_tx_power_level+0x48>)
 8004fd2:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004fd4:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004fd8:	2302      	movs	r3, #2
  rq.rparam = &status;
 8004fda:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004fde:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004fe0:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004fe6:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004fe8:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004fea:	f000 f995 	bl	8005318 <hci_send_req>
 8004fee:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004ff0:	bfac      	ite	ge
 8004ff2:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004ff4:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004ff6:	b048      	add	sp, #288	; 0x120
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	bf00      	nop
 8004ffc:	000f003f 	.word	0x000f003f

08005000 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005004:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 8005006:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800500a:	2218      	movs	r2, #24
 800500c:	4629      	mov	r1, r5
 800500e:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8005010:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005014:	f000 fa08 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <aci_hal_set_radio_activity_mask+0x44>)
 800501a:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 800501c:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x018;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8005020:	2302      	movs	r3, #2
  rq.rparam = &status;
 8005022:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 8005026:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8005028:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800502a:	4629      	mov	r1, r5
 800502c:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800502e:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8005030:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005032:	f000 f971 	bl	8005318 <hci_send_req>
 8005036:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8005038:	bfac      	ite	ge
 800503a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 800503c:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800503e:	b048      	add	sp, #288	; 0x120
 8005040:	bd70      	pop	{r4, r5, r6, pc}
 8005042:	bf00      	nop
 8005044:	0018003f 	.word	0x0018003f

08005048 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8005048:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800504a:	2400      	movs	r4, #0
{
 800504c:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800504e:	2218      	movs	r2, #24
 8005050:	4621      	mov	r1, r4
 8005052:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8005054:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005058:	f000 f9e6 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x03;
 800505c:	f04f 1303 	mov.w	r3, #196611	; 0x30003
 8005060:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x003;
  rq.rparam = &status;
 8005062:	f10d 0307 	add.w	r3, sp, #7
 8005066:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8005068:	4621      	mov	r1, r4
  rq.rlen = 1;
 800506a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800506c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800506e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8005070:	f000 f952 	bl	8005318 <hci_send_req>
 8005074:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8005076:	bfac      	ite	ge
 8005078:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800507c:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800507e:	b008      	add	sp, #32
 8005080:	bd10      	pop	{r4, pc}
	...

08005084 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 8005084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005086:	b0c9      	sub	sp, #292	; 0x124
 8005088:	4607      	mov	r7, r0
 800508a:	460e      	mov	r6, r1
 800508c:	4615      	mov	r5, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800508e:	2100      	movs	r1, #0
 8005090:	2205      	movs	r2, #5
 8005092:	4668      	mov	r0, sp
 8005094:	f000 f9c8 	bl	8005428 <Osal_MemSet>
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005098:	2218      	movs	r2, #24
 800509a:	2100      	movs	r1, #0
 800509c:	a802      	add	r0, sp, #8
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800509e:	f8ad 7020 	strh.w	r7, [sp, #32]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80050a2:	f000 f9c1 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x08;
 80050a6:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <hci_le_read_phy+0x5c>)
 80050a8:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x030;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80050aa:	2302      	movs	r3, #2
 80050ac:	9305      	str	r3, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80050ae:	ac08      	add	r4, sp, #32
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 80050b0:	2305      	movs	r3, #5
  if (hci_send_req(&rq, FALSE) < 0)
 80050b2:	2100      	movs	r1, #0
 80050b4:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80050b6:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 80050b8:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 80050bc:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80050be:	f000 f92b 	bl	8005318 <hci_send_req>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	db0a      	blt.n	80050dc <hci_le_read_phy+0x58>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 80050c6:	f89d 0000 	ldrb.w	r0, [sp]
 80050ca:	b928      	cbnz	r0, 80050d8 <hci_le_read_phy+0x54>
  {
    return resp.Status;
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 80050cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80050d0:	7033      	strb	r3, [r6, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 80050d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050d6:	702b      	strb	r3, [r5, #0]
  return BLE_STATUS_SUCCESS;
}
 80050d8:	b049      	add	sp, #292	; 0x124
 80050da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80050dc:	20ff      	movs	r0, #255	; 0xff
 80050de:	e7fb      	b.n	80050d8 <hci_le_read_phy+0x54>
 80050e0:	00300008 	.word	0x00300008

080050e4 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80050e8:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 80050ea:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 80050ee:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 80050f2:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80050f6:	4631      	mov	r1, r6
 80050f8:	2218      	movs	r2, #24
 80050fa:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80050fc:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005100:	f000 f992 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x08;
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <hci_le_set_default_phy+0x4c>)
 8005106:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8005108:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x031;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800510c:	2303      	movs	r3, #3
  rq.rparam = &status;
 800510e:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 8005112:	ac08      	add	r4, sp, #32
  rq.rlen = 1;
 8005114:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8005116:	4631      	mov	r1, r6
 8005118:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800511a:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 800511c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800511e:	f000 f8fb 	bl	8005318 <hci_send_req>
 8005122:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8005124:	bfac      	ite	ge
 8005126:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8005128:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800512a:	b048      	add	sp, #288	; 0x120
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	bf00      	nop
 8005130:	00310008 	.word	0x00310008

08005134 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Conn_Interval_Min,
                                                     uint16_t Conn_Interval_Max,
                                                     uint16_t Slave_latency,
                                                     uint16_t Timeout_Multiplier)
{
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005138:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800513a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800513e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8005142:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  index_input += 2;
  cp0->Slave_latency = htob(Slave_latency, 2);
 8005146:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  index_input += 2;
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800514a:	4631      	mov	r1, r6
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800514c:	f8bd 3130 	ldrh.w	r3, [sp, #304]	; 0x130
 8005150:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  Osal_MemSet(&rq, 0, sizeof(rq));
 8005154:	2218      	movs	r2, #24
 8005156:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8005158:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800515c:	f000 f964 	bl	8005428 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x181;
 8005160:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <aci_l2cap_connection_parameter_update_req+0x5c>)
 8005162:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8005164:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x181;
 8005168:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800516c:	230a      	movs	r3, #10
  rq.rparam = &status;
 800516e:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8005172:	ac08      	add	r4, sp, #32
  rq.rlen = 1;
 8005174:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8005176:	4631      	mov	r1, r6
 8005178:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800517a:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 800517c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800517e:	f000 f8cb 	bl	8005318 <hci_send_req>
 8005182:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8005184:	bfac      	ite	ge
 8005186:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8005188:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800518a:	b048      	add	sp, #288	; 0x120
 800518c:	bd70      	pop	{r4, r5, r6, pc}
 800518e:	bf00      	nop
 8005190:	0181003f 	.word	0x0181003f

08005194 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8005194:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005196:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800519a:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800519c:	480c      	ldr	r0, [pc, #48]	; (80051d0 <DbgTrace_TxCpltCallback+0x3c>)
 800519e:	f10d 0106 	add.w	r1, sp, #6
 80051a2:	f000 fc22 	bl	80059ea <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80051a6:	f10d 0106 	add.w	r1, sp, #6
 80051aa:	4809      	ldr	r0, [pc, #36]	; (80051d0 <DbgTrace_TxCpltCallback+0x3c>)
 80051ac:	f000 fc7e 	bl	8005aac <CircularQueue_Sense>


  if ( buf != NULL) 
 80051b0:	b140      	cbz	r0, 80051c4 <DbgTrace_TxCpltCallback+0x30>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b2:	f384 8810 	msr	PRIMASK, r4
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80051b6:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <DbgTrace_TxCpltCallback+0x40>)
 80051b8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80051bc:	f7fb face 	bl	800075c <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80051c0:	b002      	add	sp, #8
 80051c2:	bd10      	pop	{r4, pc}
    DbgTracePeripheralReady = SET;
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <DbgTrace_TxCpltCallback+0x44>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	f384 8810 	msr	PRIMASK, r4
}
 80051ce:	e7f7      	b.n	80051c0 <DbgTrace_TxCpltCallback+0x2c>
 80051d0:	20000270 	.word	0x20000270
 80051d4:	08005195 	.word	0x08005195
 80051d8:	20000040 	.word	0x20000040

080051dc <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80051dc:	b507      	push	{r0, r1, r2, lr}
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80051de:	f7fb fabb 	bl	8000758 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80051e2:	2302      	movs	r3, #2
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051ea:	2300      	movs	r3, #0
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <DbgTraceInit+0x20>)
 80051ee:	4804      	ldr	r0, [pc, #16]	; (8005200 <DbgTraceInit+0x24>)
 80051f0:	f000 fae2 	bl	80057b8 <CircularQueue_Init>
#endif 
#endif
  return;
}
 80051f4:	b003      	add	sp, #12
 80051f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80051fa:	bf00      	nop
 80051fc:	20000290 	.word	0x20000290
 8005200:	20000270 	.word	0x20000270

08005204 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005208:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d01b      	beq.n	8005248 <DbgTraceWrite+0x44>
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8005210:	3801      	subs	r0, #1
 8005212:	2801      	cmp	r0, #1
 8005214:	d81a      	bhi.n	800524c <DbgTraceWrite+0x48>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8005216:	b192      	cbz	r2, 800523e <DbgTraceWrite+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8005218:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800521a:	b296      	uxth	r6, r2
 800521c:	2301      	movs	r3, #1
 800521e:	4632      	mov	r2, r6
 8005220:	480c      	ldr	r0, [pc, #48]	; (8005254 <DbgTraceWrite+0x50>)
 8005222:	f000 fadd 	bl	80057e0 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 8005226:	b160      	cbz	r0, 8005242 <DbgTraceWrite+0x3e>
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <DbgTraceWrite+0x54>)
 800522a:	781a      	ldrb	r2, [r3, #0]
 800522c:	b14a      	cbz	r2, 8005242 <DbgTraceWrite+0x3e>
    {
      DbgTracePeripheralReady = RESET;
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	f385 8810 	msr	PRIMASK, r5
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8005236:	4a09      	ldr	r2, [pc, #36]	; (800525c <DbgTraceWrite+0x58>)
 8005238:	4631      	mov	r1, r6
 800523a:	f7fb fa8f 	bl	800075c <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
}
 800523e:	4620      	mov	r0, r4
 8005240:	bd70      	pop	{r4, r5, r6, pc}
 8005242:	f385 8810 	msr	PRIMASK, r5
 8005246:	e7fa      	b.n	800523e <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) 0;
 8005248:	2400      	movs	r4, #0
 800524a:	e7f8      	b.n	800523e <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) - 1;
 800524c:	f04f 34ff 	mov.w	r4, #4294967295
 8005250:	e7f5      	b.n	800523e <DbgTraceWrite+0x3a>
 8005252:	bf00      	nop
 8005254:	20000270 	.word	0x20000270
 8005258:	20000040 	.word	0x20000040
 800525c:	08005195 	.word	0x08005195

08005260 <_write>:
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8005260:	f7ff bfd0 	b.w	8005204 <DbgTraceWrite>

08005264 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005264:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005266:	4c0f      	ldr	r4, [pc, #60]	; (80052a4 <hci_init+0x40>)
 8005268:	684b      	ldr	r3, [r1, #4]
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);

  pCmdBuffer = p_cmdbuffer;
 800526a:	4e0f      	ldr	r6, [pc, #60]	; (80052a8 <hci_init+0x44>)
  hciContext.UserEvtRx = UserEvtRx;
 800526c:	6220      	str	r0, [r4, #32]
{
 800526e:	460d      	mov	r5, r1
  hci_register_io_bus (&hciContext.io);
 8005270:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005272:	6023      	str	r3, [r4, #0]
  hci_register_io_bus (&hciContext.io);
 8005274:	f000 f8cc 	bl	8005410 <hci_register_io_bus>
  LST_init_head (&HciCmdEventQueue);
 8005278:	f104 0024 	add.w	r0, r4, #36	; 0x24
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800527c:	682d      	ldr	r5, [r5, #0]
  LST_init_head (&HciCmdEventQueue);
 800527e:	f000 fa5f 	bl	8005740 <LST_init_head>
  pCmdBuffer = p_cmdbuffer;
 8005282:	4630      	mov	r0, r6
 8005284:	f840 5b04 	str.w	r5, [r0], #4

  LST_init_head (&HciAsynchEventQueue);
 8005288:	f000 fa5a 	bl	8005740 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800528c:	2301      	movs	r3, #1
 800528e:	7333      	strb	r3, [r6, #12]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005290:	6863      	ldr	r3, [r4, #4]
 8005292:	b12b      	cbz	r3, 80052a0 <hci_init+0x3c>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005294:	a804      	add	r0, sp, #16
 8005296:	4a05      	ldr	r2, [pc, #20]	; (80052ac <hci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005298:	9502      	str	r5, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800529a:	f840 2d10 	str.w	r2, [r0, #-16]!
    hciContext.io.Init(&Conf);
 800529e:	4798      	blx	r3
}
 80052a0:	b004      	add	sp, #16
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	20001290 	.word	0x20001290
 80052a8:	20000200 	.word	0x20000200
 80052ac:	080053dd 	.word	0x080053dd

080052b0 <hci_user_evt_proc>:
{
 80052b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80052b2:	4c16      	ldr	r4, [pc, #88]	; (800530c <hci_user_evt_proc+0x5c>)
 80052b4:	1d20      	adds	r0, r4, #4
 80052b6:	f000 fa46 	bl	8005746 <LST_is_empty>
 80052ba:	b9c0      	cbnz	r0, 80052ee <hci_user_evt_proc+0x3e>
 80052bc:	7b23      	ldrb	r3, [r4, #12]
 80052be:	b1b3      	cbz	r3, 80052ee <hci_user_evt_proc+0x3e>
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80052c0:	a901      	add	r1, sp, #4
 80052c2:	1d20      	adds	r0, r4, #4
 80052c4:	f000 fa6c 	bl	80057a0 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <hci_user_evt_proc+0x60>)
    OutputEvtTrace(phcievtbuffer);
 80052ca:	9901      	ldr	r1, [sp, #4]
    if (hciContext.UserEvtRx != NULL)
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	2301      	movs	r3, #1
 80052d0:	b132      	cbz	r2, 80052e0 <hci_user_evt_proc+0x30>
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80052d2:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 80052d4:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80052d6:	f800 3d08 	strb.w	r3, [r0, #-8]!
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80052da:	4790      	blx	r2
      UserEventFlow = UserEvtRxParam.status;
 80052dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80052e0:	7323      	strb	r3, [r4, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80052e2:	7b23      	ldrb	r3, [r4, #12]
 80052e4:	9901      	ldr	r1, [sp, #4]
 80052e6:	b16b      	cbz	r3, 8005304 <hci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 80052e8:	4608      	mov	r0, r1
 80052ea:	f000 fd79 	bl	8005de0 <TL_MM_EvtDone>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80052ee:	4809      	ldr	r0, [pc, #36]	; (8005314 <hci_user_evt_proc+0x64>)
 80052f0:	f000 fa29 	bl	8005746 <LST_is_empty>
 80052f4:	b920      	cbnz	r0, 8005300 <hci_user_evt_proc+0x50>
 80052f6:	7b23      	ldrb	r3, [r4, #12]
 80052f8:	b113      	cbz	r3, 8005300 <hci_user_evt_proc+0x50>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80052fa:	4806      	ldr	r0, [pc, #24]	; (8005314 <hci_user_evt_proc+0x64>)
 80052fc:	f7fc fba3 	bl	8001a46 <hci_notify_asynch_evt>
}
 8005300:	b004      	add	sp, #16
 8005302:	bd10      	pop	{r4, pc}
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005304:	4803      	ldr	r0, [pc, #12]	; (8005314 <hci_user_evt_proc+0x64>)
 8005306:	f000 fa28 	bl	800575a <LST_insert_head>
 800530a:	e7f0      	b.n	80052ee <hci_user_evt_proc+0x3e>
 800530c:	20000200 	.word	0x20000200
 8005310:	20001290 	.word	0x20001290
 8005314:	20000204 	.word	0x20000204

08005318 <hci_send_req>:
{
 8005318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
  if(hcicmdstatus == HCI_TL_CmdBusy)
  {
    if(StatusNotCallBackFunction != 0)
 800531c:	4f2c      	ldr	r7, [pc, #176]	; (80053d0 <hci_send_req+0xb8>)
 800531e:	683b      	ldr	r3, [r7, #0]
{
 8005320:	4605      	mov	r5, r0
    if(StatusNotCallBackFunction != 0)
 8005322:	b10b      	cbz	r3, 8005328 <hci_send_req+0x10>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005324:	2000      	movs	r0, #0
 8005326:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005328:	886c      	ldrh	r4, [r5, #2]
 800532a:	882b      	ldrh	r3, [r5, #0]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800532c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80053d8 <hci_send_req+0xc0>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005330:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005334:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005338:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <hci_send_req+0xbc>)
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800533a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800533e:	6818      	ldr	r0, [r3, #0]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005340:	b2a4      	uxth	r4, r4
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005342:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005344:	f8a0 4009 	strh.w	r4, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	300c      	adds	r0, #12
 800534c:	f000 feb0 	bl	80060b0 <memcpy>
  hciContext.io.Send(0,0);
 8005350:	2100      	movs	r1, #0
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4608      	mov	r0, r1
 8005356:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005358:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800535c:	f7fc fb7a 	bl	8001a54 <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005360:	f04f 0800 	mov.w	r8, #0
 8005364:	4648      	mov	r0, r9
 8005366:	f000 f9ee 	bl	8005746 <LST_is_empty>
 800536a:	b150      	cbz	r0, 8005382 <hci_send_req+0x6a>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800536c:	f1b8 0f00 	cmp.w	r8, #0
 8005370:	d0f2      	beq.n	8005358 <hci_send_req+0x40>
    }
  }
  else
  {
    if(StatusNotCallBackFunction != 0)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	b10b      	cbz	r3, 800537a <hci_send_req+0x62>
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005376:	2001      	movs	r0, #1
 8005378:	4798      	blx	r3
}
 800537a:	2000      	movs	r0, #0
 800537c:	b003      	add	sp, #12
 800537e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005382:	a901      	add	r1, sp, #4
 8005384:	4648      	mov	r0, r9
 8005386:	f000 fa0b 	bl	80057a0 <LST_remove_head>
      OutputRspTrace(pevtpacket);
 800538a:	9e01      	ldr	r6, [sp, #4]
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800538c:	7a73      	ldrb	r3, [r6, #9]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d10c      	bne.n	80053ac <hci_send_req+0x94>
        if(pcommand_status_event->cmdcode == opcode)
 8005392:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 8005396:	42a3      	cmp	r3, r4
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005398:	bf02      	ittt	eq
 800539a:	692b      	ldreq	r3, [r5, #16]
 800539c:	7af2      	ldrbeq	r2, [r6, #11]
 800539e:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 80053a0:	7b33      	ldrb	r3, [r6, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0de      	beq.n	8005364 <hci_send_req+0x4c>
          local_cmd_status = HCI_TL_CmdAvailable;
 80053a6:	f04f 0801 	mov.w	r8, #1
 80053aa:	e7db      	b.n	8005364 <hci_send_req+0x4c>
        if(pcommand_complete_event->cmdcode == opcode)
 80053ac:	89b3      	ldrh	r3, [r6, #12]
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	d10c      	bne.n	80053cc <hci_send_req+0xb4>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80053b2:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80053b4:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80053b6:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80053b8:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	429a      	cmp	r2, r3
 80053be:	bfa8      	it	ge
 80053c0:	461a      	movge	r2, r3
 80053c2:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80053c4:	f106 010e 	add.w	r1, r6, #14
 80053c8:	f000 fe72 	bl	80060b0 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 80053cc:	7af3      	ldrb	r3, [r6, #11]
 80053ce:	e7e8      	b.n	80053a2 <hci_send_req+0x8a>
 80053d0:	20001290 	.word	0x20001290
 80053d4:	20000200 	.word	0x20000200
 80053d8:	200012b4 	.word	0x200012b4

080053dc <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80053dc:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80053de:	7a43      	ldrb	r3, [r0, #9]
 80053e0:	3b0e      	subs	r3, #14
 80053e2:	2b01      	cmp	r3, #1
{
 80053e4:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80053e6:	d806      	bhi.n	80053f6 <TlEvtReceived+0x1a>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80053e8:	4807      	ldr	r0, [pc, #28]	; (8005408 <TlEvtReceived+0x2c>)
 80053ea:	f000 f9c2 	bl	8005772 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7fc fb2d 	bl	8001a4e <hci_cmd_resp_release>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 80053f4:	bd08      	pop	{r3, pc}
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80053f6:	4805      	ldr	r0, [pc, #20]	; (800540c <TlEvtReceived+0x30>)
 80053f8:	f000 f9bb 	bl	8005772 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80053fc:	4803      	ldr	r0, [pc, #12]	; (800540c <TlEvtReceived+0x30>)
}
 80053fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005402:	f7fc bb20 	b.w	8001a46 <hci_notify_asynch_evt>
 8005406:	bf00      	nop
 8005408:	200012b4 	.word	0x200012b4
 800540c:	20000204 	.word	0x20000204

08005410 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <hci_register_io_bus+0xc>)
 8005412:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005414:	4b02      	ldr	r3, [pc, #8]	; (8005420 <hci_register_io_bus+0x10>)
 8005416:	6103      	str	r3, [r0, #16]

  return;
}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	08005c85 	.word	0x08005c85
 8005420:	08005cc5 	.word	0x08005cc5

08005424 <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 8005424:	f000 be44 	b.w	80060b0 <memcpy>

08005428 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 8005428:	f000 be4d 	b.w	80060c6 <memset>

0800542c <OTP_Read>:

uint8_t * OTP_Read( uint8_t id )
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <OTP_Read+0x18>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800542e:	4a06      	ldr	r2, [pc, #24]	; (8005448 <OTP_Read+0x1c>)
 8005430:	79d9      	ldrb	r1, [r3, #7]
 8005432:	4281      	cmp	r1, r0
 8005434:	d002      	beq.n	800543c <OTP_Read+0x10>
 8005436:	4293      	cmp	r3, r2
 8005438:	d102      	bne.n	8005440 <OTP_Read+0x14>
    p_id -= 8 ;
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 800543a:	2300      	movs	r3, #0
  }

  return p_id ;
}
 800543c:	4618      	mov	r0, r3
 800543e:	4770      	bx	lr
    p_id -= 8 ;
 8005440:	3b08      	subs	r3, #8
 8005442:	e7f5      	b.n	8005430 <OTP_Read+0x4>
 8005444:	1fff73f8 	.word	0x1fff73f8
 8005448:	1fff7000 	.word	0x1fff7000

0800544c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800544c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 800544e:	7843      	ldrb	r3, [r0, #1]
 8005450:	2bff      	cmp	r3, #255	; 0xff
{
 8005452:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 8005454:	d12f      	bne.n	80054b6 <PeerToPeer_Event_Handler+0x6a>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
      switch(blue_evt->ecode)
 8005456:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800545a:	f640 4301 	movw	r3, #3073	; 0xc01
 800545e:	429a      	cmp	r2, r3
 8005460:	d129      	bne.n	80054b6 <PeerToPeer_Event_Handler+0x6a>
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8005462:	4916      	ldr	r1, [pc, #88]	; (80054bc <PeerToPeer_Event_Handler+0x70>)
 8005464:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8005468:	888b      	ldrh	r3, [r1, #4]
 800546a:	3302      	adds	r3, #2
 800546c:	429a      	cmp	r2, r3
 800546e:	d10f      	bne.n	8005490 <PeerToPeer_Event_Handler+0x44>
               */
              return_value = SVCCTL_EvtAckFlowEnable;
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8005470:	7b43      	ldrb	r3, [r0, #13]
 8005472:	07db      	lsls	r3, r3, #31
 8005474:	d508      	bpl.n	8005488 <PeerToPeer_Event_Handler+0x3c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8005476:	2300      	movs	r3, #0
 8005478:	f88d 3000 	strb.w	r3, [sp]
                P2PS_STM_App_Notification(&Notification);
 800547c:	4668      	mov	r0, sp
 800547e:	f7fc fb41 	bl	8001b04 <P2PS_STM_App_Notification>
              return_value = SVCCTL_EvtAckFlowEnable;
 8005482:	2001      	movs	r0, #1
    default:
      break;
  }

  return(return_value);
}/* end SVCCTL_EvtAckStatus_t */
 8005484:	b004      	add	sp, #16
 8005486:	bd10      	pop	{r4, pc}
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8005488:	2401      	movs	r4, #1
 800548a:	f88d 4000 	strb.w	r4, [sp]
 800548e:	e7f5      	b.n	800547c <PeerToPeer_Event_Handler+0x30>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8005490:	884b      	ldrh	r3, [r1, #2]
 8005492:	3301      	adds	r3, #1
 8005494:	429a      	cmp	r2, r3
 8005496:	d10e      	bne.n	80054b6 <PeerToPeer_Event_Handler+0x6a>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8005498:	4809      	ldr	r0, [pc, #36]	; (80054c0 <PeerToPeer_Event_Handler+0x74>)
 800549a:	f000 fe91 	bl	80061c0 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800549e:	2303      	movs	r3, #3
 80054a0:	f88d 3000 	strb.w	r3, [sp]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80054a4:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 80054a8:	f88d 3008 	strb.w	r3, [sp, #8]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80054ac:	340d      	adds	r4, #13
              P2PS_STM_App_Notification(&Notification);  
 80054ae:	4668      	mov	r0, sp
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80054b0:	9401      	str	r4, [sp, #4]
              P2PS_STM_App_Notification(&Notification);  
 80054b2:	f7fc fb27 	bl	8001b04 <P2PS_STM_App_Notification>
  return_value = SVCCTL_EvtNotAck;
 80054b6:	2000      	movs	r0, #0
 80054b8:	e7e4      	b.n	8005484 <PeerToPeer_Event_Handler+0x38>
 80054ba:	bf00      	nop
 80054bc:	2000020e 	.word	0x2000020e
 80054c0:	0800784f 	.word	0x0800784f

080054c4 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80054c8:	4825      	ldr	r0, [pc, #148]	; (8005560 <P2PS_STM_Init+0x9c>)
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_service(UUID_TYPE_128,
 80054ca:	4c26      	ldr	r4, [pc, #152]	; (8005564 <P2PS_STM_Init+0xa0>)
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80054cc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005574 <P2PS_STM_Init+0xb0>
 80054d0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8005578 <P2PS_STM_Init+0xb4>
 80054d4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800557c <P2PS_STM_Init+0xb8>
{
 80054d8:	b08a      	sub	sp, #40	; 0x28
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80054da:	f000 fb67 	bl	8005bac <SVCCTL_RegisterSvcHandler>
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80054de:	4a22      	ldr	r2, [pc, #136]	; (8005568 <P2PS_STM_Init+0xa4>)
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <P2PS_STM_Init+0xa8>)
 80054e2:	4923      	ldr	r1, [pc, #140]	; (8005570 <P2PS_STM_Init+0xac>)
    aci_gatt_add_service(UUID_TYPE_128,
 80054e4:	9400      	str	r4, [sp, #0]
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80054e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054ea:	f64f 6340 	movw	r3, #65088	; 0xfe40
 80054ee:	e9cd 1308 	strd	r1, r3, [sp, #32]
    aci_gatt_add_service(UUID_TYPE_128,
 80054f2:	2201      	movs	r2, #1
 80054f4:	a906      	add	r1, sp, #24
 80054f6:	2308      	movs	r3, #8
 80054f8:	2002      	movs	r0, #2
 80054fa:	f7ff fc57 	bl	8004dac <aci_gatt_add_service>
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80054fe:	f64f 6341 	movw	r3, #65089	; 0xfe41
 8005502:	e9cd 8308 	strd	r8, r3, [sp, #32]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8005506:	4623      	mov	r3, r4
 8005508:	2501      	movs	r5, #1
 800550a:	f833 0b02 	ldrh.w	r0, [r3], #2
 800550e:	9305      	str	r3, [sp, #20]
 8005510:	270a      	movs	r7, #10
 8005512:	2600      	movs	r6, #0
 8005514:	2306      	movs	r3, #6
 8005516:	e9cd 3600 	strd	r3, r6, [sp]
 800551a:	aa06      	add	r2, sp, #24
 800551c:	e9cd 7503 	strd	r7, r5, [sp, #12]
 8005520:	9502      	str	r5, [sp, #8]
 8005522:	2314      	movs	r3, #20
 8005524:	2102      	movs	r1, #2
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8005526:	e9cd a906 	strd	sl, r9, [sp, #24]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800552a:	f7ff fc8d 	bl	8004e48 <aci_gatt_add_char>

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800552e:	f834 0b04 	ldrh.w	r0, [r4], #4
 8005532:	9601      	str	r6, [sp, #4]
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8005534:	f64f 6342 	movw	r3, #65090	; 0xfe42
 8005538:	9309      	str	r3, [sp, #36]	; 0x24
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800553a:	2310      	movs	r3, #16
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8005542:	e9cd 5702 	strd	r5, r7, [sp, #8]
 8005546:	2314      	movs	r3, #20
 8005548:	aa06      	add	r2, sp, #24
 800554a:	2102      	movs	r1, #2
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800554c:	e9cd a906 	strd	sl, r9, [sp, #24]
 8005550:	f8cd 8020 	str.w	r8, [sp, #32]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8005554:	f7ff fc78 	bl	8004e48 <aci_gatt_add_char>
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
}
 8005558:	b00a      	add	sp, #40	; 0x28
 800555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555e:	bf00      	nop
 8005560:	0800544d 	.word	0x0800544d
 8005564:	2000020e 	.word	0x2000020e
 8005568:	d5b3e58f 	.word	0xd5b3e58f
 800556c:	984a7f2e 	.word	0x984a7f2e
 8005570:	cc7a482a 	.word	0xcc7a482a
 8005574:	8e224541 	.word	0x8e224541
 8005578:	ae82ed19 	.word	0xae82ed19
 800557c:	9d4c21ed 	.word	0x9d4c21ed

08005580 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 8005580:	4613      	mov	r3, r2
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 8005582:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8005586:	4290      	cmp	r0, r2
{
 8005588:	b513      	push	{r0, r1, r4, lr}
 800558a:	460c      	mov	r4, r1
  switch(UUID)
 800558c:	d108      	bne.n	80055a0 <P2PS_STM_App_Update_Int8+0x20>
  {
    case P2P_NOTIFY_CHAR_UUID:

     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800558e:	4805      	ldr	r0, [pc, #20]	; (80055a4 <P2PS_STM_App_Update_Int8+0x24>)
 8005590:	2200      	movs	r2, #0
 8005592:	8881      	ldrh	r1, [r0, #4]
 8005594:	8800      	ldrh	r0, [r0, #0]
 8005596:	9400      	str	r4, [sp, #0]
 8005598:	f7ff fcb0 	bl	8004efc <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}
 800559c:	b002      	add	sp, #8
 800559e:	bd10      	pop	{r4, pc}
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80055a0:	2042      	movs	r0, #66	; 0x42
 80055a2:	e7fb      	b.n	800559c <P2PS_STM_App_Update_Int8+0x1c>
 80055a4:	2000020e 	.word	0x2000020e

080055a8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80055a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80055aa:	f100 020c 	add.w	r2, r0, #12
 80055ae:	466b      	mov	r3, sp
 80055b0:	2121      	movs	r1, #33	; 0x21
 80055b2:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80055b6:	f000 f885 	bl	80056c4 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80055ba:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80055be:	b005      	add	sp, #20
 80055c0:	f85d fb04 	ldr.w	pc, [sp], #4

080055c4 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80055c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80055c6:	f100 020c 	add.w	r2, r0, #12
 80055ca:	466b      	mov	r3, sp
 80055cc:	210f      	movs	r1, #15
 80055ce:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80055d2:	f000 f877 	bl	80056c4 <shci_send>
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80055d6:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80055da:	b005      	add	sp, #20
 80055dc:	f85d fb04 	ldr.w	pc, [sp], #4

080055e0 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80055e0:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80055e2:	4c05      	ldr	r4, [pc, #20]	; (80055f8 <TlUserEvtReceived+0x18>)
 80055e4:	4601      	mov	r1, r0
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 f8c3 	bl	8005772 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80055ec:	4620      	mov	r0, r4

  return;
}
 80055ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80055f2:	f7fb b91e 	b.w	8000832 <shci_notify_asynch_evt>
 80055f6:	bf00      	nop
 80055f8:	20000220 	.word	0x20000220

080055fc <Cmd_SetStatus.constprop.4>:
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <Cmd_SetStatus.constprop.4+0x10>)
 80055fe:	2001      	movs	r0, #1
 8005600:	7218      	strb	r0, [r3, #8]
    if(StatusNotCallBackFunction != 0)
 8005602:	4b03      	ldr	r3, [pc, #12]	; (8005610 <Cmd_SetStatus.constprop.4+0x14>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	b103      	cbz	r3, 800560a <Cmd_SetStatus.constprop.4+0xe>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005608:	4718      	bx	r3
}
 800560a:	4770      	bx	lr
 800560c:	20000220 	.word	0x20000220
 8005610:	200012c0 	.word	0x200012c0

08005614 <shci_init>:
{
 8005614:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005616:	4c0e      	ldr	r4, [pc, #56]	; (8005650 <shci_init+0x3c>)
 8005618:	684b      	ldr	r3, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 800561a:	6220      	str	r0, [r4, #32]
{
 800561c:	460d      	mov	r5, r1
  shci_register_io_bus (&shciContext.io);
 800561e:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005620:	6023      	str	r3, [r4, #0]
  shci_register_io_bus (&shciContext.io);
 8005622:	f000 f883 	bl	800572c <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005626:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 8005628:	4d0a      	ldr	r5, [pc, #40]	; (8005654 <shci_init+0x40>)
  LST_init_head (&SHciAsynchEventQueue);
 800562a:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 800562c:	60ee      	str	r6, [r5, #12]
  LST_init_head (&SHciAsynchEventQueue);
 800562e:	f000 f887 	bl	8005740 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005632:	f7ff ffe3 	bl	80055fc <Cmd_SetStatus.constprop.4>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005636:	2301      	movs	r3, #1
 8005638:	742b      	strb	r3, [r5, #16]
  if (shciContext.io.Init)
 800563a:	6863      	ldr	r3, [r4, #4]
 800563c:	b133      	cbz	r3, 800564c <shci_init+0x38>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800563e:	4a06      	ldr	r2, [pc, #24]	; (8005658 <shci_init+0x44>)
 8005640:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005642:	4a06      	ldr	r2, [pc, #24]	; (800565c <shci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005644:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005646:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8005648:	a801      	add	r0, sp, #4
 800564a:	4798      	blx	r3
}
 800564c:	b004      	add	sp, #16
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	200012c0 	.word	0x200012c0
 8005654:	20000220 	.word	0x20000220
 8005658:	08005721 	.word	0x08005721
 800565c:	080055e1 	.word	0x080055e1

08005660 <shci_user_evt_proc>:
{
 8005660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005662:	4c16      	ldr	r4, [pc, #88]	; (80056bc <shci_user_evt_proc+0x5c>)
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f86e 	bl	8005746 <LST_is_empty>
 800566a:	b9c0      	cbnz	r0, 800569e <shci_user_evt_proc+0x3e>
 800566c:	7c23      	ldrb	r3, [r4, #16]
 800566e:	b1b3      	cbz	r3, 800569e <shci_user_evt_proc+0x3e>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005670:	a901      	add	r1, sp, #4
 8005672:	4620      	mov	r0, r4
 8005674:	f000 f894 	bl	80057a0 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <shci_user_evt_proc+0x60>)
    OutputEvtTrace(phcievtbuffer);
 800567a:	9901      	ldr	r1, [sp, #4]
    if (shciContext.UserEvtRx != NULL)
 800567c:	6a1a      	ldr	r2, [r3, #32]
 800567e:	2301      	movs	r3, #1
 8005680:	b132      	cbz	r2, 8005690 <shci_user_evt_proc+0x30>
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005682:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 8005684:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005686:	f800 3d08 	strb.w	r3, [r0, #-8]!
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800568a:	4790      	blx	r2
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800568c:	f89d 3008 	ldrb.w	r3, [sp, #8]
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005690:	7423      	strb	r3, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005692:	7c23      	ldrb	r3, [r4, #16]
 8005694:	9901      	ldr	r1, [sp, #4]
 8005696:	b16b      	cbz	r3, 80056b4 <shci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 8005698:	4608      	mov	r0, r1
 800569a:	f000 fba1 	bl	8005de0 <TL_MM_EvtDone>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800569e:	4807      	ldr	r0, [pc, #28]	; (80056bc <shci_user_evt_proc+0x5c>)
 80056a0:	f000 f851 	bl	8005746 <LST_is_empty>
 80056a4:	b920      	cbnz	r0, 80056b0 <shci_user_evt_proc+0x50>
 80056a6:	7c23      	ldrb	r3, [r4, #16]
 80056a8:	b113      	cbz	r3, 80056b0 <shci_user_evt_proc+0x50>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80056aa:	4804      	ldr	r0, [pc, #16]	; (80056bc <shci_user_evt_proc+0x5c>)
 80056ac:	f7fb f8c1 	bl	8000832 <shci_notify_asynch_evt>
}
 80056b0:	b004      	add	sp, #16
 80056b2:	bd10      	pop	{r4, pc}
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <shci_user_evt_proc+0x5c>)
 80056b6:	f000 f850 	bl	800575a <LST_insert_head>
 80056ba:	e7f0      	b.n	800569e <shci_user_evt_proc+0x3e>
 80056bc:	20000220 	.word	0x20000220
 80056c0:	200012c0 	.word	0x200012c0

080056c4 <shci_send>:
{
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(StatusNotCallBackFunction != 0)
 80056c8:	4c13      	ldr	r4, [pc, #76]	; (8005718 <shci_send+0x54>)
{
 80056ca:	4698      	mov	r8, r3
    if(StatusNotCallBackFunction != 0)
 80056cc:	6823      	ldr	r3, [r4, #0]
{
 80056ce:	4681      	mov	r9, r0
 80056d0:	460f      	mov	r7, r1
 80056d2:	4692      	mov	sl, r2
    if(StatusNotCallBackFunction != 0)
 80056d4:	b10b      	cbz	r3, 80056da <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80056d6:	2000      	movs	r0, #0
 80056d8:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80056da:	4d10      	ldr	r5, [pc, #64]	; (800571c <shci_send+0x58>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80056dc:	68e8      	ldr	r0, [r5, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80056de:	463a      	mov	r2, r7
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80056e0:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80056e2:	f8a0 9009 	strh.w	r9, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80056e6:	72c7      	strb	r7, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80056e8:	4651      	mov	r1, sl
 80056ea:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80056ec:	722e      	strb	r6, [r5, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80056ee:	f000 fcdf 	bl	80060b0 <memcpy>
  shciContext.io.Send(0,0);
 80056f2:	6963      	ldr	r3, [r4, #20]
 80056f4:	4631      	mov	r1, r6
 80056f6:	4630      	mov	r0, r6
 80056f8:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80056fa:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80056fe:	f7fb f89f 	bl	8000840 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005702:	68e9      	ldr	r1, [r5, #12]
 8005704:	788a      	ldrb	r2, [r1, #2]
 8005706:	f108 0008 	add.w	r0, r8, #8
 800570a:	3203      	adds	r2, #3
 800570c:	f000 fcd0 	bl	80060b0 <memcpy>
}
 8005710:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005714:	f7ff bf72 	b.w	80055fc <Cmd_SetStatus.constprop.4>
 8005718:	200012c0 	.word	0x200012c0
 800571c:	20000220 	.word	0x20000220

08005720 <TlCmdEvtReceived>:
{
 8005720:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005722:	2000      	movs	r0, #0
 8005724:	f7fb f889 	bl	800083a <shci_cmd_resp_release>
}
 8005728:	bd08      	pop	{r3, pc}
	...

0800572c <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800572c:	4b02      	ldr	r3, [pc, #8]	; (8005738 <shci_register_io_bus+0xc>)
 800572e:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005730:	4b02      	ldr	r3, [pc, #8]	; (800573c <shci_register_io_bus+0x10>)
 8005732:	6103      	str	r3, [r0, #16]

  return;
}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	08005d15 	.word	0x08005d15
 800573c:	08005d49 	.word	0x08005d49

08005740 <LST_init_head>:
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;
 8005740:	e9c0 0000 	strd	r0, r0, [r0]
}
 8005744:	4770      	bx	lr

08005746 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005746:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800574a:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800574c:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 800574e:	1a1b      	subs	r3, r3, r0
 8005750:	4258      	negs	r0, r3
 8005752:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005754:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8005758:	4770      	bx	lr

0800575a <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800575e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005760:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 8005762:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 8005766:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8005768:	680a      	ldr	r2, [r1, #0]
 800576a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005770:	4770      	bx	lr

08005772 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005772:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005776:	b672      	cpsid	i

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
  node->prev = listHead->prev;
 8005778:	6842      	ldr	r2, [r0, #4]
 800577a:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 800577c:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 800577e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8005780:	684a      	ldr	r2, [r1, #4]
 8005782:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005784:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005788:	4770      	bx	lr

0800578a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800578e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005790:	e9d0 1300 	ldrd	r1, r3, [r0]
 8005794:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8005796:	6801      	ldr	r1, [r0, #0]
 8005798:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800579e:	4770      	bx	lr

080057a0 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80057a0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80057a6:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80057a8:	6803      	ldr	r3, [r0, #0]
 80057aa:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f7ff ffec 	bl	800578a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80057b6:	bd10      	pop	{r4, pc}

080057b8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80057b8:	b510      	push	{r4, lr}
 80057ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
  q->qBuff = queueBuffer;
 80057be:	6001      	str	r1, [r0, #0]
  q->first = 0;
 80057c0:	2100      	movs	r1, #0
  q->last = 0; /* queueSize-1; */
 80057c2:	e9c0 1103 	strd	r1, r1, [r0, #12]
  q->byteCount = 0;
  q->elementCount = 0;
 80057c6:	e9c0 1105 	strd	r1, r1, [r0, #20]
  q->queueMaxSize = queueSize;
 80057ca:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 80057cc:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 80057ce:	7704      	strb	r4, [r0, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80057d0:	f014 0002 	ands.w	r0, r4, #2
 80057d4:	d003      	beq.n	80057de <CircularQueue_Init+0x26>
 80057d6:	1a58      	subs	r0, r3, r1
 80057d8:	bf18      	it	ne
 80057da:	2001      	movne	r0, #1
 80057dc:	4240      	negs	r0, r0
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
}
 80057de:	bd10      	pop	{r4, pc}

080057e0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80057e4:	8905      	ldrh	r5, [r0, #8]
{
 80057e6:	4604      	mov	r4, r0
 80057e8:	468b      	mov	fp, r1
 80057ea:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80057ee:	b085      	sub	sp, #20
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80057f0:	2d00      	cmp	r5, #0
{
 80057f2:	9302      	str	r3, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80057f4:	bf14      	ite	ne
 80057f6:	f04f 0800 	movne.w	r8, #0
 80057fa:	f04f 0802 	moveq.w	r8, #2
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80057fe:	2900      	cmp	r1, #0
 8005800:	d033      	beq.n	800586a <CircularQueue_Add+0x8a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8005802:	2d00      	cmp	r5, #0
 8005804:	d134      	bne.n	8005870 <CircularQueue_Add+0x90>
 8005806:	6866      	ldr	r6, [r4, #4]
 8005808:	6825      	ldr	r5, [r4, #0]
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	42b3      	cmp	r3, r6
 800580e:	bf28      	it	cs
 8005810:	1b9b      	subcs	r3, r3, r6
 8005812:	5c2f      	ldrb	r7, [r5, r0]
 8005814:	5ceb      	ldrb	r3, [r5, r3]
 8005816:	3702      	adds	r7, #2
 8005818:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 800581c:	b2bf      	uxth	r7, r7
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800581e:	4615      	mov	r5, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8005820:	68e3      	ldr	r3, [r4, #12]
 8005822:	4283      	cmp	r3, r0
 8005824:	bf9e      	ittt	ls
 8005826:	6863      	ldrls	r3, [r4, #4]
 8005828:	1a1b      	subls	r3, r3, r0
 800582a:	1bda      	subls	r2, r3, r7

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800582c:	9b02      	ldr	r3, [sp, #8]
 800582e:	eb05 0008 	add.w	r0, r5, r8
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8005832:	bf88      	it	hi
 8005834:	2200      	movhi	r2, #0
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8005836:	fb03 f600 	mul.w	r6, r3, r0
 800583a:	4296      	cmp	r6, r2
 800583c:	d31c      	bcc.n	8005878 <CircularQueue_Add+0x98>
 800583e:	fbb2 f3f0 	udiv	r3, r2, r0
 8005842:	fb00 2313 	mls	r3, r0, r3, r2
 8005846:	b2db      	uxtb	r3, r3
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8005848:	4598      	cmp	r8, r3
 800584a:	d215      	bcs.n	8005878 <CircularQueue_Add+0x98>
 800584c:	7f22      	ldrb	r2, [r4, #28]
 800584e:	f012 0f01 	tst.w	r2, #1
 8005852:	bf08      	it	eq
 8005854:	2300      	moveq	r3, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8005856:	0790      	lsls	r0, r2, #30
 8005858:	bf54      	ite	pl
 800585a:	b29b      	uxthpl	r3, r3
 800585c:	fa1f f388 	uxthmi.w	r3, r8
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8005860:	b965      	cbnz	r5, 800587c <CircularQueue_Add+0x9c>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 8005862:	2000      	movs	r0, #0
  }
  return ptr;
}
 8005864:	b005      	add	sp, #20
 8005866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (q->elementSize > 0)               
 800586a:	b91d      	cbnz	r5, 8005874 <CircularQueue_Add+0x94>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800586c:	462f      	mov	r7, r5
 800586e:	e7d6      	b.n	800581e <CircularQueue_Add+0x3e>
 8005870:	462f      	mov	r7, r5
 8005872:	e7d5      	b.n	8005820 <CircularQueue_Add+0x40>
 8005874:	460f      	mov	r7, r1
 8005876:	e7d3      	b.n	8005820 <CircularQueue_Add+0x40>
 8005878:	2300      	movs	r3, #0
 800587a:	e7f1      	b.n	8005860 <CircularQueue_Add+0x80>
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800587c:	4431      	add	r1, r6
 800587e:	6862      	ldr	r2, [r4, #4]
 8005880:	440b      	add	r3, r1
 8005882:	4293      	cmp	r3, r2
 8005884:	d8ed      	bhi.n	8005862 <CircularQueue_Add+0x82>
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8005886:	0a2b      	lsrs	r3, r5, #8
 8005888:	9301      	str	r3, [sp, #4]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800588a:	eb05 0308 	add.w	r3, r5, r8
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800588e:	f04f 0a00 	mov.w	sl, #0
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8005892:	b29b      	uxth	r3, r3
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8005894:	46d1      	mov	r9, sl
    for (i=0; i < nbElements; i++) 
 8005896:	f8cd a000 	str.w	sl, [sp]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800589a:	9303      	str	r3, [sp, #12]
    for (i=0; i < nbElements; i++) 
 800589c:	9b00      	ldr	r3, [sp, #0]
 800589e:	9902      	ldr	r1, [sp, #8]
 80058a0:	6920      	ldr	r0, [r4, #16]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	428b      	cmp	r3, r1
 80058a6:	d106      	bne.n	80058b6 <CircularQueue_Add+0xd6>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80058a8:	4440      	add	r0, r8
 80058aa:	4290      	cmp	r0, r2
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	bf28      	it	cs
 80058b0:	1a80      	subcs	r0, r0, r2
 80058b2:	4418      	add	r0, r3
  return ptr;
 80058b4:	e7d6      	b.n	8005864 <CircularQueue_Add+0x84>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80058b6:	4438      	add	r0, r7
 80058b8:	4290      	cmp	r0, r2
      if (q->elementSize == 0) 
 80058ba:	8923      	ldrh	r3, [r4, #8]
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80058bc:	bf28      	it	cs
 80058be:	1a80      	subcs	r0, r0, r2
 80058c0:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 80058c2:	b98b      	cbnz	r3, 80058e8 <CircularQueue_Add+0x108>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80058c4:	6822      	ldr	r2, [r4, #0]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80058c6:	9901      	ldr	r1, [sp, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80058c8:	5415      	strb	r5, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80058ca:	6862      	ldr	r2, [r4, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80058cc:	1c43      	adds	r3, r0, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80058ce:	429a      	cmp	r2, r3
 80058d0:	bf98      	it	ls
 80058d2:	1a9b      	subls	r3, r3, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	54d1      	strb	r1, [r2, r3]
 80058d8:	1c58      	adds	r0, r3, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	4283      	cmp	r3, r0
 80058de:	bf98      	it	ls
 80058e0:	1ac0      	subls	r0, r0, r3
        q->byteCount += 2;
 80058e2:	6963      	ldr	r3, [r4, #20]
 80058e4:	3302      	adds	r3, #2
 80058e6:	6163      	str	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	1a1b      	subs	r3, r3, r0
 80058ec:	429d      	cmp	r5, r3
 80058ee:	462e      	mov	r6, r5
 80058f0:	bf28      	it	cs
 80058f2:	461e      	movcs	r6, r3
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80058f4:	429d      	cmp	r5, r3
 80058f6:	d903      	bls.n	8005900 <CircularQueue_Add+0x120>
 80058f8:	42b5      	cmp	r5, r6
 80058fa:	7f23      	ldrb	r3, [r4, #28]
 80058fc:	d924      	bls.n	8005948 <CircularQueue_Add+0x168>
 80058fe:	bb0b      	cbnz	r3, 8005944 <CircularQueue_Add+0x164>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	4632      	mov	r2, r6
 8005904:	4418      	add	r0, r3
 8005906:	eb0b 010a 	add.w	r1, fp, sl
 800590a:	f000 fbd1 	bl	80060b0 <memcpy>
        q->byteCount += NbBytesToCopy;
 800590e:	6963      	ldr	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8005910:	9f03      	ldr	r7, [sp, #12]
        q->byteCount += NbBytesToCopy;
 8005912:	4433      	add	r3, r6
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8005914:	46b1      	mov	r9, r6
        q->byteCount += NbBytesToCopy;
 8005916:	6163      	str	r3, [r4, #20]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8005918:	1bae      	subs	r6, r5, r6
        curBuffPosition = 0; 
 800591a:	2000      	movs	r0, #0
      if (NbBytesToCopy)      
 800591c:	b156      	cbz	r6, 8005934 <CircularQueue_Add+0x154>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	eb09 010a 	add.w	r1, r9, sl
 8005924:	4632      	mov	r2, r6
 8005926:	4418      	add	r0, r3
 8005928:	4459      	add	r1, fp
 800592a:	f000 fbc1 	bl	80060b0 <memcpy>
        q->byteCount += NbBytesToCopy;
 800592e:	6963      	ldr	r3, [r4, #20]
 8005930:	441e      	add	r6, r3
 8005932:	6166      	str	r6, [r4, #20]
      q->elementCount++;
 8005934:	69a3      	ldr	r3, [r4, #24]
 8005936:	3301      	adds	r3, #1
 8005938:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 800593a:	9b00      	ldr	r3, [sp, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	44aa      	add	sl, r5
 8005942:	e7ab      	b.n	800589c <CircularQueue_Add+0xbc>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8005944:	2e00      	cmp	r6, #0
 8005946:	d0f5      	beq.n	8005934 <CircularQueue_Add+0x154>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8005948:	07da      	lsls	r2, r3, #31
 800594a:	d521      	bpl.n	8005990 <CircularQueue_Add+0x1b0>
          if (q->elementSize == 0)
 800594c:	8923      	ldrh	r3, [r4, #8]
 800594e:	b943      	cbnz	r3, 8005962 <CircularQueue_Add+0x182>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	4403      	add	r3, r0
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	f803 2c02 	strb.w	r2, [r3, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	4418      	add	r0, r3
 800595e:	f800 2c01 	strb.w	r2, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8005962:	6963      	ldr	r3, [r4, #20]
          if (q->elementSize == 0)
 8005964:	8922      	ldrh	r2, [r4, #8]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8005966:	441e      	add	r6, r3
 8005968:	6166      	str	r6, [r4, #20]
          if (q->elementSize == 0)
 800596a:	2a00      	cmp	r2, #0
 800596c:	d138      	bne.n	80059e0 <CircularQueue_Add+0x200>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800596e:	6823      	ldr	r3, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005970:	9901      	ldr	r1, [sp, #4]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8005972:	701d      	strb	r5, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	7059      	strb	r1, [r3, #1]
            q->byteCount += 2;   
 8005978:	6963      	ldr	r3, [r4, #20]
 800597a:	3302      	adds	r3, #2
 800597c:	6163      	str	r3, [r4, #20]
 800597e:	462e      	mov	r6, r5
          NbCopiedBytes = 0;
 8005980:	4691      	mov	r9, r2
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005982:	2002      	movs	r0, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8005984:	eb08 0706 	add.w	r7, r8, r6
        q->last = 0;        
 8005988:	2300      	movs	r3, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800598a:	b2bf      	uxth	r7, r7
        q->last = 0;        
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	e7c5      	b.n	800591c <CircularQueue_Add+0x13c>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8005990:	079b      	lsls	r3, r3, #30
 8005992:	d5f7      	bpl.n	8005984 <CircularQueue_Add+0x1a4>
          if (q->elementSize == 0)
 8005994:	8923      	ldrh	r3, [r4, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f47f af63 	bne.w	8005862 <CircularQueue_Add+0x82>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	4403      	add	r3, r0
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80059a0:	0a32      	lsrs	r2, r6, #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80059a2:	f803 6c02 	strb.w	r6, [r3, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	4403      	add	r3, r0
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80059aa:	eb0b 010a 	add.w	r1, fp, sl
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80059ae:	f803 2c01 	strb.w	r2, [r3, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	4632      	mov	r2, r6
 80059b6:	4418      	add	r0, r3
 80059b8:	f000 fb7a 	bl	80060b0 <memcpy>
             q->elementCount++;
 80059bc:	69a2      	ldr	r2, [r4, #24]
             q->byteCount += NbBytesToCopy; 
 80059be:	6963      	ldr	r3, [r4, #20]
             q->elementCount++;
 80059c0:	3201      	adds	r2, #1
             q->byteCount += NbBytesToCopy; 
 80059c2:	4433      	add	r3, r6
             q->elementCount++;
 80059c4:	61a2      	str	r2, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80059c6:	6822      	ldr	r2, [r4, #0]
             q->byteCount += NbBytesToCopy; 
 80059c8:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80059ca:	1bab      	subs	r3, r5, r6
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80059cc:	7013      	strb	r3, [r2, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	0a19      	lsrs	r1, r3, #8
 80059d2:	7051      	strb	r1, [r2, #1]
             q->byteCount += 2;              
 80059d4:	6962      	ldr	r2, [r4, #20]
 80059d6:	3202      	adds	r2, #2
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80059d8:	46b1      	mov	r9, r6
             q->byteCount += 2;              
 80059da:	6162      	str	r2, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80059dc:	461e      	mov	r6, r3
 80059de:	e7d0      	b.n	8005982 <CircularQueue_Add+0x1a2>
          NbCopiedBytes = 0;
 80059e0:	f04f 0900 	mov.w	r9, #0
 80059e4:	462e      	mov	r6, r5
          curBuffPosition = 0; 
 80059e6:	4648      	mov	r0, r9
 80059e8:	e7cc      	b.n	8005984 <CircularQueue_Add+0x1a4>

080059ea <CircularQueue_Remove>:
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80059ea:	8902      	ldrh	r2, [r0, #8]
{
 80059ec:	4603      	mov	r3, r0
  *elementSize = 0;
  if (q->byteCount > 0) 
 80059ee:	6940      	ldr	r0, [r0, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80059f0:	2a00      	cmp	r2, #0
  *elementSize = 0;
 80059f2:	f04f 0200 	mov.w	r2, #0
{
 80059f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80059f8:	bf14      	ite	ne
 80059fa:	2600      	movne	r6, #0
 80059fc:	2602      	moveq	r6, #2
  *elementSize = 0;
 80059fe:	800a      	strh	r2, [r1, #0]
  if (q->byteCount > 0) 
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d052      	beq.n	8005aaa <CircularQueue_Remove+0xc0>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005a04:	891d      	ldrh	r5, [r3, #8]
 8005a06:	681f      	ldr	r7, [r3, #0]
 8005a08:	68dc      	ldr	r4, [r3, #12]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	b95d      	cbnz	r5, 8005a26 <CircularQueue_Remove+0x3c>
 8005a0e:	f104 0c01 	add.w	ip, r4, #1
 8005a12:	4594      	cmp	ip, r2
 8005a14:	bf28      	it	cs
 8005a16:	ebac 0c02 	subcs.w	ip, ip, r2
 8005a1a:	5d3d      	ldrb	r5, [r7, r4]
 8005a1c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8005a20:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8005a24:	b2ad      	uxth	r5, r5
 8005a26:	800d      	strh	r5, [r1, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8005a28:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8005a2c:	f00c 0c03 	and.w	ip, ip, #3
 8005a30:	f1bc 0f01 	cmp.w	ip, #1
 8005a34:	d120      	bne.n	8005a78 <CircularQueue_Remove+0x8e>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8005a36:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8005a3a:	4565      	cmp	r5, ip
 8005a3c:	d101      	bne.n	8005a42 <CircularQueue_Remove+0x58>
 8005a3e:	891d      	ldrh	r5, [r3, #8]
 8005a40:	b145      	cbz	r5, 8005a54 <CircularQueue_Remove+0x6a>
 8005a42:	691d      	ldr	r5, [r3, #16]
 8005a44:	42a5      	cmp	r5, r4
 8005a46:	d217      	bcs.n	8005a78 <CircularQueue_Remove+0x8e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8005a48:	891d      	ldrh	r5, [r3, #8]
 8005a4a:	b1ad      	cbz	r5, 8005a78 <CircularQueue_Remove+0x8e>
 8005a4c:	eba2 0c04 	sub.w	ip, r2, r4
 8005a50:	45ac      	cmp	ip, r5
 8005a52:	d211      	bcs.n	8005a78 <CircularQueue_Remove+0x8e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8005a54:	4404      	add	r4, r0
 8005a56:	1aa4      	subs	r4, r4, r2
 8005a58:	615c      	str	r4, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005a5a:	891c      	ldrh	r4, [r3, #8]
          q->first = 0;
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	60d8      	str	r0, [r3, #12]
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005a60:	b94c      	cbnz	r4, 8005a76 <CircularQueue_Remove+0x8c>
 8005a62:	2a01      	cmp	r2, #1
 8005a64:	bf94      	ite	ls
 8005a66:	f1c2 0001 	rsbls	r0, r2, #1
 8005a6a:	2001      	movhi	r0, #1
 8005a6c:	783c      	ldrb	r4, [r7, #0]
 8005a6e:	5c38      	ldrb	r0, [r7, r0]
 8005a70:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8005a74:	b2a4      	uxth	r4, r4
 8005a76:	800c      	strh	r4, [r1, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a78:	f8d3 c00c 	ldr.w	ip, [r3, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a7c:	880c      	ldrh	r4, [r1, #0]
 8005a7e:	695d      	ldr	r5, [r3, #20]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a80:	eb0c 0006 	add.w	r0, ip, r6
 8005a84:	4290      	cmp	r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a86:	eb04 0106 	add.w	r1, r4, r6
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a8a:	bf28      	it	cs
 8005a8c:	1a80      	subcs	r0, r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a8e:	1a6d      	subs	r5, r5, r1
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a90:	4438      	add	r0, r7
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a92:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8005a94:	b135      	cbz	r5, 8005aa4 <CircularQueue_Remove+0xba>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8005a96:	eb04 010c 	add.w	r1, r4, ip
 8005a9a:	4431      	add	r1, r6
 8005a9c:	4291      	cmp	r1, r2
 8005a9e:	bf28      	it	cs
 8005aa0:	1a89      	subcs	r1, r1, r2
 8005aa2:	60d9      	str	r1, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	3a01      	subs	r2, #1
 8005aa8:	619a      	str	r2, [r3, #24]
  }
  return ptr;
}
 8005aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aac <CircularQueue_Sense>:
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8005aac:	8903      	ldrh	r3, [r0, #8]
 8005aae:	2b00      	cmp	r3, #0
  *elementSize = 0;
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	800b      	strh	r3, [r1, #0]
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 8005ab6:	6943      	ldr	r3, [r0, #20]
{
 8005ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8005aba:	bf14      	ite	ne
 8005abc:	2500      	movne	r5, #0
 8005abe:	2502      	moveq	r5, #2
  if (q->byteCount > 0) 
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d035      	beq.n	8005b30 <CircularQueue_Sense+0x84>
  {
    FirstElemetPos = q->first;
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005ac4:	8902      	ldrh	r2, [r0, #8]
    FirstElemetPos = q->first;
 8005ac6:	68c6      	ldr	r6, [r0, #12]
 8005ac8:	e9d0 3400 	ldrd	r3, r4, [r0]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005acc:	b942      	cbnz	r2, 8005ae0 <CircularQueue_Sense+0x34>
 8005ace:	1c77      	adds	r7, r6, #1
 8005ad0:	42a7      	cmp	r7, r4
 8005ad2:	bf28      	it	cs
 8005ad4:	1b3f      	subcs	r7, r7, r4
 8005ad6:	5d9a      	ldrb	r2, [r3, r6]
 8005ad8:	5ddf      	ldrb	r7, [r3, r7]
 8005ada:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	800a      	strh	r2, [r1, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8005ae2:	7f07      	ldrb	r7, [r0, #28]
 8005ae4:	f007 0703 	and.w	r7, r7, #3
 8005ae8:	2f01      	cmp	r7, #1
 8005aea:	d11b      	bne.n	8005b24 <CircularQueue_Sense+0x78>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8005aec:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005af0:	42ba      	cmp	r2, r7
 8005af2:	d101      	bne.n	8005af8 <CircularQueue_Sense+0x4c>
 8005af4:	8902      	ldrh	r2, [r0, #8]
 8005af6:	b13a      	cbz	r2, 8005b08 <CircularQueue_Sense+0x5c>
 8005af8:	6902      	ldr	r2, [r0, #16]
 8005afa:	42b2      	cmp	r2, r6
 8005afc:	d212      	bcs.n	8005b24 <CircularQueue_Sense+0x78>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8005afe:	8902      	ldrh	r2, [r0, #8]
 8005b00:	b182      	cbz	r2, 8005b24 <CircularQueue_Sense+0x78>
 8005b02:	1ba7      	subs	r7, r4, r6
 8005b04:	4297      	cmp	r7, r2
 8005b06:	d20d      	bcs.n	8005b24 <CircularQueue_Sense+0x78>
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005b08:	8902      	ldrh	r2, [r0, #8]
 8005b0a:	b94a      	cbnz	r2, 8005b20 <CircularQueue_Sense+0x74>
 8005b0c:	2c01      	cmp	r4, #1
 8005b0e:	bf94      	ite	ls
 8005b10:	f1c4 0001 	rsbls	r0, r4, #1
 8005b14:	2001      	movhi	r0, #1
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	5c18      	ldrb	r0, [r3, r0]
 8005b1a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	800a      	strh	r2, [r1, #0]
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8005b22:	2600      	movs	r6, #0
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8005b24:	19a8      	adds	r0, r5, r6
 8005b26:	42a0      	cmp	r0, r4
 8005b28:	bf28      	it	cs
 8005b2a:	1b00      	subcs	r0, r0, r4
 8005b2c:	4418      	add	r0, r3
  }
  return x;
}
 8005b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t* x= NULL;
 8005b30:	4618      	mov	r0, r3
  return x;
 8005b32:	e7fc      	b.n	8005b2e <CircularQueue_Sense+0x82>

08005b34 <BLS_Init>:
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
  return;
}
 8005b34:	4770      	bx	lr

08005b36 <CRS_STM_Init>:
 8005b36:	4770      	bx	lr

08005b38 <DIS_Init>:
 8005b38:	4770      	bx	lr

08005b3a <EDS_STM_Init>:
 8005b3a:	4770      	bx	lr

08005b3c <HIDS_Init>:
 8005b3c:	4770      	bx	lr

08005b3e <HRS_Init>:
 8005b3e:	4770      	bx	lr

08005b40 <HTS_Init>:
 8005b40:	4770      	bx	lr

08005b42 <IAS_Init>:
 8005b42:	4770      	bx	lr

08005b44 <LLS_Init>:
 8005b44:	4770      	bx	lr

08005b46 <TPS_Init>:
 8005b46:	4770      	bx	lr

08005b48 <MOTENV_STM_Init>:
 8005b48:	4770      	bx	lr

08005b4a <OTAS_STM_Init>:
 8005b4a:	4770      	bx	lr

08005b4c <MESH_Init>:
 8005b4c:	4770      	bx	lr

08005b4e <BVOPUS_STM_Init>:
 8005b4e:	4770      	bx	lr

08005b50 <SVCCTL_InitCustomSvc>:
 8005b50:	4770      	bx	lr

08005b52 <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 8005b52:	b508      	push	{r3, lr}
  BLS_Init();
 8005b54:	f7ff ffee 	bl	8005b34 <BLS_Init>

  CRS_STM_Init();
 8005b58:	f7ff ffed 	bl	8005b36 <CRS_STM_Init>

  DIS_Init();
 8005b5c:	f7ff ffec 	bl	8005b38 <DIS_Init>

  EDS_STM_Init();
 8005b60:	f7ff ffeb 	bl	8005b3a <EDS_STM_Init>

  HIDS_Init();
 8005b64:	f7ff ffea 	bl	8005b3c <HIDS_Init>

  HRS_Init();
 8005b68:	f7ff ffe9 	bl	8005b3e <HRS_Init>

  HTS_Init();
 8005b6c:	f7ff ffe8 	bl	8005b40 <HTS_Init>

  IAS_Init();
 8005b70:	f7ff ffe7 	bl	8005b42 <IAS_Init>

  LLS_Init();
 8005b74:	f7ff ffe6 	bl	8005b44 <LLS_Init>

  TPS_Init();
 8005b78:	f7ff ffe5 	bl	8005b46 <TPS_Init>

  MOTENV_STM_Init();
 8005b7c:	f7ff ffe4 	bl	8005b48 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005b80:	f7ff fca0 	bl	80054c4 <P2PS_STM_Init>

  OTAS_STM_Init();
 8005b84:	f7ff ffe1 	bl	8005b4a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005b88:	f7ff ffe1 	bl	8005b4e <BVOPUS_STM_Init>

  MESH_Init();
 8005b8c:	f7ff ffde 	bl	8005b4c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005b90:	f7ff ffde 	bl	8005b50 <SVCCTL_InitCustomSvc>
  
  return;
}
 8005b94:	bd08      	pop	{r3, pc}
	...

08005b98 <SVCCTL_Init>:
{
 8005b98:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005b9a:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <SVCCTL_Init+0x10>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005ba0:	721a      	strb	r2, [r3, #8]
  SVCCTL_SvcInit();
 8005ba2:	f7ff ffd6 	bl	8005b52 <SVCCTL_SvcInit>
}
 8005ba6:	bd08      	pop	{r3, pc}
 8005ba8:	20000214 	.word	0x20000214

08005bac <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005bac:	4a03      	ldr	r2, [pc, #12]	; (8005bbc <SVCCTL_RegisterSvcHandler+0x10>)
 8005bae:	7913      	ldrb	r3, [r2, #4]
 8005bb0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	7113      	strb	r3, [r2, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000214 	.word	0x20000214

08005bc0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005bc0:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8005bc2:	7843      	ldrb	r3, [r0, #1]
 8005bc4:	2bff      	cmp	r3, #255	; 0xff
{
 8005bc6:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8005bc8:	d106      	bne.n	8005bd8 <SVCCTL_UserEvtRx+0x18>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005bca:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8005bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd6:	d004      	beq.n	8005be2 <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005bd8:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 8005bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 8005bde:	f7fb be13 	b.w	8001808 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005be2:	4e08      	ldr	r6, [pc, #32]	; (8005c04 <SVCCTL_UserEvtRx+0x44>)
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005be4:	2500      	movs	r5, #0
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005be6:	7932      	ldrb	r2, [r6, #4]
 8005be8:	b2eb      	uxtb	r3, r5
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d9f4      	bls.n	8005bd8 <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005bee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4798      	blx	r3
 8005bf6:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d0f4      	beq.n	8005be6 <SVCCTL_UserEvtRx+0x26>
      return_status = SVCCTL_UserEvtFlowEnable;
 8005bfc:	3802      	subs	r0, #2
 8005bfe:	bf18      	it	ne
 8005c00:	2001      	movne	r0, #1
}
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	20000214 	.word	0x20000214

08005c08 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8005c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005c0a:	4c09      	ldr	r4, [pc, #36]	; (8005c30 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005c0c:	4d09      	ldr	r5, [pc, #36]	; (8005c34 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005c0e:	4808      	ldr	r0, [pc, #32]	; (8005c30 <SendFreeBuf+0x28>)
 8005c10:	f7ff fd99 	bl	8005746 <LST_is_empty>
 8005c14:	b108      	cbz	r0, 8005c1a <SendFreeBuf+0x12>
  }

  return;
}
 8005c16:	b003      	add	sp, #12
 8005c18:	bd30      	pop	{r4, r5, pc}
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005c1a:	a901      	add	r1, sp, #4
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f7ff fdbf 	bl	80057a0 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005c22:	692b      	ldr	r3, [r5, #16]
 8005c24:	9901      	ldr	r1, [sp, #4]
 8005c26:	6918      	ldr	r0, [r3, #16]
 8005c28:	f7ff fda3 	bl	8005772 <LST_insert_tail>
 8005c2c:	e7ef      	b.n	8005c0e <SendFreeBuf+0x6>
 8005c2e:	bf00      	nop
 8005c30:	200012e8 	.word	0x200012e8
 8005c34:	20030000 	.word	0x20030000

08005c38 <TL_Enable>:
  HW_IPCC_Enable();
 8005c38:	f7fc b82e 	b.w	8001c98 <HW_IPCC_Enable>

08005c3c <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <TL_Init+0x40>)
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <TL_Init+0x44>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005c40:	f103 0120 	add.w	r1, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005c44:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005c46:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c4c:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005c4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005c52:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8005c54:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8005c58:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005c5a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8005c5e:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005c60:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005c64:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005c66:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8005c6a:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005c6c:	f103 0174 	add.w	r1, r3, #116	; 0x74
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005c70:	3380      	adds	r3, #128	; 0x80
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005c72:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005c74:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 8005c76:	f7fc b827 	b.w	8001cc8 <HW_IPCC_Init>
 8005c7a:	bf00      	nop
 8005c7c:	20030134 	.word	0x20030134
 8005c80:	20030000 	.word	0x20030000

08005c84 <TL_BLE_Init>:
{
 8005c84:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 8005c86:	4d0c      	ldr	r5, [pc, #48]	; (8005cb8 <TL_BLE_Init+0x34>)
{
 8005c88:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7ff fd58 	bl	8005740 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005c92:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 8005c94:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005c96:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005c98:	68e2      	ldr	r2, [r4, #12]
 8005c9a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005c9c:	f105 0208 	add.w	r2, r5, #8
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005ca0:	e9c3 2501 	strd	r2, r5, [r3, #4]
  HW_IPCC_BLE_Init();
 8005ca4:	f7fc f830 	bl	8001d08 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <TL_BLE_Init+0x3c>)
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	609a      	str	r2, [r3, #8]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005cae:	6862      	ldr	r2, [r4, #4]
 8005cb0:	60da      	str	r2, [r3, #12]
}
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	bd38      	pop	{r3, r4, r5, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20030a38 	.word	0x20030a38
 8005cbc:	20030000 	.word	0x20030000
 8005cc0:	200012e8 	.word	0x200012e8

08005cc4 <TL_BLE_SendCmd>:
{
 8005cc4:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <TL_BLE_SendCmd+0x14>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 8005cd0:	f7fc f822 	bl	8001d18 <HW_IPCC_BLE_SendCmd>
}
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	bd08      	pop	{r3, pc}
 8005cd8:	20030000 	.word	0x20030000

08005cdc <HW_IPCC_BLE_RxEvtNot>:
{
 8005cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005cde:	4c08      	ldr	r4, [pc, #32]	; (8005d00 <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 8005ce0:	4d08      	ldr	r5, [pc, #32]	; (8005d04 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005ce2:	4807      	ldr	r0, [pc, #28]	; (8005d00 <HW_IPCC_BLE_RxEvtNot+0x24>)
 8005ce4:	f7ff fd2f 	bl	8005746 <LST_is_empty>
 8005ce8:	b108      	cbz	r0, 8005cee <HW_IPCC_BLE_RxEvtNot+0x12>
}
 8005cea:	b003      	add	sp, #12
 8005cec:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005cee:	4620      	mov	r0, r4
 8005cf0:	a901      	add	r1, sp, #4
 8005cf2:	f7ff fd55 	bl	80057a0 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 8005cf6:	68ab      	ldr	r3, [r5, #8]
 8005cf8:	9801      	ldr	r0, [sp, #4]
 8005cfa:	4798      	blx	r3
 8005cfc:	e7f1      	b.n	8005ce2 <HW_IPCC_BLE_RxEvtNot+0x6>
 8005cfe:	bf00      	nop
 8005d00:	20030a38 	.word	0x20030a38
 8005d04:	200012e8 	.word	0x200012e8

08005d08 <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 8005d08:	4b01      	ldr	r3, [pc, #4]	; (8005d10 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4718      	bx	r3
 8005d0e:	bf00      	nop
 8005d10:	200012e8 	.word	0x200012e8

08005d14 <TL_SYS_Init>:
{
 8005d14:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 8005d16:	4d09      	ldr	r5, [pc, #36]	; (8005d3c <TL_SYS_Init+0x28>)
{
 8005d18:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f7ff fd10 	bl	8005740 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <TL_SYS_Init+0x2c>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005d22:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 8005d24:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005d26:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 8005d2a:	f7fb fffd 	bl	8001d28 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <TL_SYS_Init+0x30>)
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	611a      	str	r2, [r3, #16]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005d34:	6862      	ldr	r2, [r4, #4]
 8005d36:	615a      	str	r2, [r3, #20]
}
 8005d38:	2000      	movs	r0, #0
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	20030a50 	.word	0x20030a50
 8005d40:	20030000 	.word	0x20030000
 8005d44:	200012e8 	.word	0x200012e8

08005d48 <TL_SYS_SendCmd>:
{
 8005d48:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005d4a:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <TL_SYS_SendCmd+0x14>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2210      	movs	r2, #16
 8005d52:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 8005d54:	f7fb fff0 	bl	8001d38 <HW_IPCC_SYS_SendCmd>
}
 8005d58:	2000      	movs	r0, #0
 8005d5a:	bd08      	pop	{r3, pc}
 8005d5c:	20030000 	.word	0x20030000

08005d60 <HW_IPCC_SYS_CmdEvtNot>:
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005d60:	4b02      	ldr	r3, [pc, #8]	; (8005d6c <HW_IPCC_SYS_CmdEvtNot+0xc>)
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	4b02      	ldr	r3, [pc, #8]	; (8005d70 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 8005d66:	6810      	ldr	r0, [r2, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	4718      	bx	r3
 8005d6c:	20030000 	.word	0x20030000
 8005d70:	200012e8 	.word	0x200012e8

08005d74 <HW_IPCC_SYS_EvtNot>:
{
 8005d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005d76:	4c08      	ldr	r4, [pc, #32]	; (8005d98 <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005d78:	4d08      	ldr	r5, [pc, #32]	; (8005d9c <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005d7a:	4807      	ldr	r0, [pc, #28]	; (8005d98 <HW_IPCC_SYS_EvtNot+0x24>)
 8005d7c:	f7ff fce3 	bl	8005746 <LST_is_empty>
 8005d80:	b108      	cbz	r0, 8005d86 <HW_IPCC_SYS_EvtNot+0x12>
}
 8005d82:	b003      	add	sp, #12
 8005d84:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005d86:	4620      	mov	r0, r4
 8005d88:	a901      	add	r1, sp, #4
 8005d8a:	f7ff fd09 	bl	80057a0 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005d8e:	696b      	ldr	r3, [r5, #20]
 8005d90:	9801      	ldr	r0, [sp, #4]
 8005d92:	4798      	blx	r3
 8005d94:	e7f1      	b.n	8005d7a <HW_IPCC_SYS_EvtNot+0x6>
 8005d96:	bf00      	nop
 8005d98:	20030a50 	.word	0x20030a50
 8005d9c:	200012e8 	.word	0x200012e8

08005da0 <TL_MM_Init>:
{
 8005da0:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 8005da2:	4d0c      	ldr	r5, [pc, #48]	; (8005dd4 <TL_MM_Init+0x34>)
{
 8005da4:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 8005da6:	4628      	mov	r0, r5
 8005da8:	f7ff fcca 	bl	8005740 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005dac:	480a      	ldr	r0, [pc, #40]	; (8005dd8 <TL_MM_Init+0x38>)
 8005dae:	f7ff fcc7 	bl	8005740 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005db2:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005db4:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005db6:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005db8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005dba:	68e2      	ldr	r2, [r4, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005dbc:	e9c3 2503 	strd	r2, r5, [r3, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005dc4:	6862      	ldr	r2, [r4, #4]
 8005dc6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005dc8:	6922      	ldr	r2, [r4, #16]
 8005dca:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005dcc:	6962      	ldr	r2, [r4, #20]
 8005dce:	619a      	str	r2, [r3, #24]
}
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200301c0 	.word	0x200301c0
 8005dd8:	200012e8 	.word	0x200012e8
 8005ddc:	20030000 	.word	0x20030000

08005de0 <TL_MM_EvtDone>:
{
 8005de0:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005de2:	4601      	mov	r1, r0
 8005de4:	4803      	ldr	r0, [pc, #12]	; (8005df4 <TL_MM_EvtDone+0x14>)
 8005de6:	f7ff fcc4 	bl	8005772 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005dea:	4803      	ldr	r0, [pc, #12]	; (8005df8 <TL_MM_EvtDone+0x18>)
}
 8005dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005df0:	f7fb bff0 	b.w	8001dd4 <HW_IPCC_MM_SendFreeBuf>
 8005df4:	200012e8 	.word	0x200012e8
 8005df8:	08005c09 	.word	0x08005c09

08005dfc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005dfc:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 8005dfe:	4c05      	ldr	r4, [pc, #20]	; (8005e14 <TL_TRACES_Init+0x18>)
 8005e00:	4620      	mov	r0, r4
 8005e02:	f7ff fc9d 	bl	8005740 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005e06:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <TL_TRACES_Init+0x1c>)
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 8005e10:	f7fb bff6 	b.w	8001e00 <HW_IPCC_TRACES_Init>
 8005e14:	200301c8 	.word	0x200301c8
 8005e18:	20030000 	.word	0x20030000

08005e1c <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 8005e1c:	4770      	bx	lr
	...

08005e20 <HW_IPCC_TRACES_EvtNot>:
{
 8005e20:	b513      	push	{r0, r1, r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005e22:	4c07      	ldr	r4, [pc, #28]	; (8005e40 <HW_IPCC_TRACES_EvtNot+0x20>)
 8005e24:	4806      	ldr	r0, [pc, #24]	; (8005e40 <HW_IPCC_TRACES_EvtNot+0x20>)
 8005e26:	f7ff fc8e 	bl	8005746 <LST_is_empty>
 8005e2a:	b108      	cbz	r0, 8005e30 <HW_IPCC_TRACES_EvtNot+0x10>
}
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd10      	pop	{r4, pc}
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005e30:	4620      	mov	r0, r4
 8005e32:	a901      	add	r1, sp, #4
 8005e34:	f7ff fcb4 	bl	80057a0 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005e38:	9801      	ldr	r0, [sp, #4]
 8005e3a:	f7ff ffef 	bl	8005e1c <TL_TRACES_EvtReceived>
 8005e3e:	e7f1      	b.n	8005e24 <HW_IPCC_TRACES_EvtNot+0x4>
 8005e40:	200301c8 	.word	0x200301c8

08005e44 <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8005e44:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <UTIL_LPM_Init+0xc>)
 8005e46:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8005e48:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20001300 	.word	0x20001300

08005e54 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005e54:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e56:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005e5a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8005e5c:	b141      	cbz	r1, 8005e70 <UTIL_LPM_SetOffMode+0x1c>
 8005e5e:	2901      	cmp	r1, #1
 8005e60:	d103      	bne.n	8005e6a <UTIL_LPM_SetOffMode+0x16>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8005e62:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <UTIL_LPM_SetOffMode+0x28>)
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4302      	orrs	r2, r0
 8005e68:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	f384 8810 	msr	PRIMASK, r4
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005e6e:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8005e70:	4902      	ldr	r1, [pc, #8]	; (8005e7c <UTIL_LPM_SetOffMode+0x28>)
 8005e72:	684b      	ldr	r3, [r1, #4]
 8005e74:	ea23 0300 	bic.w	r3, r3, r0
 8005e78:	604b      	str	r3, [r1, #4]
      break;
 8005e7a:	e7f6      	b.n	8005e6a <UTIL_LPM_SetOffMode+0x16>
 8005e7c:	20001300 	.word	0x20001300

08005e80 <bit_position>:
static uint32_t bit_position(uint32_t value)
{

  uint32_t n = 0;

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8005e80:	0c03      	lsrs	r3, r0, #16
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	b9a3      	cbnz	r3, 8005eb0 <bit_position+0x30>
 8005e86:	0400      	lsls	r0, r0, #16
 8005e88:	2310      	movs	r3, #16
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8005e8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e8e:	bf04      	itt	eq
 8005e90:	0200      	lsleq	r0, r0, #8
 8005e92:	3308      	addeq	r3, #8
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005e94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e98:	bf08      	it	eq
 8005e9a:	0100      	lsleq	r0, r0, #4

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8005e9c:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <bit_position+0x34>)
 8005e9e:	ea4f 7010 	mov.w	r0, r0, lsr #28
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005ea2:	bf08      	it	eq
 8005ea4:	3304      	addeq	r3, #4
  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8005ea6:	5c10      	ldrb	r0, [r2, r0]

  return (31-n);
 8005ea8:	f1c3 031f 	rsb	r3, r3, #31
}
 8005eac:	1a18      	subs	r0, r3, r0
 8005eae:	4770      	bx	lr
  uint32_t n = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e7ea      	b.n	8005e8a <bit_position+0xa>
 8005eb4:	0800723c 	.word	0x0800723c

08005eb8 <UTIL_SEQ_RegTask>:
{
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005ec0:	b672      	cpsid	i
  TaskCb[bit_position(task_id_bm)] = task;
 8005ec2:	f7ff ffdd 	bl	8005e80 <bit_position>
 8005ec6:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <UTIL_SEQ_RegTask+0x1c>)
 8005ec8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ecc:	6104      	str	r4, [r0, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ece:	f381 8810 	msr	PRIMASK, r1
}
 8005ed2:	bd10      	pop	{r4, pc}
 8005ed4:	20001308 	.word	0x20001308

08005ed8 <UTIL_SEQ_SetTask>:
{
 8005ed8:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eda:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005ede:	b672      	cpsid	i
  TaskSet |= task_id_bm;
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <UTIL_SEQ_SetTask+0x24>)
 8005ee2:	681c      	ldr	r4, [r3, #0]
 8005ee4:	4304      	orrs	r4, r0
 8005ee6:	601c      	str	r4, [r3, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8005ee8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005eec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ef0:	4302      	orrs	r2, r0
 8005ef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef6:	f385 8810 	msr	PRIMASK, r5
}
 8005efa:	bd30      	pop	{r4, r5, pc}
 8005efc:	20001308 	.word	0x20001308

08005f00 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f00:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f04:	b672      	cpsid	i
  TaskMask &= (~task_id_bm);
 8005f06:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <UTIL_SEQ_PauseTask+0x18>)
 8005f08:	6813      	ldr	r3, [r2, #0]
 8005f0a:	ea23 0300 	bic.w	r3, r3, r0
 8005f0e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f10:	f381 8810 	msr	PRIMASK, r1
}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000044 	.word	0x20000044

08005f1c <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f20:	b672      	cpsid	i
  TaskMask |= task_id_bm;
 8005f22:	4a03      	ldr	r2, [pc, #12]	; (8005f30 <UTIL_SEQ_ResumeTask+0x14>)
 8005f24:	6813      	ldr	r3, [r2, #0]
 8005f26:	4303      	orrs	r3, r0
 8005f28:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	f381 8810 	msr	PRIMASK, r1
}
 8005f2e:	4770      	bx	lr
 8005f30:	20000044 	.word	0x20000044

08005f34 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f34:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f38:	b672      	cpsid	i
  EvtSet |= evt_id_bm;
 8005f3a:	4a03      	ldr	r2, [pc, #12]	; (8005f48 <UTIL_SEQ_SetEvt+0x14>)
 8005f3c:	6853      	ldr	r3, [r2, #4]
 8005f3e:	4303      	orrs	r3, r0
 8005f40:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f42:	f381 8810 	msr	PRIMASK, r1
}
 8005f46:	4770      	bx	lr
 8005f48:	20001308 	.word	0x20001308

08005f4c <UTIL_SEQ_PreIdle>:
 8005f4c:	4770      	bx	lr

08005f4e <UTIL_SEQ_PostIdle>:
 8005f4e:	4770      	bx	lr

08005f50 <UTIL_SEQ_Run>:
{
 8005f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  super_mask_backup = SuperMask;
 8005f54:	4d32      	ldr	r5, [pc, #200]	; (8006020 <UTIL_SEQ_Run+0xd0>)
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8005f56:	4f33      	ldr	r7, [pc, #204]	; (8006024 <UTIL_SEQ_Run+0xd4>)
  super_mask_backup = SuperMask;
 8005f58:	686e      	ldr	r6, [r5, #4]
  SuperMask &= mask_bm;
 8005f5a:	4030      	ands	r0, r6
 8005f5c:	6068      	str	r0, [r5, #4]
 8005f5e:	463c      	mov	r4, r7
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8005f60:	e9d5 2000 	ldrd	r2, r0, [r5]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4013      	ands	r3, r2
 8005f68:	4203      	tst	r3, r0
 8005f6a:	d040      	beq.n	8005fee <UTIL_SEQ_Run+0x9e>
 8005f6c:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8005f70:	400b      	ands	r3, r1
 8005f72:	d13c      	bne.n	8005fee <UTIL_SEQ_Run+0x9e>
 8005f74:	4002      	ands	r2, r0
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8005f76:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005f7a:	4010      	ands	r0, r2
 8005f7c:	d103      	bne.n	8005f86 <UTIL_SEQ_Run+0x36>
 8005f7e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
      counter++;
 8005f82:	2301      	movs	r3, #1
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8005f84:	4010      	ands	r0, r2
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	18e2      	adds	r2, r4, r3
 8005f8a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 8005f8e:	4208      	tst	r0, r1
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005f90:	bf04      	itt	eq
 8005f92:	f04f 31ff 	moveq.w	r1, #4294967295
 8005f96:	f8c2 1094 	streq.w	r1, [r2, #148]	; 0x94
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8005f9a:	18e1      	adds	r1, r4, r3
 8005f9c:	f8d1 8094 	ldr.w	r8, [r1, #148]	; 0x94
 8005fa0:	ea08 0000 	and.w	r0, r8, r0
 8005fa4:	f7ff ff6c 	bl	8005e80 <bit_position>
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8005fa8:	2301      	movs	r3, #1
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8005faa:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8005fac:	fa03 f000 	lsl.w	r0, r3, r0
 8005fb0:	ea28 0000 	bic.w	r0, r8, r0
 8005fb4:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005fbc:	b672      	cpsid	i
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8005fbe:	68e2      	ldr	r2, [r4, #12]
 8005fc0:	4093      	lsls	r3, r2
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8005fca:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005fce:	401a      	ands	r2, r3
 8005fd0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8005fd4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005fd8:	4013      	ands	r3, r2
 8005fda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fde:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	4798      	blx	r3
 8005fec:	e7b8      	b.n	8005f60 <UTIL_SEQ_Run+0x10>
  UTIL_SEQ_PreIdle( );
 8005fee:	f7ff ffad 	bl	8005f4c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005ff6:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8005ff8:	682a      	ldr	r2, [r5, #0]
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	686a      	ldr	r2, [r5, #4]
 8006000:	4213      	tst	r3, r2
 8006002:	d105      	bne.n	8006010 <UTIL_SEQ_Run+0xc0>
 8006004:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8006008:	421a      	tst	r2, r3
 800600a:	d101      	bne.n	8006010 <UTIL_SEQ_Run+0xc0>
    UTIL_SEQ_Idle( );
 800600c:	f7fa fc0c 	bl	8000828 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006010:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 8006014:	f7ff ff9b 	bl	8005f4e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8006018:	606e      	str	r6, [r5, #4]
}
 800601a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800601e:	bf00      	nop
 8006020:	20000044 	.word	0x20000044
 8006024:	20001308 	.word	0x20001308

08006028 <UTIL_SEQ_WaitEvt>:
{
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  current_task_id_bm = (1 << CurrentTaskIdx);
 800602a:	4c0b      	ldr	r4, [pc, #44]	; (8006058 <UTIL_SEQ_WaitEvt+0x30>)
 800602c:	68e3      	ldr	r3, [r4, #12]
  event_waited_id_backup = EvtWaited;
 800602e:	68a7      	ldr	r7, [r4, #8]
  EvtWaited = evt_id_bm;
 8006030:	60a0      	str	r0, [r4, #8]
  current_task_id_bm = (1 << CurrentTaskIdx);
 8006032:	2601      	movs	r6, #1
 8006034:	409e      	lsls	r6, r3
  while((EvtSet & EvtWaited) == 0)
 8006036:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
 800603a:	420d      	tst	r5, r1
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800603c:	4630      	mov	r0, r6
  while((EvtSet & EvtWaited) == 0)
 800603e:	d007      	beq.n	8006050 <UTIL_SEQ_WaitEvt+0x28>
  CurrentTaskIdx = bit_position(current_task_id_bm);
 8006040:	f7ff ff1e 	bl	8005e80 <bit_position>
  EvtSet &= (~EvtWaited);
 8006044:	ea25 0501 	bic.w	r5, r5, r1
  CurrentTaskIdx = bit_position(current_task_id_bm);
 8006048:	60e0      	str	r0, [r4, #12]
  EvtWaited = event_waited_id_backup;
 800604a:	e9c4 5701 	strd	r5, r7, [r4, #4]
}
 800604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8006050:	f7fa fbeb 	bl	800082a <UTIL_SEQ_EvtIdle>
 8006054:	e7ef      	b.n	8006036 <UTIL_SEQ_WaitEvt+0xe>
 8006056:	bf00      	nop
 8006058:	20001308 	.word	0x20001308

0800605c <__errno>:
 800605c:	4b01      	ldr	r3, [pc, #4]	; (8006064 <__errno+0x8>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	2000004c 	.word	0x2000004c

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4e0d      	ldr	r6, [pc, #52]	; (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	; (80060a4 <__libc_init_array+0x3c>)
 800606e:	1ba4      	subs	r4, r4, r6
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2500      	movs	r5, #0
 8006074:	42a5      	cmp	r5, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4e0b      	ldr	r6, [pc, #44]	; (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	; (80060ac <__libc_init_array+0x44>)
 800607c:	f000 ff74 	bl	8006f68 <_init>
 8006080:	1ba4      	subs	r4, r4, r6
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2500      	movs	r5, #0
 8006086:	42a5      	cmp	r5, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006090:	4798      	blx	r3
 8006092:	3501      	adds	r5, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800609a:	4798      	blx	r3
 800609c:	3501      	adds	r5, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08007914 	.word	0x08007914
 80060a4:	08007914 	.word	0x08007914
 80060a8:	08007914 	.word	0x08007914
 80060ac:	08007918 	.word	0x08007918

080060b0 <memcpy>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	1e43      	subs	r3, r0, #1
 80060b4:	440a      	add	r2, r1
 80060b6:	4291      	cmp	r1, r2
 80060b8:	d100      	bne.n	80060bc <memcpy+0xc>
 80060ba:	bd10      	pop	{r4, pc}
 80060bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060c4:	e7f7      	b.n	80060b6 <memcpy+0x6>

080060c6 <memset>:
 80060c6:	4402      	add	r2, r0
 80060c8:	4603      	mov	r3, r0
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d100      	bne.n	80060d0 <memset+0xa>
 80060ce:	4770      	bx	lr
 80060d0:	f803 1b01 	strb.w	r1, [r3], #1
 80060d4:	e7f9      	b.n	80060ca <memset+0x4>
	...

080060d8 <iprintf>:
 80060d8:	b40f      	push	{r0, r1, r2, r3}
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <iprintf+0x2c>)
 80060dc:	b513      	push	{r0, r1, r4, lr}
 80060de:	681c      	ldr	r4, [r3, #0]
 80060e0:	b124      	cbz	r4, 80060ec <iprintf+0x14>
 80060e2:	69a3      	ldr	r3, [r4, #24]
 80060e4:	b913      	cbnz	r3, 80060ec <iprintf+0x14>
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fa22 	bl	8006530 <__sinit>
 80060ec:	ab05      	add	r3, sp, #20
 80060ee:	9a04      	ldr	r2, [sp, #16]
 80060f0:	68a1      	ldr	r1, [r4, #8]
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fbdb 	bl	80068b0 <_vfiprintf_r>
 80060fa:	b002      	add	sp, #8
 80060fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006100:	b004      	add	sp, #16
 8006102:	4770      	bx	lr
 8006104:	2000004c 	.word	0x2000004c

08006108 <_puts_r>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	460e      	mov	r6, r1
 800610c:	4605      	mov	r5, r0
 800610e:	b118      	cbz	r0, 8006118 <_puts_r+0x10>
 8006110:	6983      	ldr	r3, [r0, #24]
 8006112:	b90b      	cbnz	r3, 8006118 <_puts_r+0x10>
 8006114:	f000 fa0c 	bl	8006530 <__sinit>
 8006118:	69ab      	ldr	r3, [r5, #24]
 800611a:	68ac      	ldr	r4, [r5, #8]
 800611c:	b913      	cbnz	r3, 8006124 <_puts_r+0x1c>
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fa06 	bl	8006530 <__sinit>
 8006124:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <_puts_r+0xac>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d117      	bne.n	800615a <_puts_r+0x52>
 800612a:	686c      	ldr	r4, [r5, #4]
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	071b      	lsls	r3, r3, #28
 8006130:	d51d      	bpl.n	800616e <_puts_r+0x66>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	b1db      	cbz	r3, 800616e <_puts_r+0x66>
 8006136:	3e01      	subs	r6, #1
 8006138:	68a3      	ldr	r3, [r4, #8]
 800613a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800613e:	3b01      	subs	r3, #1
 8006140:	60a3      	str	r3, [r4, #8]
 8006142:	b9e9      	cbnz	r1, 8006180 <_puts_r+0x78>
 8006144:	2b00      	cmp	r3, #0
 8006146:	da2e      	bge.n	80061a6 <_puts_r+0x9e>
 8006148:	4622      	mov	r2, r4
 800614a:	210a      	movs	r1, #10
 800614c:	4628      	mov	r0, r5
 800614e:	f000 f83f 	bl	80061d0 <__swbuf_r>
 8006152:	3001      	adds	r0, #1
 8006154:	d011      	beq.n	800617a <_puts_r+0x72>
 8006156:	200a      	movs	r0, #10
 8006158:	e011      	b.n	800617e <_puts_r+0x76>
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <_puts_r+0xb0>)
 800615c:	429c      	cmp	r4, r3
 800615e:	d101      	bne.n	8006164 <_puts_r+0x5c>
 8006160:	68ac      	ldr	r4, [r5, #8]
 8006162:	e7e3      	b.n	800612c <_puts_r+0x24>
 8006164:	4b15      	ldr	r3, [pc, #84]	; (80061bc <_puts_r+0xb4>)
 8006166:	429c      	cmp	r4, r3
 8006168:	bf08      	it	eq
 800616a:	68ec      	ldreq	r4, [r5, #12]
 800616c:	e7de      	b.n	800612c <_puts_r+0x24>
 800616e:	4621      	mov	r1, r4
 8006170:	4628      	mov	r0, r5
 8006172:	f000 f87f 	bl	8006274 <__swsetup_r>
 8006176:	2800      	cmp	r0, #0
 8006178:	d0dd      	beq.n	8006136 <_puts_r+0x2e>
 800617a:	f04f 30ff 	mov.w	r0, #4294967295
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	2b00      	cmp	r3, #0
 8006182:	da04      	bge.n	800618e <_puts_r+0x86>
 8006184:	69a2      	ldr	r2, [r4, #24]
 8006186:	429a      	cmp	r2, r3
 8006188:	dc06      	bgt.n	8006198 <_puts_r+0x90>
 800618a:	290a      	cmp	r1, #10
 800618c:	d004      	beq.n	8006198 <_puts_r+0x90>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	7019      	strb	r1, [r3, #0]
 8006196:	e7cf      	b.n	8006138 <_puts_r+0x30>
 8006198:	4622      	mov	r2, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f000 f818 	bl	80061d0 <__swbuf_r>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1c9      	bne.n	8006138 <_puts_r+0x30>
 80061a4:	e7e9      	b.n	800617a <_puts_r+0x72>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	200a      	movs	r0, #10
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	6022      	str	r2, [r4, #0]
 80061ae:	7018      	strb	r0, [r3, #0]
 80061b0:	e7e5      	b.n	800617e <_puts_r+0x76>
 80061b2:	bf00      	nop
 80061b4:	08007898 	.word	0x08007898
 80061b8:	080078b8 	.word	0x080078b8
 80061bc:	08007878 	.word	0x08007878

080061c0 <puts>:
 80061c0:	4b02      	ldr	r3, [pc, #8]	; (80061cc <puts+0xc>)
 80061c2:	4601      	mov	r1, r0
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	f7ff bf9f 	b.w	8006108 <_puts_r>
 80061ca:	bf00      	nop
 80061cc:	2000004c 	.word	0x2000004c

080061d0 <__swbuf_r>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	460e      	mov	r6, r1
 80061d4:	4614      	mov	r4, r2
 80061d6:	4605      	mov	r5, r0
 80061d8:	b118      	cbz	r0, 80061e2 <__swbuf_r+0x12>
 80061da:	6983      	ldr	r3, [r0, #24]
 80061dc:	b90b      	cbnz	r3, 80061e2 <__swbuf_r+0x12>
 80061de:	f000 f9a7 	bl	8006530 <__sinit>
 80061e2:	4b21      	ldr	r3, [pc, #132]	; (8006268 <__swbuf_r+0x98>)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	d12a      	bne.n	800623e <__swbuf_r+0x6e>
 80061e8:	686c      	ldr	r4, [r5, #4]
 80061ea:	69a3      	ldr	r3, [r4, #24]
 80061ec:	60a3      	str	r3, [r4, #8]
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	071a      	lsls	r2, r3, #28
 80061f2:	d52e      	bpl.n	8006252 <__swbuf_r+0x82>
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	b363      	cbz	r3, 8006252 <__swbuf_r+0x82>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	1ac0      	subs	r0, r0, r3
 80061fe:	6963      	ldr	r3, [r4, #20]
 8006200:	b2f6      	uxtb	r6, r6
 8006202:	4283      	cmp	r3, r0
 8006204:	4637      	mov	r7, r6
 8006206:	dc04      	bgt.n	8006212 <__swbuf_r+0x42>
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	f000 f926 	bl	800645c <_fflush_r>
 8006210:	bb28      	cbnz	r0, 800625e <__swbuf_r+0x8e>
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	3b01      	subs	r3, #1
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	6022      	str	r2, [r4, #0]
 800621e:	701e      	strb	r6, [r3, #0]
 8006220:	6963      	ldr	r3, [r4, #20]
 8006222:	3001      	adds	r0, #1
 8006224:	4283      	cmp	r3, r0
 8006226:	d004      	beq.n	8006232 <__swbuf_r+0x62>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	07db      	lsls	r3, r3, #31
 800622c:	d519      	bpl.n	8006262 <__swbuf_r+0x92>
 800622e:	2e0a      	cmp	r6, #10
 8006230:	d117      	bne.n	8006262 <__swbuf_r+0x92>
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	f000 f911 	bl	800645c <_fflush_r>
 800623a:	b190      	cbz	r0, 8006262 <__swbuf_r+0x92>
 800623c:	e00f      	b.n	800625e <__swbuf_r+0x8e>
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <__swbuf_r+0x9c>)
 8006240:	429c      	cmp	r4, r3
 8006242:	d101      	bne.n	8006248 <__swbuf_r+0x78>
 8006244:	68ac      	ldr	r4, [r5, #8]
 8006246:	e7d0      	b.n	80061ea <__swbuf_r+0x1a>
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <__swbuf_r+0xa0>)
 800624a:	429c      	cmp	r4, r3
 800624c:	bf08      	it	eq
 800624e:	68ec      	ldreq	r4, [r5, #12]
 8006250:	e7cb      	b.n	80061ea <__swbuf_r+0x1a>
 8006252:	4621      	mov	r1, r4
 8006254:	4628      	mov	r0, r5
 8006256:	f000 f80d 	bl	8006274 <__swsetup_r>
 800625a:	2800      	cmp	r0, #0
 800625c:	d0cc      	beq.n	80061f8 <__swbuf_r+0x28>
 800625e:	f04f 37ff 	mov.w	r7, #4294967295
 8006262:	4638      	mov	r0, r7
 8006264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006266:	bf00      	nop
 8006268:	08007898 	.word	0x08007898
 800626c:	080078b8 	.word	0x080078b8
 8006270:	08007878 	.word	0x08007878

08006274 <__swsetup_r>:
 8006274:	4b32      	ldr	r3, [pc, #200]	; (8006340 <__swsetup_r+0xcc>)
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	4606      	mov	r6, r0
 800627c:	460c      	mov	r4, r1
 800627e:	b125      	cbz	r5, 800628a <__swsetup_r+0x16>
 8006280:	69ab      	ldr	r3, [r5, #24]
 8006282:	b913      	cbnz	r3, 800628a <__swsetup_r+0x16>
 8006284:	4628      	mov	r0, r5
 8006286:	f000 f953 	bl	8006530 <__sinit>
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <__swsetup_r+0xd0>)
 800628c:	429c      	cmp	r4, r3
 800628e:	d10f      	bne.n	80062b0 <__swsetup_r+0x3c>
 8006290:	686c      	ldr	r4, [r5, #4]
 8006292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006296:	b29a      	uxth	r2, r3
 8006298:	0715      	lsls	r5, r2, #28
 800629a:	d42c      	bmi.n	80062f6 <__swsetup_r+0x82>
 800629c:	06d0      	lsls	r0, r2, #27
 800629e:	d411      	bmi.n	80062c4 <__swsetup_r+0x50>
 80062a0:	2209      	movs	r2, #9
 80062a2:	6032      	str	r2, [r6, #0]
 80062a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	e03e      	b.n	800632e <__swsetup_r+0xba>
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <__swsetup_r+0xd4>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <__swsetup_r+0x46>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7eb      	b.n	8006292 <__swsetup_r+0x1e>
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <__swsetup_r+0xd8>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7e6      	b.n	8006292 <__swsetup_r+0x1e>
 80062c4:	0751      	lsls	r1, r2, #29
 80062c6:	d512      	bpl.n	80062ee <__swsetup_r+0x7a>
 80062c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ca:	b141      	cbz	r1, 80062de <__swsetup_r+0x6a>
 80062cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d0:	4299      	cmp	r1, r3
 80062d2:	d002      	beq.n	80062da <__swsetup_r+0x66>
 80062d4:	4630      	mov	r0, r6
 80062d6:	f000 fa19 	bl	800670c <_free_r>
 80062da:	2300      	movs	r3, #0
 80062dc:	6363      	str	r3, [r4, #52]	; 0x34
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	2300      	movs	r3, #0
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f043 0308 	orr.w	r3, r3, #8
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	b94b      	cbnz	r3, 800630e <__swsetup_r+0x9a>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006304:	d003      	beq.n	800630e <__swsetup_r+0x9a>
 8006306:	4621      	mov	r1, r4
 8006308:	4630      	mov	r0, r6
 800630a:	f000 f9bf 	bl	800668c <__smakebuf_r>
 800630e:	89a2      	ldrh	r2, [r4, #12]
 8006310:	f012 0301 	ands.w	r3, r2, #1
 8006314:	d00c      	beq.n	8006330 <__swsetup_r+0xbc>
 8006316:	2300      	movs	r3, #0
 8006318:	60a3      	str	r3, [r4, #8]
 800631a:	6963      	ldr	r3, [r4, #20]
 800631c:	425b      	negs	r3, r3
 800631e:	61a3      	str	r3, [r4, #24]
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	b953      	cbnz	r3, 800633a <__swsetup_r+0xc6>
 8006324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006328:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800632c:	d1ba      	bne.n	80062a4 <__swsetup_r+0x30>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	0792      	lsls	r2, r2, #30
 8006332:	bf58      	it	pl
 8006334:	6963      	ldrpl	r3, [r4, #20]
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	e7f2      	b.n	8006320 <__swsetup_r+0xac>
 800633a:	2000      	movs	r0, #0
 800633c:	e7f7      	b.n	800632e <__swsetup_r+0xba>
 800633e:	bf00      	nop
 8006340:	2000004c 	.word	0x2000004c
 8006344:	08007898 	.word	0x08007898
 8006348:	080078b8 	.word	0x080078b8
 800634c:	08007878 	.word	0x08007878

08006350 <__sflush_r>:
 8006350:	898a      	ldrh	r2, [r1, #12]
 8006352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006356:	4605      	mov	r5, r0
 8006358:	0710      	lsls	r0, r2, #28
 800635a:	460c      	mov	r4, r1
 800635c:	d458      	bmi.n	8006410 <__sflush_r+0xc0>
 800635e:	684b      	ldr	r3, [r1, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	dc05      	bgt.n	8006370 <__sflush_r+0x20>
 8006364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	dc02      	bgt.n	8006370 <__sflush_r+0x20>
 800636a:	2000      	movs	r0, #0
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006372:	2e00      	cmp	r6, #0
 8006374:	d0f9      	beq.n	800636a <__sflush_r+0x1a>
 8006376:	2300      	movs	r3, #0
 8006378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800637c:	682f      	ldr	r7, [r5, #0]
 800637e:	6a21      	ldr	r1, [r4, #32]
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	d032      	beq.n	80063ea <__sflush_r+0x9a>
 8006384:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	075a      	lsls	r2, r3, #29
 800638a:	d505      	bpl.n	8006398 <__sflush_r+0x48>
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	1ac0      	subs	r0, r0, r3
 8006390:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006392:	b10b      	cbz	r3, 8006398 <__sflush_r+0x48>
 8006394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006396:	1ac0      	subs	r0, r0, r3
 8006398:	2300      	movs	r3, #0
 800639a:	4602      	mov	r2, r0
 800639c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800639e:	6a21      	ldr	r1, [r4, #32]
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b0      	blx	r6
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	d106      	bne.n	80063b8 <__sflush_r+0x68>
 80063aa:	6829      	ldr	r1, [r5, #0]
 80063ac:	291d      	cmp	r1, #29
 80063ae:	d848      	bhi.n	8006442 <__sflush_r+0xf2>
 80063b0:	4a29      	ldr	r2, [pc, #164]	; (8006458 <__sflush_r+0x108>)
 80063b2:	40ca      	lsrs	r2, r1
 80063b4:	07d6      	lsls	r6, r2, #31
 80063b6:	d544      	bpl.n	8006442 <__sflush_r+0xf2>
 80063b8:	2200      	movs	r2, #0
 80063ba:	6062      	str	r2, [r4, #4]
 80063bc:	04d9      	lsls	r1, r3, #19
 80063be:	6922      	ldr	r2, [r4, #16]
 80063c0:	6022      	str	r2, [r4, #0]
 80063c2:	d504      	bpl.n	80063ce <__sflush_r+0x7e>
 80063c4:	1c42      	adds	r2, r0, #1
 80063c6:	d101      	bne.n	80063cc <__sflush_r+0x7c>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b903      	cbnz	r3, 80063ce <__sflush_r+0x7e>
 80063cc:	6560      	str	r0, [r4, #84]	; 0x54
 80063ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063d0:	602f      	str	r7, [r5, #0]
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d0c9      	beq.n	800636a <__sflush_r+0x1a>
 80063d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063da:	4299      	cmp	r1, r3
 80063dc:	d002      	beq.n	80063e4 <__sflush_r+0x94>
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f994 	bl	800670c <_free_r>
 80063e4:	2000      	movs	r0, #0
 80063e6:	6360      	str	r0, [r4, #52]	; 0x34
 80063e8:	e7c0      	b.n	800636c <__sflush_r+0x1c>
 80063ea:	2301      	movs	r3, #1
 80063ec:	4628      	mov	r0, r5
 80063ee:	47b0      	blx	r6
 80063f0:	1c41      	adds	r1, r0, #1
 80063f2:	d1c8      	bne.n	8006386 <__sflush_r+0x36>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0c5      	beq.n	8006386 <__sflush_r+0x36>
 80063fa:	2b1d      	cmp	r3, #29
 80063fc:	d001      	beq.n	8006402 <__sflush_r+0xb2>
 80063fe:	2b16      	cmp	r3, #22
 8006400:	d101      	bne.n	8006406 <__sflush_r+0xb6>
 8006402:	602f      	str	r7, [r5, #0]
 8006404:	e7b1      	b.n	800636a <__sflush_r+0x1a>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640c:	81a3      	strh	r3, [r4, #12]
 800640e:	e7ad      	b.n	800636c <__sflush_r+0x1c>
 8006410:	690f      	ldr	r7, [r1, #16]
 8006412:	2f00      	cmp	r7, #0
 8006414:	d0a9      	beq.n	800636a <__sflush_r+0x1a>
 8006416:	0793      	lsls	r3, r2, #30
 8006418:	680e      	ldr	r6, [r1, #0]
 800641a:	bf08      	it	eq
 800641c:	694b      	ldreq	r3, [r1, #20]
 800641e:	600f      	str	r7, [r1, #0]
 8006420:	bf18      	it	ne
 8006422:	2300      	movne	r3, #0
 8006424:	eba6 0807 	sub.w	r8, r6, r7
 8006428:	608b      	str	r3, [r1, #8]
 800642a:	f1b8 0f00 	cmp.w	r8, #0
 800642e:	dd9c      	ble.n	800636a <__sflush_r+0x1a>
 8006430:	4643      	mov	r3, r8
 8006432:	463a      	mov	r2, r7
 8006434:	6a21      	ldr	r1, [r4, #32]
 8006436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006438:	4628      	mov	r0, r5
 800643a:	47b0      	blx	r6
 800643c:	2800      	cmp	r0, #0
 800643e:	dc06      	bgt.n	800644e <__sflush_r+0xfe>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	f04f 30ff 	mov.w	r0, #4294967295
 800644c:	e78e      	b.n	800636c <__sflush_r+0x1c>
 800644e:	4407      	add	r7, r0
 8006450:	eba8 0800 	sub.w	r8, r8, r0
 8006454:	e7e9      	b.n	800642a <__sflush_r+0xda>
 8006456:	bf00      	nop
 8006458:	20400001 	.word	0x20400001

0800645c <_fflush_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	690b      	ldr	r3, [r1, #16]
 8006460:	4605      	mov	r5, r0
 8006462:	460c      	mov	r4, r1
 8006464:	b1db      	cbz	r3, 800649e <_fflush_r+0x42>
 8006466:	b118      	cbz	r0, 8006470 <_fflush_r+0x14>
 8006468:	6983      	ldr	r3, [r0, #24]
 800646a:	b90b      	cbnz	r3, 8006470 <_fflush_r+0x14>
 800646c:	f000 f860 	bl	8006530 <__sinit>
 8006470:	4b0c      	ldr	r3, [pc, #48]	; (80064a4 <_fflush_r+0x48>)
 8006472:	429c      	cmp	r4, r3
 8006474:	d109      	bne.n	800648a <_fflush_r+0x2e>
 8006476:	686c      	ldr	r4, [r5, #4]
 8006478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800647c:	b17b      	cbz	r3, 800649e <_fflush_r+0x42>
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006486:	f7ff bf63 	b.w	8006350 <__sflush_r>
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <_fflush_r+0x4c>)
 800648c:	429c      	cmp	r4, r3
 800648e:	d101      	bne.n	8006494 <_fflush_r+0x38>
 8006490:	68ac      	ldr	r4, [r5, #8]
 8006492:	e7f1      	b.n	8006478 <_fflush_r+0x1c>
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <_fflush_r+0x50>)
 8006496:	429c      	cmp	r4, r3
 8006498:	bf08      	it	eq
 800649a:	68ec      	ldreq	r4, [r5, #12]
 800649c:	e7ec      	b.n	8006478 <_fflush_r+0x1c>
 800649e:	2000      	movs	r0, #0
 80064a0:	bd38      	pop	{r3, r4, r5, pc}
 80064a2:	bf00      	nop
 80064a4:	08007898 	.word	0x08007898
 80064a8:	080078b8 	.word	0x080078b8
 80064ac:	08007878 	.word	0x08007878

080064b0 <std>:
 80064b0:	2300      	movs	r3, #0
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	e9c0 3300 	strd	r3, r3, [r0]
 80064ba:	6083      	str	r3, [r0, #8]
 80064bc:	8181      	strh	r1, [r0, #12]
 80064be:	6643      	str	r3, [r0, #100]	; 0x64
 80064c0:	81c2      	strh	r2, [r0, #14]
 80064c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064c6:	6183      	str	r3, [r0, #24]
 80064c8:	4619      	mov	r1, r3
 80064ca:	2208      	movs	r2, #8
 80064cc:	305c      	adds	r0, #92	; 0x5c
 80064ce:	f7ff fdfa 	bl	80060c6 <memset>
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <std+0x38>)
 80064d4:	6263      	str	r3, [r4, #36]	; 0x24
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <std+0x3c>)
 80064d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <std+0x40>)
 80064dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <std+0x44>)
 80064e0:	6224      	str	r4, [r4, #32]
 80064e2:	6323      	str	r3, [r4, #48]	; 0x30
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	bf00      	nop
 80064e8:	08006e0d 	.word	0x08006e0d
 80064ec:	08006e2f 	.word	0x08006e2f
 80064f0:	08006e67 	.word	0x08006e67
 80064f4:	08006e8b 	.word	0x08006e8b

080064f8 <_cleanup_r>:
 80064f8:	4901      	ldr	r1, [pc, #4]	; (8006500 <_cleanup_r+0x8>)
 80064fa:	f000 b885 	b.w	8006608 <_fwalk_reent>
 80064fe:	bf00      	nop
 8006500:	0800645d 	.word	0x0800645d

08006504 <__sfmoreglue>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	1e4a      	subs	r2, r1, #1
 8006508:	2568      	movs	r5, #104	; 0x68
 800650a:	4355      	muls	r5, r2
 800650c:	460e      	mov	r6, r1
 800650e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006512:	f000 f949 	bl	80067a8 <_malloc_r>
 8006516:	4604      	mov	r4, r0
 8006518:	b140      	cbz	r0, 800652c <__sfmoreglue+0x28>
 800651a:	2100      	movs	r1, #0
 800651c:	e9c0 1600 	strd	r1, r6, [r0]
 8006520:	300c      	adds	r0, #12
 8006522:	60a0      	str	r0, [r4, #8]
 8006524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006528:	f7ff fdcd 	bl	80060c6 <memset>
 800652c:	4620      	mov	r0, r4
 800652e:	bd70      	pop	{r4, r5, r6, pc}

08006530 <__sinit>:
 8006530:	6983      	ldr	r3, [r0, #24]
 8006532:	b510      	push	{r4, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	bb33      	cbnz	r3, 8006586 <__sinit+0x56>
 8006538:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800653c:	6503      	str	r3, [r0, #80]	; 0x50
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <__sinit+0x58>)
 8006540:	4a12      	ldr	r2, [pc, #72]	; (800658c <__sinit+0x5c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6282      	str	r2, [r0, #40]	; 0x28
 8006546:	4298      	cmp	r0, r3
 8006548:	bf04      	itt	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	6183      	streq	r3, [r0, #24]
 800654e:	f000 f81f 	bl	8006590 <__sfp>
 8006552:	6060      	str	r0, [r4, #4]
 8006554:	4620      	mov	r0, r4
 8006556:	f000 f81b 	bl	8006590 <__sfp>
 800655a:	60a0      	str	r0, [r4, #8]
 800655c:	4620      	mov	r0, r4
 800655e:	f000 f817 	bl	8006590 <__sfp>
 8006562:	2200      	movs	r2, #0
 8006564:	60e0      	str	r0, [r4, #12]
 8006566:	2104      	movs	r1, #4
 8006568:	6860      	ldr	r0, [r4, #4]
 800656a:	f7ff ffa1 	bl	80064b0 <std>
 800656e:	2201      	movs	r2, #1
 8006570:	2109      	movs	r1, #9
 8006572:	68a0      	ldr	r0, [r4, #8]
 8006574:	f7ff ff9c 	bl	80064b0 <std>
 8006578:	2202      	movs	r2, #2
 800657a:	2112      	movs	r1, #18
 800657c:	68e0      	ldr	r0, [r4, #12]
 800657e:	f7ff ff97 	bl	80064b0 <std>
 8006582:	2301      	movs	r3, #1
 8006584:	61a3      	str	r3, [r4, #24]
 8006586:	bd10      	pop	{r4, pc}
 8006588:	08007874 	.word	0x08007874
 800658c:	080064f9 	.word	0x080064f9

08006590 <__sfp>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <__sfp+0x70>)
 8006594:	681e      	ldr	r6, [r3, #0]
 8006596:	69b3      	ldr	r3, [r6, #24]
 8006598:	4607      	mov	r7, r0
 800659a:	b913      	cbnz	r3, 80065a2 <__sfp+0x12>
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ffc7 	bl	8006530 <__sinit>
 80065a2:	3648      	adds	r6, #72	; 0x48
 80065a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	d503      	bpl.n	80065b4 <__sfp+0x24>
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	b133      	cbz	r3, 80065be <__sfp+0x2e>
 80065b0:	6836      	ldr	r6, [r6, #0]
 80065b2:	e7f7      	b.n	80065a4 <__sfp+0x14>
 80065b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065b8:	b16d      	cbz	r5, 80065d6 <__sfp+0x46>
 80065ba:	3468      	adds	r4, #104	; 0x68
 80065bc:	e7f4      	b.n	80065a8 <__sfp+0x18>
 80065be:	2104      	movs	r1, #4
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff ff9f 	bl	8006504 <__sfmoreglue>
 80065c6:	6030      	str	r0, [r6, #0]
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d1f1      	bne.n	80065b0 <__sfp+0x20>
 80065cc:	230c      	movs	r3, #12
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4604      	mov	r4, r0
 80065d2:	4620      	mov	r0, r4
 80065d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <__sfp+0x74>)
 80065d8:	6665      	str	r5, [r4, #100]	; 0x64
 80065da:	e9c4 5500 	strd	r5, r5, [r4]
 80065de:	60a5      	str	r5, [r4, #8]
 80065e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80065e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80065e8:	2208      	movs	r2, #8
 80065ea:	4629      	mov	r1, r5
 80065ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065f0:	f7ff fd69 	bl	80060c6 <memset>
 80065f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065fc:	e7e9      	b.n	80065d2 <__sfp+0x42>
 80065fe:	bf00      	nop
 8006600:	08007874 	.word	0x08007874
 8006604:	ffff0001 	.word	0xffff0001

08006608 <_fwalk_reent>:
 8006608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800660c:	4680      	mov	r8, r0
 800660e:	4689      	mov	r9, r1
 8006610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006614:	2600      	movs	r6, #0
 8006616:	b914      	cbnz	r4, 800661e <_fwalk_reent+0x16>
 8006618:	4630      	mov	r0, r6
 800661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006622:	3f01      	subs	r7, #1
 8006624:	d501      	bpl.n	800662a <_fwalk_reent+0x22>
 8006626:	6824      	ldr	r4, [r4, #0]
 8006628:	e7f5      	b.n	8006616 <_fwalk_reent+0xe>
 800662a:	89ab      	ldrh	r3, [r5, #12]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d907      	bls.n	8006640 <_fwalk_reent+0x38>
 8006630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006634:	3301      	adds	r3, #1
 8006636:	d003      	beq.n	8006640 <_fwalk_reent+0x38>
 8006638:	4629      	mov	r1, r5
 800663a:	4640      	mov	r0, r8
 800663c:	47c8      	blx	r9
 800663e:	4306      	orrs	r6, r0
 8006640:	3568      	adds	r5, #104	; 0x68
 8006642:	e7ee      	b.n	8006622 <_fwalk_reent+0x1a>

08006644 <__swhatbuf_r>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	460e      	mov	r6, r1
 8006648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664c:	2900      	cmp	r1, #0
 800664e:	b096      	sub	sp, #88	; 0x58
 8006650:	4614      	mov	r4, r2
 8006652:	461d      	mov	r5, r3
 8006654:	da07      	bge.n	8006666 <__swhatbuf_r+0x22>
 8006656:	2300      	movs	r3, #0
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	89b3      	ldrh	r3, [r6, #12]
 800665c:	061a      	lsls	r2, r3, #24
 800665e:	d410      	bmi.n	8006682 <__swhatbuf_r+0x3e>
 8006660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006664:	e00e      	b.n	8006684 <__swhatbuf_r+0x40>
 8006666:	466a      	mov	r2, sp
 8006668:	f000 fc36 	bl	8006ed8 <_fstat_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	dbf2      	blt.n	8006656 <__swhatbuf_r+0x12>
 8006670:	9a01      	ldr	r2, [sp, #4]
 8006672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006676:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800667a:	425a      	negs	r2, r3
 800667c:	415a      	adcs	r2, r3
 800667e:	602a      	str	r2, [r5, #0]
 8006680:	e7ee      	b.n	8006660 <__swhatbuf_r+0x1c>
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	2000      	movs	r0, #0
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	b016      	add	sp, #88	; 0x58
 800668a:	bd70      	pop	{r4, r5, r6, pc}

0800668c <__smakebuf_r>:
 800668c:	898b      	ldrh	r3, [r1, #12]
 800668e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006690:	079d      	lsls	r5, r3, #30
 8006692:	4606      	mov	r6, r0
 8006694:	460c      	mov	r4, r1
 8006696:	d507      	bpl.n	80066a8 <__smakebuf_r+0x1c>
 8006698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	2301      	movs	r3, #1
 80066a2:	6163      	str	r3, [r4, #20]
 80066a4:	b002      	add	sp, #8
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	ab01      	add	r3, sp, #4
 80066aa:	466a      	mov	r2, sp
 80066ac:	f7ff ffca 	bl	8006644 <__swhatbuf_r>
 80066b0:	9900      	ldr	r1, [sp, #0]
 80066b2:	4605      	mov	r5, r0
 80066b4:	4630      	mov	r0, r6
 80066b6:	f000 f877 	bl	80067a8 <_malloc_r>
 80066ba:	b948      	cbnz	r0, 80066d0 <__smakebuf_r+0x44>
 80066bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c0:	059a      	lsls	r2, r3, #22
 80066c2:	d4ef      	bmi.n	80066a4 <__smakebuf_r+0x18>
 80066c4:	f023 0303 	bic.w	r3, r3, #3
 80066c8:	f043 0302 	orr.w	r3, r3, #2
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	e7e3      	b.n	8006698 <__smakebuf_r+0xc>
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <__smakebuf_r+0x7c>)
 80066d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	6020      	str	r0, [r4, #0]
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	6163      	str	r3, [r4, #20]
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	6120      	str	r0, [r4, #16]
 80066e6:	b15b      	cbz	r3, 8006700 <__smakebuf_r+0x74>
 80066e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 fc05 	bl	8006efc <_isatty_r>
 80066f2:	b128      	cbz	r0, 8006700 <__smakebuf_r+0x74>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	431d      	orrs	r5, r3
 8006704:	81a5      	strh	r5, [r4, #12]
 8006706:	e7cd      	b.n	80066a4 <__smakebuf_r+0x18>
 8006708:	080064f9 	.word	0x080064f9

0800670c <_free_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4605      	mov	r5, r0
 8006710:	2900      	cmp	r1, #0
 8006712:	d045      	beq.n	80067a0 <_free_r+0x94>
 8006714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006718:	1f0c      	subs	r4, r1, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	bfb8      	it	lt
 800671e:	18e4      	addlt	r4, r4, r3
 8006720:	f000 fc0e 	bl	8006f40 <__malloc_lock>
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <_free_r+0x98>)
 8006726:	6813      	ldr	r3, [r2, #0]
 8006728:	4610      	mov	r0, r2
 800672a:	b933      	cbnz	r3, 800673a <_free_r+0x2e>
 800672c:	6063      	str	r3, [r4, #4]
 800672e:	6014      	str	r4, [r2, #0]
 8006730:	4628      	mov	r0, r5
 8006732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006736:	f000 bc04 	b.w	8006f42 <__malloc_unlock>
 800673a:	42a3      	cmp	r3, r4
 800673c:	d90c      	bls.n	8006758 <_free_r+0x4c>
 800673e:	6821      	ldr	r1, [r4, #0]
 8006740:	1862      	adds	r2, r4, r1
 8006742:	4293      	cmp	r3, r2
 8006744:	bf04      	itt	eq
 8006746:	681a      	ldreq	r2, [r3, #0]
 8006748:	685b      	ldreq	r3, [r3, #4]
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	bf04      	itt	eq
 800674e:	1852      	addeq	r2, r2, r1
 8006750:	6022      	streq	r2, [r4, #0]
 8006752:	6004      	str	r4, [r0, #0]
 8006754:	e7ec      	b.n	8006730 <_free_r+0x24>
 8006756:	4613      	mov	r3, r2
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	b10a      	cbz	r2, 8006760 <_free_r+0x54>
 800675c:	42a2      	cmp	r2, r4
 800675e:	d9fa      	bls.n	8006756 <_free_r+0x4a>
 8006760:	6819      	ldr	r1, [r3, #0]
 8006762:	1858      	adds	r0, r3, r1
 8006764:	42a0      	cmp	r0, r4
 8006766:	d10b      	bne.n	8006780 <_free_r+0x74>
 8006768:	6820      	ldr	r0, [r4, #0]
 800676a:	4401      	add	r1, r0
 800676c:	1858      	adds	r0, r3, r1
 800676e:	4282      	cmp	r2, r0
 8006770:	6019      	str	r1, [r3, #0]
 8006772:	d1dd      	bne.n	8006730 <_free_r+0x24>
 8006774:	6810      	ldr	r0, [r2, #0]
 8006776:	6852      	ldr	r2, [r2, #4]
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	4401      	add	r1, r0
 800677c:	6019      	str	r1, [r3, #0]
 800677e:	e7d7      	b.n	8006730 <_free_r+0x24>
 8006780:	d902      	bls.n	8006788 <_free_r+0x7c>
 8006782:	230c      	movs	r3, #12
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	e7d3      	b.n	8006730 <_free_r+0x24>
 8006788:	6820      	ldr	r0, [r4, #0]
 800678a:	1821      	adds	r1, r4, r0
 800678c:	428a      	cmp	r2, r1
 800678e:	bf04      	itt	eq
 8006790:	6811      	ldreq	r1, [r2, #0]
 8006792:	6852      	ldreq	r2, [r2, #4]
 8006794:	6062      	str	r2, [r4, #4]
 8006796:	bf04      	itt	eq
 8006798:	1809      	addeq	r1, r1, r0
 800679a:	6021      	streq	r1, [r4, #0]
 800679c:	605c      	str	r4, [r3, #4]
 800679e:	e7c7      	b.n	8006730 <_free_r+0x24>
 80067a0:	bd38      	pop	{r3, r4, r5, pc}
 80067a2:	bf00      	nop
 80067a4:	200013a8 	.word	0x200013a8

080067a8 <_malloc_r>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	1ccd      	adds	r5, r1, #3
 80067ac:	f025 0503 	bic.w	r5, r5, #3
 80067b0:	3508      	adds	r5, #8
 80067b2:	2d0c      	cmp	r5, #12
 80067b4:	bf38      	it	cc
 80067b6:	250c      	movcc	r5, #12
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	4606      	mov	r6, r0
 80067bc:	db01      	blt.n	80067c2 <_malloc_r+0x1a>
 80067be:	42a9      	cmp	r1, r5
 80067c0:	d903      	bls.n	80067ca <_malloc_r+0x22>
 80067c2:	230c      	movs	r3, #12
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	2000      	movs	r0, #0
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	f000 fbb9 	bl	8006f40 <__malloc_lock>
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <_malloc_r+0xac>)
 80067d0:	6814      	ldr	r4, [r2, #0]
 80067d2:	4621      	mov	r1, r4
 80067d4:	b991      	cbnz	r1, 80067fc <_malloc_r+0x54>
 80067d6:	4c20      	ldr	r4, [pc, #128]	; (8006858 <_malloc_r+0xb0>)
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	b91b      	cbnz	r3, 80067e4 <_malloc_r+0x3c>
 80067dc:	4630      	mov	r0, r6
 80067de:	f000 fb05 	bl	8006dec <_sbrk_r>
 80067e2:	6020      	str	r0, [r4, #0]
 80067e4:	4629      	mov	r1, r5
 80067e6:	4630      	mov	r0, r6
 80067e8:	f000 fb00 	bl	8006dec <_sbrk_r>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d124      	bne.n	800683a <_malloc_r+0x92>
 80067f0:	230c      	movs	r3, #12
 80067f2:	6033      	str	r3, [r6, #0]
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 fba4 	bl	8006f42 <__malloc_unlock>
 80067fa:	e7e4      	b.n	80067c6 <_malloc_r+0x1e>
 80067fc:	680b      	ldr	r3, [r1, #0]
 80067fe:	1b5b      	subs	r3, r3, r5
 8006800:	d418      	bmi.n	8006834 <_malloc_r+0x8c>
 8006802:	2b0b      	cmp	r3, #11
 8006804:	d90f      	bls.n	8006826 <_malloc_r+0x7e>
 8006806:	600b      	str	r3, [r1, #0]
 8006808:	50cd      	str	r5, [r1, r3]
 800680a:	18cc      	adds	r4, r1, r3
 800680c:	4630      	mov	r0, r6
 800680e:	f000 fb98 	bl	8006f42 <__malloc_unlock>
 8006812:	f104 000b 	add.w	r0, r4, #11
 8006816:	1d23      	adds	r3, r4, #4
 8006818:	f020 0007 	bic.w	r0, r0, #7
 800681c:	1ac3      	subs	r3, r0, r3
 800681e:	d0d3      	beq.n	80067c8 <_malloc_r+0x20>
 8006820:	425a      	negs	r2, r3
 8006822:	50e2      	str	r2, [r4, r3]
 8006824:	e7d0      	b.n	80067c8 <_malloc_r+0x20>
 8006826:	428c      	cmp	r4, r1
 8006828:	684b      	ldr	r3, [r1, #4]
 800682a:	bf16      	itet	ne
 800682c:	6063      	strne	r3, [r4, #4]
 800682e:	6013      	streq	r3, [r2, #0]
 8006830:	460c      	movne	r4, r1
 8006832:	e7eb      	b.n	800680c <_malloc_r+0x64>
 8006834:	460c      	mov	r4, r1
 8006836:	6849      	ldr	r1, [r1, #4]
 8006838:	e7cc      	b.n	80067d4 <_malloc_r+0x2c>
 800683a:	1cc4      	adds	r4, r0, #3
 800683c:	f024 0403 	bic.w	r4, r4, #3
 8006840:	42a0      	cmp	r0, r4
 8006842:	d005      	beq.n	8006850 <_malloc_r+0xa8>
 8006844:	1a21      	subs	r1, r4, r0
 8006846:	4630      	mov	r0, r6
 8006848:	f000 fad0 	bl	8006dec <_sbrk_r>
 800684c:	3001      	adds	r0, #1
 800684e:	d0cf      	beq.n	80067f0 <_malloc_r+0x48>
 8006850:	6025      	str	r5, [r4, #0]
 8006852:	e7db      	b.n	800680c <_malloc_r+0x64>
 8006854:	200013a8 	.word	0x200013a8
 8006858:	200013ac 	.word	0x200013ac

0800685c <__sfputc_r>:
 800685c:	6893      	ldr	r3, [r2, #8]
 800685e:	3b01      	subs	r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	b410      	push	{r4}
 8006864:	6093      	str	r3, [r2, #8]
 8006866:	da08      	bge.n	800687a <__sfputc_r+0x1e>
 8006868:	6994      	ldr	r4, [r2, #24]
 800686a:	42a3      	cmp	r3, r4
 800686c:	db01      	blt.n	8006872 <__sfputc_r+0x16>
 800686e:	290a      	cmp	r1, #10
 8006870:	d103      	bne.n	800687a <__sfputc_r+0x1e>
 8006872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006876:	f7ff bcab 	b.w	80061d0 <__swbuf_r>
 800687a:	6813      	ldr	r3, [r2, #0]
 800687c:	1c58      	adds	r0, r3, #1
 800687e:	6010      	str	r0, [r2, #0]
 8006880:	7019      	strb	r1, [r3, #0]
 8006882:	4608      	mov	r0, r1
 8006884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006888:	4770      	bx	lr

0800688a <__sfputs_r>:
 800688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688c:	4606      	mov	r6, r0
 800688e:	460f      	mov	r7, r1
 8006890:	4614      	mov	r4, r2
 8006892:	18d5      	adds	r5, r2, r3
 8006894:	42ac      	cmp	r4, r5
 8006896:	d101      	bne.n	800689c <__sfputs_r+0x12>
 8006898:	2000      	movs	r0, #0
 800689a:	e007      	b.n	80068ac <__sfputs_r+0x22>
 800689c:	463a      	mov	r2, r7
 800689e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff ffda 	bl	800685c <__sfputc_r>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d1f3      	bne.n	8006894 <__sfputs_r+0xa>
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068b0 <_vfiprintf_r>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	460c      	mov	r4, r1
 80068b6:	b09d      	sub	sp, #116	; 0x74
 80068b8:	4617      	mov	r7, r2
 80068ba:	461d      	mov	r5, r3
 80068bc:	4606      	mov	r6, r0
 80068be:	b118      	cbz	r0, 80068c8 <_vfiprintf_r+0x18>
 80068c0:	6983      	ldr	r3, [r0, #24]
 80068c2:	b90b      	cbnz	r3, 80068c8 <_vfiprintf_r+0x18>
 80068c4:	f7ff fe34 	bl	8006530 <__sinit>
 80068c8:	4b7c      	ldr	r3, [pc, #496]	; (8006abc <_vfiprintf_r+0x20c>)
 80068ca:	429c      	cmp	r4, r3
 80068cc:	d158      	bne.n	8006980 <_vfiprintf_r+0xd0>
 80068ce:	6874      	ldr	r4, [r6, #4]
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	0718      	lsls	r0, r3, #28
 80068d4:	d55e      	bpl.n	8006994 <_vfiprintf_r+0xe4>
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d05b      	beq.n	8006994 <_vfiprintf_r+0xe4>
 80068dc:	2300      	movs	r3, #0
 80068de:	9309      	str	r3, [sp, #36]	; 0x24
 80068e0:	2320      	movs	r3, #32
 80068e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068e6:	2330      	movs	r3, #48	; 0x30
 80068e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ec:	9503      	str	r5, [sp, #12]
 80068ee:	f04f 0b01 	mov.w	fp, #1
 80068f2:	46b8      	mov	r8, r7
 80068f4:	4645      	mov	r5, r8
 80068f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068fa:	b10b      	cbz	r3, 8006900 <_vfiprintf_r+0x50>
 80068fc:	2b25      	cmp	r3, #37	; 0x25
 80068fe:	d154      	bne.n	80069aa <_vfiprintf_r+0xfa>
 8006900:	ebb8 0a07 	subs.w	sl, r8, r7
 8006904:	d00b      	beq.n	800691e <_vfiprintf_r+0x6e>
 8006906:	4653      	mov	r3, sl
 8006908:	463a      	mov	r2, r7
 800690a:	4621      	mov	r1, r4
 800690c:	4630      	mov	r0, r6
 800690e:	f7ff ffbc 	bl	800688a <__sfputs_r>
 8006912:	3001      	adds	r0, #1
 8006914:	f000 80c2 	beq.w	8006a9c <_vfiprintf_r+0x1ec>
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	4453      	add	r3, sl
 800691c:	9309      	str	r3, [sp, #36]	; 0x24
 800691e:	f898 3000 	ldrb.w	r3, [r8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80ba 	beq.w	8006a9c <_vfiprintf_r+0x1ec>
 8006928:	2300      	movs	r3, #0
 800692a:	f04f 32ff 	mov.w	r2, #4294967295
 800692e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	9307      	str	r3, [sp, #28]
 8006936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800693a:	931a      	str	r3, [sp, #104]	; 0x68
 800693c:	46a8      	mov	r8, r5
 800693e:	2205      	movs	r2, #5
 8006940:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006944:	485e      	ldr	r0, [pc, #376]	; (8006ac0 <_vfiprintf_r+0x210>)
 8006946:	f7f9 fc1b 	bl	8000180 <memchr>
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	bb78      	cbnz	r0, 80069ae <_vfiprintf_r+0xfe>
 800694e:	06d9      	lsls	r1, r3, #27
 8006950:	bf44      	itt	mi
 8006952:	2220      	movmi	r2, #32
 8006954:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006958:	071a      	lsls	r2, r3, #28
 800695a:	bf44      	itt	mi
 800695c:	222b      	movmi	r2, #43	; 0x2b
 800695e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006962:	782a      	ldrb	r2, [r5, #0]
 8006964:	2a2a      	cmp	r2, #42	; 0x2a
 8006966:	d02a      	beq.n	80069be <_vfiprintf_r+0x10e>
 8006968:	9a07      	ldr	r2, [sp, #28]
 800696a:	46a8      	mov	r8, r5
 800696c:	2000      	movs	r0, #0
 800696e:	250a      	movs	r5, #10
 8006970:	4641      	mov	r1, r8
 8006972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006976:	3b30      	subs	r3, #48	; 0x30
 8006978:	2b09      	cmp	r3, #9
 800697a:	d969      	bls.n	8006a50 <_vfiprintf_r+0x1a0>
 800697c:	b360      	cbz	r0, 80069d8 <_vfiprintf_r+0x128>
 800697e:	e024      	b.n	80069ca <_vfiprintf_r+0x11a>
 8006980:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <_vfiprintf_r+0x214>)
 8006982:	429c      	cmp	r4, r3
 8006984:	d101      	bne.n	800698a <_vfiprintf_r+0xda>
 8006986:	68b4      	ldr	r4, [r6, #8]
 8006988:	e7a2      	b.n	80068d0 <_vfiprintf_r+0x20>
 800698a:	4b4f      	ldr	r3, [pc, #316]	; (8006ac8 <_vfiprintf_r+0x218>)
 800698c:	429c      	cmp	r4, r3
 800698e:	bf08      	it	eq
 8006990:	68f4      	ldreq	r4, [r6, #12]
 8006992:	e79d      	b.n	80068d0 <_vfiprintf_r+0x20>
 8006994:	4621      	mov	r1, r4
 8006996:	4630      	mov	r0, r6
 8006998:	f7ff fc6c 	bl	8006274 <__swsetup_r>
 800699c:	2800      	cmp	r0, #0
 800699e:	d09d      	beq.n	80068dc <_vfiprintf_r+0x2c>
 80069a0:	f04f 30ff 	mov.w	r0, #4294967295
 80069a4:	b01d      	add	sp, #116	; 0x74
 80069a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069aa:	46a8      	mov	r8, r5
 80069ac:	e7a2      	b.n	80068f4 <_vfiprintf_r+0x44>
 80069ae:	4a44      	ldr	r2, [pc, #272]	; (8006ac0 <_vfiprintf_r+0x210>)
 80069b0:	1a80      	subs	r0, r0, r2
 80069b2:	fa0b f000 	lsl.w	r0, fp, r0
 80069b6:	4318      	orrs	r0, r3
 80069b8:	9004      	str	r0, [sp, #16]
 80069ba:	4645      	mov	r5, r8
 80069bc:	e7be      	b.n	800693c <_vfiprintf_r+0x8c>
 80069be:	9a03      	ldr	r2, [sp, #12]
 80069c0:	1d11      	adds	r1, r2, #4
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	9103      	str	r1, [sp, #12]
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	db01      	blt.n	80069ce <_vfiprintf_r+0x11e>
 80069ca:	9207      	str	r2, [sp, #28]
 80069cc:	e004      	b.n	80069d8 <_vfiprintf_r+0x128>
 80069ce:	4252      	negs	r2, r2
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	9207      	str	r2, [sp, #28]
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	f898 3000 	ldrb.w	r3, [r8]
 80069dc:	2b2e      	cmp	r3, #46	; 0x2e
 80069de:	d10e      	bne.n	80069fe <_vfiprintf_r+0x14e>
 80069e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80069e4:	2b2a      	cmp	r3, #42	; 0x2a
 80069e6:	d138      	bne.n	8006a5a <_vfiprintf_r+0x1aa>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	1d1a      	adds	r2, r3, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	9203      	str	r2, [sp, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bfb8      	it	lt
 80069f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069f8:	f108 0802 	add.w	r8, r8, #2
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	4d33      	ldr	r5, [pc, #204]	; (8006acc <_vfiprintf_r+0x21c>)
 8006a00:	f898 1000 	ldrb.w	r1, [r8]
 8006a04:	2203      	movs	r2, #3
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7f9 fbba 	bl	8000180 <memchr>
 8006a0c:	b140      	cbz	r0, 8006a20 <_vfiprintf_r+0x170>
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	1b40      	subs	r0, r0, r5
 8006a12:	fa03 f000 	lsl.w	r0, r3, r0
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	4303      	orrs	r3, r0
 8006a1a:	f108 0801 	add.w	r8, r8, #1
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	f898 1000 	ldrb.w	r1, [r8]
 8006a24:	482a      	ldr	r0, [pc, #168]	; (8006ad0 <_vfiprintf_r+0x220>)
 8006a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a2a:	2206      	movs	r2, #6
 8006a2c:	f108 0701 	add.w	r7, r8, #1
 8006a30:	f7f9 fba6 	bl	8000180 <memchr>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d037      	beq.n	8006aa8 <_vfiprintf_r+0x1f8>
 8006a38:	4b26      	ldr	r3, [pc, #152]	; (8006ad4 <_vfiprintf_r+0x224>)
 8006a3a:	bb1b      	cbnz	r3, 8006a84 <_vfiprintf_r+0x1d4>
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	3307      	adds	r3, #7
 8006a40:	f023 0307 	bic.w	r3, r3, #7
 8006a44:	3308      	adds	r3, #8
 8006a46:	9303      	str	r3, [sp, #12]
 8006a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4a:	444b      	add	r3, r9
 8006a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4e:	e750      	b.n	80068f2 <_vfiprintf_r+0x42>
 8006a50:	fb05 3202 	mla	r2, r5, r2, r3
 8006a54:	2001      	movs	r0, #1
 8006a56:	4688      	mov	r8, r1
 8006a58:	e78a      	b.n	8006970 <_vfiprintf_r+0xc0>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f108 0801 	add.w	r8, r8, #1
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	4619      	mov	r1, r3
 8006a64:	250a      	movs	r5, #10
 8006a66:	4640      	mov	r0, r8
 8006a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a6c:	3a30      	subs	r2, #48	; 0x30
 8006a6e:	2a09      	cmp	r2, #9
 8006a70:	d903      	bls.n	8006a7a <_vfiprintf_r+0x1ca>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0c3      	beq.n	80069fe <_vfiprintf_r+0x14e>
 8006a76:	9105      	str	r1, [sp, #20]
 8006a78:	e7c1      	b.n	80069fe <_vfiprintf_r+0x14e>
 8006a7a:	fb05 2101 	mla	r1, r5, r1, r2
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4680      	mov	r8, r0
 8006a82:	e7f0      	b.n	8006a66 <_vfiprintf_r+0x1b6>
 8006a84:	ab03      	add	r3, sp, #12
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4622      	mov	r2, r4
 8006a8a:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <_vfiprintf_r+0x228>)
 8006a8c:	a904      	add	r1, sp, #16
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f3af 8000 	nop.w
 8006a94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a98:	4681      	mov	r9, r0
 8006a9a:	d1d5      	bne.n	8006a48 <_vfiprintf_r+0x198>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	065b      	lsls	r3, r3, #25
 8006aa0:	f53f af7e 	bmi.w	80069a0 <_vfiprintf_r+0xf0>
 8006aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aa6:	e77d      	b.n	80069a4 <_vfiprintf_r+0xf4>
 8006aa8:	ab03      	add	r3, sp, #12
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4622      	mov	r2, r4
 8006aae:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <_vfiprintf_r+0x228>)
 8006ab0:	a904      	add	r1, sp, #16
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f000 f888 	bl	8006bc8 <_printf_i>
 8006ab8:	e7ec      	b.n	8006a94 <_vfiprintf_r+0x1e4>
 8006aba:	bf00      	nop
 8006abc:	08007898 	.word	0x08007898
 8006ac0:	080078d8 	.word	0x080078d8
 8006ac4:	080078b8 	.word	0x080078b8
 8006ac8:	08007878 	.word	0x08007878
 8006acc:	080078de 	.word	0x080078de
 8006ad0:	080078e2 	.word	0x080078e2
 8006ad4:	00000000 	.word	0x00000000
 8006ad8:	0800688b 	.word	0x0800688b

08006adc <_printf_common>:
 8006adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae0:	4691      	mov	r9, r2
 8006ae2:	461f      	mov	r7, r3
 8006ae4:	688a      	ldr	r2, [r1, #8]
 8006ae6:	690b      	ldr	r3, [r1, #16]
 8006ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aec:	4293      	cmp	r3, r2
 8006aee:	bfb8      	it	lt
 8006af0:	4613      	movlt	r3, r2
 8006af2:	f8c9 3000 	str.w	r3, [r9]
 8006af6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006afa:	4606      	mov	r6, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	b112      	cbz	r2, 8006b06 <_printf_common+0x2a>
 8006b00:	3301      	adds	r3, #1
 8006b02:	f8c9 3000 	str.w	r3, [r9]
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	0699      	lsls	r1, r3, #26
 8006b0a:	bf42      	ittt	mi
 8006b0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b10:	3302      	addmi	r3, #2
 8006b12:	f8c9 3000 	strmi.w	r3, [r9]
 8006b16:	6825      	ldr	r5, [r4, #0]
 8006b18:	f015 0506 	ands.w	r5, r5, #6
 8006b1c:	d107      	bne.n	8006b2e <_printf_common+0x52>
 8006b1e:	f104 0a19 	add.w	sl, r4, #25
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	f8d9 2000 	ldr.w	r2, [r9]
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	42ab      	cmp	r3, r5
 8006b2c:	dc28      	bgt.n	8006b80 <_printf_common+0xa4>
 8006b2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	3300      	adds	r3, #0
 8006b36:	bf18      	it	ne
 8006b38:	2301      	movne	r3, #1
 8006b3a:	0692      	lsls	r2, r2, #26
 8006b3c:	d42d      	bmi.n	8006b9a <_printf_common+0xbe>
 8006b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b42:	4639      	mov	r1, r7
 8006b44:	4630      	mov	r0, r6
 8006b46:	47c0      	blx	r8
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d020      	beq.n	8006b8e <_printf_common+0xb2>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	68e5      	ldr	r5, [r4, #12]
 8006b50:	f8d9 2000 	ldr.w	r2, [r9]
 8006b54:	f003 0306 	and.w	r3, r3, #6
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	bf08      	it	eq
 8006b5c:	1aad      	subeq	r5, r5, r2
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	6922      	ldr	r2, [r4, #16]
 8006b62:	bf0c      	ite	eq
 8006b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b68:	2500      	movne	r5, #0
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	bfc4      	itt	gt
 8006b6e:	1a9b      	subgt	r3, r3, r2
 8006b70:	18ed      	addgt	r5, r5, r3
 8006b72:	f04f 0900 	mov.w	r9, #0
 8006b76:	341a      	adds	r4, #26
 8006b78:	454d      	cmp	r5, r9
 8006b7a:	d11a      	bne.n	8006bb2 <_printf_common+0xd6>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e008      	b.n	8006b92 <_printf_common+0xb6>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4652      	mov	r2, sl
 8006b84:	4639      	mov	r1, r7
 8006b86:	4630      	mov	r0, r6
 8006b88:	47c0      	blx	r8
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d103      	bne.n	8006b96 <_printf_common+0xba>
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b96:	3501      	adds	r5, #1
 8006b98:	e7c3      	b.n	8006b22 <_printf_common+0x46>
 8006b9a:	18e1      	adds	r1, r4, r3
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	2030      	movs	r0, #48	; 0x30
 8006ba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ba4:	4422      	add	r2, r4
 8006ba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006baa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bae:	3302      	adds	r3, #2
 8006bb0:	e7c5      	b.n	8006b3e <_printf_common+0x62>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	4630      	mov	r0, r6
 8006bba:	47c0      	blx	r8
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d0e6      	beq.n	8006b8e <_printf_common+0xb2>
 8006bc0:	f109 0901 	add.w	r9, r9, #1
 8006bc4:	e7d8      	b.n	8006b78 <_printf_common+0x9c>
	...

08006bc8 <_printf_i>:
 8006bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	7e09      	ldrb	r1, [r1, #24]
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	296e      	cmp	r1, #110	; 0x6e
 8006bd8:	4617      	mov	r7, r2
 8006bda:	4606      	mov	r6, r0
 8006bdc:	4698      	mov	r8, r3
 8006bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006be0:	f000 80b3 	beq.w	8006d4a <_printf_i+0x182>
 8006be4:	d822      	bhi.n	8006c2c <_printf_i+0x64>
 8006be6:	2963      	cmp	r1, #99	; 0x63
 8006be8:	d036      	beq.n	8006c58 <_printf_i+0x90>
 8006bea:	d80a      	bhi.n	8006c02 <_printf_i+0x3a>
 8006bec:	2900      	cmp	r1, #0
 8006bee:	f000 80b9 	beq.w	8006d64 <_printf_i+0x19c>
 8006bf2:	2958      	cmp	r1, #88	; 0x58
 8006bf4:	f000 8083 	beq.w	8006cfe <_printf_i+0x136>
 8006bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c00:	e032      	b.n	8006c68 <_printf_i+0xa0>
 8006c02:	2964      	cmp	r1, #100	; 0x64
 8006c04:	d001      	beq.n	8006c0a <_printf_i+0x42>
 8006c06:	2969      	cmp	r1, #105	; 0x69
 8006c08:	d1f6      	bne.n	8006bf8 <_printf_i+0x30>
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	6813      	ldr	r3, [r2, #0]
 8006c0e:	0605      	lsls	r5, r0, #24
 8006c10:	f103 0104 	add.w	r1, r3, #4
 8006c14:	d52a      	bpl.n	8006c6c <_printf_i+0xa4>
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6011      	str	r1, [r2, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da03      	bge.n	8006c26 <_printf_i+0x5e>
 8006c1e:	222d      	movs	r2, #45	; 0x2d
 8006c20:	425b      	negs	r3, r3
 8006c22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c26:	486f      	ldr	r0, [pc, #444]	; (8006de4 <_printf_i+0x21c>)
 8006c28:	220a      	movs	r2, #10
 8006c2a:	e039      	b.n	8006ca0 <_printf_i+0xd8>
 8006c2c:	2973      	cmp	r1, #115	; 0x73
 8006c2e:	f000 809d 	beq.w	8006d6c <_printf_i+0x1a4>
 8006c32:	d808      	bhi.n	8006c46 <_printf_i+0x7e>
 8006c34:	296f      	cmp	r1, #111	; 0x6f
 8006c36:	d020      	beq.n	8006c7a <_printf_i+0xb2>
 8006c38:	2970      	cmp	r1, #112	; 0x70
 8006c3a:	d1dd      	bne.n	8006bf8 <_printf_i+0x30>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	f043 0320 	orr.w	r3, r3, #32
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	e003      	b.n	8006c4e <_printf_i+0x86>
 8006c46:	2975      	cmp	r1, #117	; 0x75
 8006c48:	d017      	beq.n	8006c7a <_printf_i+0xb2>
 8006c4a:	2978      	cmp	r1, #120	; 0x78
 8006c4c:	d1d4      	bne.n	8006bf8 <_printf_i+0x30>
 8006c4e:	2378      	movs	r3, #120	; 0x78
 8006c50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c54:	4864      	ldr	r0, [pc, #400]	; (8006de8 <_printf_i+0x220>)
 8006c56:	e055      	b.n	8006d04 <_printf_i+0x13c>
 8006c58:	6813      	ldr	r3, [r2, #0]
 8006c5a:	1d19      	adds	r1, r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6011      	str	r1, [r2, #0]
 8006c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e08c      	b.n	8006d86 <_printf_i+0x1be>
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6011      	str	r1, [r2, #0]
 8006c70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c74:	bf18      	it	ne
 8006c76:	b21b      	sxthne	r3, r3
 8006c78:	e7cf      	b.n	8006c1a <_printf_i+0x52>
 8006c7a:	6813      	ldr	r3, [r2, #0]
 8006c7c:	6825      	ldr	r5, [r4, #0]
 8006c7e:	1d18      	adds	r0, r3, #4
 8006c80:	6010      	str	r0, [r2, #0]
 8006c82:	0628      	lsls	r0, r5, #24
 8006c84:	d501      	bpl.n	8006c8a <_printf_i+0xc2>
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	e002      	b.n	8006c90 <_printf_i+0xc8>
 8006c8a:	0668      	lsls	r0, r5, #25
 8006c8c:	d5fb      	bpl.n	8006c86 <_printf_i+0xbe>
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	4854      	ldr	r0, [pc, #336]	; (8006de4 <_printf_i+0x21c>)
 8006c92:	296f      	cmp	r1, #111	; 0x6f
 8006c94:	bf14      	ite	ne
 8006c96:	220a      	movne	r2, #10
 8006c98:	2208      	moveq	r2, #8
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ca0:	6865      	ldr	r5, [r4, #4]
 8006ca2:	60a5      	str	r5, [r4, #8]
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	f2c0 8095 	blt.w	8006dd4 <_printf_i+0x20c>
 8006caa:	6821      	ldr	r1, [r4, #0]
 8006cac:	f021 0104 	bic.w	r1, r1, #4
 8006cb0:	6021      	str	r1, [r4, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d13d      	bne.n	8006d32 <_printf_i+0x16a>
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	f040 808e 	bne.w	8006dd8 <_printf_i+0x210>
 8006cbc:	4665      	mov	r5, ip
 8006cbe:	2a08      	cmp	r2, #8
 8006cc0:	d10b      	bne.n	8006cda <_printf_i+0x112>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	07db      	lsls	r3, r3, #31
 8006cc6:	d508      	bpl.n	8006cda <_printf_i+0x112>
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	bfde      	ittt	le
 8006cd0:	2330      	movle	r3, #48	; 0x30
 8006cd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cda:	ebac 0305 	sub.w	r3, ip, r5
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f8cd 8000 	str.w	r8, [sp]
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	aa03      	add	r2, sp, #12
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff fef6 	bl	8006adc <_printf_common>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d14d      	bne.n	8006d90 <_printf_i+0x1c8>
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	b005      	add	sp, #20
 8006cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cfe:	4839      	ldr	r0, [pc, #228]	; (8006de4 <_printf_i+0x21c>)
 8006d00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d04:	6813      	ldr	r3, [r2, #0]
 8006d06:	6821      	ldr	r1, [r4, #0]
 8006d08:	1d1d      	adds	r5, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6015      	str	r5, [r2, #0]
 8006d0e:	060a      	lsls	r2, r1, #24
 8006d10:	d50b      	bpl.n	8006d2a <_printf_i+0x162>
 8006d12:	07ca      	lsls	r2, r1, #31
 8006d14:	bf44      	itt	mi
 8006d16:	f041 0120 	orrmi.w	r1, r1, #32
 8006d1a:	6021      	strmi	r1, [r4, #0]
 8006d1c:	b91b      	cbnz	r3, 8006d26 <_printf_i+0x15e>
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	f022 0220 	bic.w	r2, r2, #32
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	2210      	movs	r2, #16
 8006d28:	e7b7      	b.n	8006c9a <_printf_i+0xd2>
 8006d2a:	064d      	lsls	r5, r1, #25
 8006d2c:	bf48      	it	mi
 8006d2e:	b29b      	uxthmi	r3, r3
 8006d30:	e7ef      	b.n	8006d12 <_printf_i+0x14a>
 8006d32:	4665      	mov	r5, ip
 8006d34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d38:	fb02 3311 	mls	r3, r2, r1, r3
 8006d3c:	5cc3      	ldrb	r3, [r0, r3]
 8006d3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d42:	460b      	mov	r3, r1
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d1f5      	bne.n	8006d34 <_printf_i+0x16c>
 8006d48:	e7b9      	b.n	8006cbe <_printf_i+0xf6>
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	6825      	ldr	r5, [r4, #0]
 8006d4e:	6961      	ldr	r1, [r4, #20]
 8006d50:	1d18      	adds	r0, r3, #4
 8006d52:	6010      	str	r0, [r2, #0]
 8006d54:	0628      	lsls	r0, r5, #24
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	d501      	bpl.n	8006d5e <_printf_i+0x196>
 8006d5a:	6019      	str	r1, [r3, #0]
 8006d5c:	e002      	b.n	8006d64 <_printf_i+0x19c>
 8006d5e:	066a      	lsls	r2, r5, #25
 8006d60:	d5fb      	bpl.n	8006d5a <_printf_i+0x192>
 8006d62:	8019      	strh	r1, [r3, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	6123      	str	r3, [r4, #16]
 8006d68:	4665      	mov	r5, ip
 8006d6a:	e7b9      	b.n	8006ce0 <_printf_i+0x118>
 8006d6c:	6813      	ldr	r3, [r2, #0]
 8006d6e:	1d19      	adds	r1, r3, #4
 8006d70:	6011      	str	r1, [r2, #0]
 8006d72:	681d      	ldr	r5, [r3, #0]
 8006d74:	6862      	ldr	r2, [r4, #4]
 8006d76:	2100      	movs	r1, #0
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f7f9 fa01 	bl	8000180 <memchr>
 8006d7e:	b108      	cbz	r0, 8006d84 <_printf_i+0x1bc>
 8006d80:	1b40      	subs	r0, r0, r5
 8006d82:	6060      	str	r0, [r4, #4]
 8006d84:	6863      	ldr	r3, [r4, #4]
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8e:	e7a7      	b.n	8006ce0 <_printf_i+0x118>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	462a      	mov	r2, r5
 8006d94:	4639      	mov	r1, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	47c0      	blx	r8
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d0aa      	beq.n	8006cf4 <_printf_i+0x12c>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	079b      	lsls	r3, r3, #30
 8006da2:	d413      	bmi.n	8006dcc <_printf_i+0x204>
 8006da4:	68e0      	ldr	r0, [r4, #12]
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	4298      	cmp	r0, r3
 8006daa:	bfb8      	it	lt
 8006dac:	4618      	movlt	r0, r3
 8006dae:	e7a3      	b.n	8006cf8 <_printf_i+0x130>
 8006db0:	2301      	movs	r3, #1
 8006db2:	464a      	mov	r2, r9
 8006db4:	4639      	mov	r1, r7
 8006db6:	4630      	mov	r0, r6
 8006db8:	47c0      	blx	r8
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d09a      	beq.n	8006cf4 <_printf_i+0x12c>
 8006dbe:	3501      	adds	r5, #1
 8006dc0:	68e3      	ldr	r3, [r4, #12]
 8006dc2:	9a03      	ldr	r2, [sp, #12]
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	42ab      	cmp	r3, r5
 8006dc8:	dcf2      	bgt.n	8006db0 <_printf_i+0x1e8>
 8006dca:	e7eb      	b.n	8006da4 <_printf_i+0x1dc>
 8006dcc:	2500      	movs	r5, #0
 8006dce:	f104 0919 	add.w	r9, r4, #25
 8006dd2:	e7f5      	b.n	8006dc0 <_printf_i+0x1f8>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ac      	bne.n	8006d32 <_printf_i+0x16a>
 8006dd8:	7803      	ldrb	r3, [r0, #0]
 8006dda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006de2:	e76c      	b.n	8006cbe <_printf_i+0xf6>
 8006de4:	080078e9 	.word	0x080078e9
 8006de8:	080078fa 	.word	0x080078fa

08006dec <_sbrk_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4c06      	ldr	r4, [pc, #24]	; (8006e08 <_sbrk_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4605      	mov	r5, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	f7f9 fbd8 	bl	80005ac <_sbrk>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_sbrk_r+0x1a>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_sbrk_r+0x1a>
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	20001608 	.word	0x20001608

08006e0c <__sread>:
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	460c      	mov	r4, r1
 8006e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e14:	f000 f896 	bl	8006f44 <_read_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	bfab      	itete	ge
 8006e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e20:	181b      	addge	r3, r3, r0
 8006e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e26:	bfac      	ite	ge
 8006e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e2a:	81a3      	strhlt	r3, [r4, #12]
 8006e2c:	bd10      	pop	{r4, pc}

08006e2e <__swrite>:
 8006e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e32:	461f      	mov	r7, r3
 8006e34:	898b      	ldrh	r3, [r1, #12]
 8006e36:	05db      	lsls	r3, r3, #23
 8006e38:	4605      	mov	r5, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	d505      	bpl.n	8006e4c <__swrite+0x1e>
 8006e40:	2302      	movs	r3, #2
 8006e42:	2200      	movs	r2, #0
 8006e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e48:	f000 f868 	bl	8006f1c <_lseek_r>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	4632      	mov	r2, r6
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	f000 b817 	b.w	8006e94 <_write_r>

08006e66 <__sseek>:
 8006e66:	b510      	push	{r4, lr}
 8006e68:	460c      	mov	r4, r1
 8006e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6e:	f000 f855 	bl	8006f1c <_lseek_r>
 8006e72:	1c43      	adds	r3, r0, #1
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	bf15      	itete	ne
 8006e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e82:	81a3      	strheq	r3, [r4, #12]
 8006e84:	bf18      	it	ne
 8006e86:	81a3      	strhne	r3, [r4, #12]
 8006e88:	bd10      	pop	{r4, pc}

08006e8a <__sclose>:
 8006e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8e:	f000 b813 	b.w	8006eb8 <_close_r>
	...

08006e94 <_write_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4c07      	ldr	r4, [pc, #28]	; (8006eb4 <_write_r+0x20>)
 8006e98:	4605      	mov	r5, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7fe f9dc 	bl	8005260 <_write>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_write_r+0x1e>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_write_r+0x1e>
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20001608 	.word	0x20001608

08006eb8 <_close_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4c06      	ldr	r4, [pc, #24]	; (8006ed4 <_close_r+0x1c>)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	f7f9 fb8c 	bl	80005e0 <_close>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_close_r+0x1a>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_close_r+0x1a>
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20001608 	.word	0x20001608

08006ed8 <_fstat_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4c07      	ldr	r4, [pc, #28]	; (8006ef8 <_fstat_r+0x20>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4605      	mov	r5, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	f7f9 fb7e 	bl	80005e6 <_fstat>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d102      	bne.n	8006ef4 <_fstat_r+0x1c>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	b103      	cbz	r3, 8006ef4 <_fstat_r+0x1c>
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20001608 	.word	0x20001608

08006efc <_isatty_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4c06      	ldr	r4, [pc, #24]	; (8006f18 <_isatty_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4605      	mov	r5, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	f7f9 fb72 	bl	80005f0 <_isatty>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_isatty_r+0x1a>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_isatty_r+0x1a>
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20001608 	.word	0x20001608

08006f1c <_lseek_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4c07      	ldr	r4, [pc, #28]	; (8006f3c <_lseek_r+0x20>)
 8006f20:	4605      	mov	r5, r0
 8006f22:	4608      	mov	r0, r1
 8006f24:	4611      	mov	r1, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f7f9 fb62 	bl	80005f4 <_lseek>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_lseek_r+0x1e>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_lseek_r+0x1e>
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	20001608 	.word	0x20001608

08006f40 <__malloc_lock>:
 8006f40:	4770      	bx	lr

08006f42 <__malloc_unlock>:
 8006f42:	4770      	bx	lr

08006f44 <_read_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4c07      	ldr	r4, [pc, #28]	; (8006f64 <_read_r+0x20>)
 8006f48:	4605      	mov	r5, r0
 8006f4a:	4608      	mov	r0, r1
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	6022      	str	r2, [r4, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f7f9 fb1b 	bl	800058e <_read>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_read_r+0x1e>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_read_r+0x1e>
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	20001608 	.word	0x20001608

08006f68 <_init>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr

08006f74 <_fini>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	bf00      	nop
 8006f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7a:	bc08      	pop	{r3}
 8006f7c:	469e      	mov	lr, r3
 8006f7e:	4770      	bx	lr
